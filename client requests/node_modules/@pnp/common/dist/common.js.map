{"version":3,"file":"common.js","sources":["../../../../packages/common/src/blobutil.ts","../../../../packages/common/src/collections.ts","../../../../packages/common/src/decorators.ts","../../../../packages/common/src/exceptions.ts","../../../../packages/common/src/libconfig.ts","../../../../packages/common/src/util.ts","../../../../packages/common/src/netutil.ts","../../../../packages/common/src/storage.ts"],"sourcesContent":["/**\n * Reads a blob as text\n *\n * @param blob The data to read\n */\nexport function readBlobAsText(blob: Blob): Promise<string> {\n    return readBlobAs<string>(blob, \"string\");\n}\n\n/**\n * Reads a blob into an array buffer\n *\n * @param blob The data to read\n */\nexport function readBlobAsArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n    return readBlobAs<ArrayBuffer>(blob, \"buffer\");\n}\n\n/**\n * Generic method to read blob's content\n *\n * @param blob The data to read\n * @param mode The read mode\n */\nfunction readBlobAs<T>(blob: Blob, mode: \"string\" | \"buffer\"): Promise<T> {\n\n    return new Promise<T>((resolve, reject) => {\n\n        try {\n\n            const reader = new FileReader();\n            reader.onload = (e: any) => {\n                resolve(e.target.result);\n            };\n\n            switch (mode) {\n                case \"string\":\n                    reader.readAsText(blob);\n                    break;\n                case \"buffer\":\n                    reader.readAsArrayBuffer(blob);\n                    break;\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n","/**\n * Interface defining an object with a known property type\n */\nexport interface TypedHash<T> {\n    [key: string]: T;\n}\n\n/**\n * Generic dictionary\n */\nexport class Dictionary<T> {\n\n    /**\n     * Creates a new instance of the Dictionary<T> class\n     *\n     * @constructor\n     */\n    constructor(private keys: string[] = [], private values: T[] = []) {\n    }\n\n    /**\n     * Gets a value from the collection using the specified key\n     *\n     * @param key The key whose value we want to return, returns null if the key does not exist\n     */\n    public get(key: string): T | null {\n        const index = this.keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        return this.values[index];\n    }\n\n    /**\n     * Adds the supplied key and value to the dictionary\n     *\n     * @param key The key to add\n     * @param o The value to add\n     */\n    public add(key: string, o: T | null): void {\n        const index = this.keys.indexOf(key);\n        if (index > -1) {\n            if (o === null) {\n                this.remove(key);\n            } else {\n                this.values[index] = o;\n            }\n        } else {\n            if (o !== null) {\n                this.keys.push(key);\n                this.values.push(o);\n            }\n        }\n    }\n\n    /**\n     * Merges the supplied typed hash into this dictionary instance. Existing values are updated and new ones are created as appropriate.\n     */\n    public merge(source: TypedHash<T> | Dictionary<T>): void {\n        if (\"getKeys\" in source) {\n            const sourceAsDictionary = source as Dictionary<T>;\n            sourceAsDictionary.getKeys().map(key => {\n                this.add(key, sourceAsDictionary.get(key));\n            });\n        } else {\n            const sourceAsHash = source as TypedHash<T>;\n            for (const key in sourceAsHash) {\n                if (sourceAsHash.hasOwnProperty(key)) {\n                    this.add(key, sourceAsHash[key]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Removes a value from the dictionary\n     *\n     * @param key The key of the key/value pair to remove. Returns null if the key was not found.\n     */\n    public remove(key: string): T | null {\n        const index = this.keys.indexOf(key);\n        if (index < 0) {\n            return null;\n        }\n        const val = this.values[index];\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n        return val;\n    }\n\n    /**\n     * Returns all the keys currently in the dictionary as an array\n     */\n    public getKeys(): string[] {\n        return this.keys;\n    }\n\n    /**\n     * Returns all the values currently in the dictionary as an array\n     */\n    public getValues(): T[] {\n        return this.values;\n    }\n\n    /**\n     * Clears the current dictionary\n     */\n    public clear(): void {\n        this.keys = [];\n        this.values = [];\n    }\n\n    /**\n     * Gets a count of the items currently in the dictionary\n     */\n    public get count(): number {\n        return this.keys.length;\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport function deprecated(deprecationVersion: string, message: string) {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (this: any, ...args: any[]) {\n            Logger.log({\n                data: {\n                    descriptor: descriptor,\n                    propertyKey: propertyKey,\n                    target: target,\n                },\n                level: LogLevel.Warning,\n                message: `(${deprecationVersion}) ${message}`,\n            });\n\n            return method.apply(this, args);\n        };\n    };\n}\n\nexport function beta(message = \"This feature is flagged as beta and is subject to change.\") {\n\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (this: any, ...args: any[]) {\n            Logger.log({\n                data: {\n                    descriptor: descriptor,\n                    propertyKey: propertyKey,\n                    target: target,\n                },\n                level: LogLevel.Warning,\n                message: message,\n            });\n\n            return method.apply(this, args);\n        };\n    };\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\nexport class UrlException extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n        this.name = \"UrlException\";\n        Logger.log({ data: {}, level: LogLevel.Error, message: `[${this.name}]::${this.message}` });\n    }\n}\n","import { TypedHash, Dictionary } from \"./collections\";\nimport { ISPFXContext } from \"./spfxContextInterface\";\n\nexport interface LibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: any;\n}\n\nexport function setup(config: LibraryConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class RuntimeConfigImpl {\n\n    private _v: Dictionary<any>;\n\n    constructor() {\n\n        this._v = new Dictionary();\n\n        // setup defaults\n        this._v.add(\"defaultCachingStore\", \"session\");\n        this._v.add(\"defaultCachingTimeoutSeconds\", 60);\n        this._v.add(\"globalCacheDisable\", false);\n        this._v.add(\"enableCacheExpiration\", false);\n        this._v.add(\"cacheExpirationIntervalMilliseconds\", 750);\n        this._v.add(\"spfxContext\", null);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public extend(config: TypedHash<any>): void {\n\n        Object.keys(config).forEach((key: string) => {\n            this._v.add(key, config[key]);\n        });\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(\"defaultCachingStore\");\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(\"defaultCachingTimeoutSeconds\");\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(\"globalCacheDisable\");\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(\"enableCacheExpiration\");\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(\"cacheExpirationIntervalMilliseconds\");\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(\"spfxContext\");\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n","/**\n * Gets a callback function which will maintain context across async calls.\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n *\n * @param context The object that will be the 'this' value in the callback\n * @param method The method to which we will apply the context and parameters\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n */\nexport function getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n    return function () {\n        method.apply(context, params);\n    };\n}\n\n/**\n * Adds a value to a date\n *\n * @param date The date to which we will add units, done in local time\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n * @param units The amount to add to date of the given interval\n *\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n */\nexport function dateAdd(date: Date, interval: string, units: number): Date | undefined {\n    let ret: Date | undefined = new Date(date); // don't change original date\n    switch (interval.toLowerCase()) {\n        case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n        case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n        case \"month\": ret.setMonth(ret.getMonth() + units); break;\n        case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n        case \"day\": ret.setDate(ret.getDate() + units); break;\n        case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n        case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n        case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n        default: ret = undefined; break;\n    }\n    return ret;\n}\n\n/**\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\n *\n * @param paths 0 to n path parts to combine\n */\nexport function combinePaths(...paths: string[]): string {\n\n    return paths\n        .filter(path => !Util.stringIsNullOrEmpty(path))\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n        .join(\"/\")\n        .replace(/\\\\/g, \"/\");\n}\n\n/**\n * Gets a random string of chars length\n *\n * @param chars The length of the random string to generate\n */\nexport function getRandomString(chars: number): string {\n    const text = new Array(chars);\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < chars; i++) {\n        text[i] = possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text.join(\"\");\n}\n\n/**\n * Gets a random GUID value\n *\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\n/* tslint:disable no-bitwise */\nexport function getGUID(): string {\n    let d = new Date().getTime();\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return guid;\n}\n/* tslint:enable */\n\n/**\n * Determines if a given value is a function\n *\n * @param cf The thing to test for functionness\n */\nexport function isFunc(cf: any): boolean {\n    return typeof cf === \"function\";\n}\n\n/**\n * Determines if an object is both defined and not null\n * @param obj Object to test\n */\nexport function objectDefinedNotNull(obj: any): boolean {\n    return typeof obj !== \"undefined\" && obj !== null;\n}\n\n/**\n * @returns whether the provided parameter is a JavaScript Array or not.\n*/\nexport function isArray(array: any): boolean {\n\n    if (Array.isArray) {\n        return Array.isArray(array);\n    }\n\n    return array && typeof array.length === \"number\" && array.constructor === Array;\n}\n\n/**\n * Provides functionality to extend the given object by doing a shallow copy\n *\n * @param target The object to which properties will be copied\n * @param source The source object from which properties will be copied\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\n *\n */\nexport function extend(target: any, source: any, noOverwrite = false): any {\n\n    if (!Util.objectDefinedNotNull(source)) {\n        return target;\n    }\n\n    // ensure we don't overwrite things we don't want overwritten\n    const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n    return Object.getOwnPropertyNames(source)\n        .filter((v: string) => check(target, v))\n        .reduce((t: any, v: string) => {\n            t[v] = source[v];\n            return t;\n        }, target);\n}\n\n/**\n * Determines if a given url is absolute\n *\n * @param url The url to check to see if it is absolute\n */\nexport function isUrlAbsolute(url: string): boolean {\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\n}\n\n/**\n * Determines if a string is null or empty or undefined\n *\n * @param s The string to test\n */\nexport function stringIsNullOrEmpty(s: string): boolean {\n    return typeof s === \"undefined\" || s === null || s.length < 1;\n}\n\nexport class Util {\n\n    /**\n     * Gets a callback function which will maintain context across async calls.\n     * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n     *\n     * @param context The object that will be the 'this' value in the callback\n     * @param method The method to which we will apply the context and parameters\n     * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n     */\n    public static getCtxCallback = getCtxCallback;\n\n\n    /**\n     * Adds a value to a date\n     *\n     * @param date The date to which we will add units, done in local time\n     * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n     * @param units The amount to add to date of the given interval\n     *\n     * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n     */\n    public static dateAdd = dateAdd;\n\n    /**\n     * Combines an arbitrary set of paths ensuring and normalizes the slashes\n     *\n     * @param paths 0 to n path parts to combine\n     */\n    public static combinePaths = combinePaths;\n\n    /**\n     * Gets a random string of chars length\n     *\n     * @param chars The length of the random string to generate\n     */\n    public static getRandomString = getRandomString;\n\n    /**\n     * Gets a random GUID value\n     *\n     * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n     */\n    public static getGUID = getGUID;\n\n    /**\n     * Determines if a given value is a function\n     *\n     * @param cf The thing to test for functionness\n     */\n    public static isFunc = isFunc;\n\n    /**\n     * Determines if an object is both defined and not null\n     * @param obj Object to test\n     */\n    public static objectDefinedNotNull = objectDefinedNotNull;\n\n    /**\n     * @returns whether the provided parameter is a JavaScript Array or not.\n    */\n    public static isArray = isArray;\n\n    /**\n     * Provides functionality to extend the given object by doing a shallow copy\n     *\n     * @param target The object to which properties will be copied\n     * @param source The source object from which properties will be copied\n     * @param noOverwrite If true existing properties on the target are not overwritten from the source\n     *\n     */\n    public static extend = extend;\n\n    /**\n     * Determines if a given url is absolute\n     *\n     * @param url The url to check to see if it is absolute\n     */\n    public static isUrlAbsolute = isUrlAbsolute;\n\n    /**\n     * Determines if a string is null or empty or undefined\n     *\n     * @param s The string to test\n     */\n    public static stringIsNullOrEmpty = stringIsNullOrEmpty;\n}\n","import { Util } from \"./util\";\n\ndeclare var global: { fetch(url: string, options: any): Promise<Response> };\n\nexport interface ConfigOptions {\n    headers?: string[][] | { [key: string]: string } | Headers;\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\n}\n\nexport interface FetchOptions extends ConfigOptions {\n    method?: string;\n    body?: any;\n}\n\nexport interface HttpClientImpl {\n    fetch(url: string, options: FetchOptions): Promise<Response>;\n}\n\nexport interface RequestClient {\n    fetch(url: string, options?: FetchOptions): Promise<Response>;\n    fetchRaw(url: string, options?: FetchOptions): Promise<Response>;\n    get(url: string, options?: FetchOptions): Promise<Response>;\n    post(url: string, options?: FetchOptions): Promise<Response>;\n    patch(url: string, options?: FetchOptions): Promise<Response>;\n    delete(url: string, options?: FetchOptions): Promise<Response>;\n}\n\nexport function mergeHeaders(target: Headers, source: any): void {\n    if (typeof source !== \"undefined\" && source !== null) {\n        const temp = <any>new Request(\"\", { headers: source });\n        temp.headers.forEach((value: string, name: string) => {\n            target.append(name, value);\n        });\n    }\n}\n\nexport function mergeOptions(target: ConfigOptions, source: ConfigOptions): void {\n\n    if (Util.objectDefinedNotNull(source)) {\n        const headers = Util.extend(target.headers || {}, source.headers);\n        target = Util.extend(target, source);\n        target.headers = headers;\n    }\n}\n\n/**\n * Makes requests using the global/window fetch API\n */\nexport class FetchClient implements HttpClientImpl {\n    public fetch(url: string, options: FetchOptions): Promise<Response> {\n        return global.fetch(url, options);\n    }\n}\n\n/**\n * Makes requests using the fetch API adding the supplied token to the Authorization header\n */\nexport class BearerTokenFetchClient extends FetchClient {\n\n    constructor(private _token: string) {\n        super();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        mergeHeaders(headers, options.headers);\n\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\n\n        options.headers = headers;\n\n        return super.fetch(url, options);\n    }\n}\n","import { Util } from \"./util\";\nimport { Dictionary } from \"./collections\";\nimport { RuntimeConfig } from \"./libconfig\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements PnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n        this.enabled = this.test();\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            Logger.write(`Enabling cache expiration.`, LogLevel.Info);\n            this.cacheExpirationHandler();\n        }\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (o == null) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n\n            Logger.write(`Removing item with key '${key}' from cache due to expiration.`, LogLevel.Info);\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n        if (!this.enabled) {\n            return getter();\n        }\n\n        return new Promise((resolve) => {\n\n            const o = this.get<T>(key);\n\n            if (o == null) {\n                getter().then((d) => {\n                    this.put(key, d, expire);\n                    resolve(d);\n                });\n            } else {\n                resolve(o);\n            }\n        });\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public deleteExpired(): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            if (!this.enabled) {\n                resolve();\n            }\n\n            try {\n\n                for (let i = 0; i < this.store.length; i++) {\n                    const key = this.store.key(i);\n                    if (key !== null) {\n                        // test the stored item to see if we stored it\n                        if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                            // get those items as get will delete from cache if they are expired\n                            this.get(key);\n                        }\n                    }\n                }\n\n                resolve();\n\n            } catch (e) { reject(e); }\n        });\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"test\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (typeof expire === \"undefined\") {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = Util.dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return JSON.stringify({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        Logger.write(\"Called cache expiration handler.\", LogLevel.Verbose);\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(Util.getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(e => {\n\n            // we've got some error - so just stop the loop and report the error\n            Logger.log({\n                data: e,\n                level: LogLevel.Error,\n                message: \"Error deleting expired cache entries, see data for details. Timeout not reset.\",\n            });\n        });\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface PnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut(key: string, getter: Function, expire?: Date): any;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Dictionary<string>()) { }\n\n    public get length(): number {\n        return this._store.count;\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return this._store.getKeys()[index];\n    }\n\n    public removeItem(key: string): void {\n        this._store.remove(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.add(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: PnPClientStore | null = null, private _session: PnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): PnPClientStore {\n\n        if (this._local === null) {\n            this._local = typeof localStorage !== \"undefined\" ? new PnPClientStorageWrapper(localStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): PnPClientStore {\n\n        if (this._session === null) {\n            this._session = typeof sessionStorage !== \"undefined\" ? new PnPClientStorageWrapper(sessionStorage) : new PnPClientStorageWrapper(new MemoryStorage());\n        }\n\n        return this._session;\n    }\n}\n"],"names":[],"mappings":"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"}