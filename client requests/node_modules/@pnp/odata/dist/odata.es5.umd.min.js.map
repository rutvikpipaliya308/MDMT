{"version":3,"sources":["../../../../packages/odata/src/caching.ts","../../../../packages/odata/src/core.ts","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"names":["CachingOptions","key","this","expiration","Util","dateAdd","Date","RuntimeConfig","defaultCachingTimeoutSeconds","storeName","defaultCachingStore","Object","defineProperty","prototype","storage","local","session","PnPClientStorage","CachingParserWrapper","_parser","_cacheOptions","parse","response","_this","then","data","store","put","ProcessHttpClientResponseException","_super","status","statusText","call","name","Logger","log","level","message","tslib_1.__extends","Error","ODataParserBase","r","Promise","resolve","reject","handleError","text","txt","replace","length","JSON","json","parseODataJSON","catch","e","ok","responseBody","responseHeaders","headers","result","hasOwnProperty","d","results","value","ODataDefaultParser","TextParser","BlobParser","blob","JSONParser","BufferParser","isFunc","arrayBuffer","buffer","setResult","context","hasResult","next","c","pipeline","shift","pipe","write","requestId","getTime","ctx","error","requestPipelineMethod","alwaysRun","target","propertyKey","descriptor","method","args","_i","arguments","apply","PipelineMethods","logStart","activeLogLevel","verb","requestAbsoluteUrl","caching","isCached","cacheOptions","toLowerCase","cachingOptions","extend","get","batchDependency","parser","hydrate","send","isBatched","p","batch","add","options","batchId","client","clientFactory","opts","fetch","logEnd","tslib_1.__decorate","slice","AlreadyInBatchException","msg","ODataQueryable","_batch","_query","Dictionary","_options","_url","_parentUrl","_useCaching","_cachingOptions","concat","pathPart","configure","mergeOptions","usingCaching","globalCacheDisable","inBatch","toUrl","toRequestContext","getDefaultPipeline","postCore","patchCore","deleteCore","addBatchDependency","addDependency","objectDefinedNotNull","hasBatch","append","combinePaths","ODataBatch","_batchId","getGUID","_requests","_dependencies","url","info","toUpperCase","push","resolver","promise","execute","all","executeImpl"],"mappings":"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","sourcesContent":["import { ODataParser } from \"./core\";\nimport { RuntimeConfig, Util, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = Util.dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Represents an exception with an HttpClient request\n *\n */\nexport class ProcessHttpClientResponseException extends Error {\n\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\n        this.name = \"ProcessHttpClientResponseException\";\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                // handle all requests as text, then parse if they are not empty\n                r.text()\n                    .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                    .then(json => resolve(this.parseODataJSON<T>(json)))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            // read the response as text, it may not be valid json\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error without parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n","import { ODataParser, ODataParserBase } from \"./core\";\nimport { Util } from \"@pnp/common\";\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nexport class TextParser implements ODataParser<string> {\n\n    public parse(r: Response): Promise<string> {\n        return r.text();\n    }\n}\n\nexport class BlobParser implements ODataParser<Blob> {\n\n    public parse(r: Response): Promise<Blob> {\n        return r.blob();\n    }\n}\n\nexport class JSONParser implements ODataParser<any> {\n\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport class BufferParser implements ODataParser<ArrayBuffer> {\n\n    public parse(r: any): Promise<ArrayBuffer> {\n\n        if (Util.isFunc(r.arrayBuffer)) {\n            return r.arrayBuffer();\n        }\n\n        return r.buffer();\n    }\n}\n","import { ODataParser } from \"./core\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, FetchOptions, RequestClient } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    if (c.pipeline.length > 0) {\n        return c.pipeline.shift()(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    if (context.pipeline.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Warning);\n    }\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.error(e);\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = Util.extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        context.batchDependency();\n                        // handle the case where a parser needs to take special actions with a cached result (such as getAs)\n                        if (context.parser.hasOwnProperty(\"hydrate\")) {\n                            data = context.parser.hydrate!(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                context.batchDependency();\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = Util.extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import {\n    Util,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport { Logger } from \"@pnp/logging\";\nimport { ODataParser } from \"./core\";\nimport { ODataDefaultParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n} from \"./pipeline\";\n\nexport class AlreadyInBatchException extends Error {\n\n    constructor(msg = \"This query is already part of a batch.\") {\n        super(msg);\n        this.name = \"AlreadyInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    constructor() {\n        this._batch = null;\n        this._query = new Dictionary<string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = any>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return Util.objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = Util.combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n","import { ODataParser } from \"./core\";\nimport { Util, FetchOptions } from \"@pnp/common\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n}\n\nexport abstract class ODataBatch {\n\n    protected _dependencies: Promise<void>[];\n    protected _requests: ODataBatchRequestInfo[];\n\n    constructor(private _batchId = Util.getGUID()) {\n        this._requests = [];\n        this._dependencies = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._requests;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            method: method.toUpperCase(),\n            options: options,\n            parser: parser,\n            reject: null,\n            resolve: null,\n            url: url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._requests.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n        const promise = new Promise<void>((resolve) => {\n            resolver = resolve;\n        });\n\n        this._dependencies.push(promise);\n\n        return resolver;\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n"]}