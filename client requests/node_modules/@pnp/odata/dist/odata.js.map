{"version":3,"file":"odata.js","sources":["../../../../packages/odata/src/caching.ts","../../../../packages/odata/src/core.ts","../../../../packages/odata/src/parsers.ts","../../../../packages/odata/src/pipeline.ts","../../../../packages/odata/src/queryable.ts","../../../../packages/odata/src/odatabatch.ts"],"sourcesContent":["import { ODataParser } from \"./core\";\nimport { RuntimeConfig, Util, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    public expiration = Util.dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\n\n    public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore;\n\n    constructor(public key: string) { }\n\n    public get store(): PnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements ODataParser<T> {\n\n    constructor(\n        private _parser: ODataParser<T>,\n        private _cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n\n        // add this to the cache based on the options\n        return this._parser.parse(response).then(data => {\n\n            if (this._cacheOptions.store !== null) {\n                this._cacheOptions.store.put(this._cacheOptions.key, data, this._cacheOptions.expiration);\n            }\n\n            return data;\n        });\n    }\n}\n","import { Logger, LogLevel } from \"@pnp/logging\";\n\n/**\n * Represents an exception with an HttpClient request\n *\n */\nexport class ProcessHttpClientResponseException extends Error {\n\n    constructor(public readonly status: number, public readonly statusText: string, public readonly data: any) {\n        super(`Error making HttpClient request in queryable: [${status}] ${statusText}`);\n        this.name = \"ProcessHttpClientResponseException\";\n        Logger.log({ data: this.data, level: LogLevel.Error, message: this.message });\n    }\n}\n\nexport interface ODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport abstract class ODataParserBase<T> implements ODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                // handle all requests as text, then parse if they are not empty\n                r.text()\n                    .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                    .then(json => resolve(this.parseODataJSON<T>(json)))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (reason?: any) => void): boolean {\n        if (!r.ok) {\n\n            // read the response as text, it may not be valid json\n            r.json().then(json => {\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: json,\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n\n            }).catch(e => {\n\n                // we failed to read the body - possibly it is empty. Let's report the original status that caused\n                // the request to fail and log the error without parsing the body if anyone needs it for debugging\n                Logger.log({\n                    data: e,\n                    level: LogLevel.Warning,\n                    message: \"There was an error parsing the error response body. See data for details.\",\n                });\n\n                // include the headers as they contain diagnostic information\n                const data = {\n                    responseBody: \"[[body not available]]\",\n                    responseHeaders: r.headers,\n                };\n\n                reject(new ProcessHttpClientResponseException(r.status, r.statusText, data));\n            });\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n        let result = json;\n        if (json.hasOwnProperty(\"d\")) {\n            if (json.d.hasOwnProperty(\"results\")) {\n                result = json.d.results;\n            } else {\n                result = json.d;\n            }\n        } else if (json.hasOwnProperty(\"value\")) {\n            result = json.value;\n        }\n        return result;\n    }\n}\n","import { ODataParser, ODataParserBase } from \"./core\";\nimport { Util } from \"@pnp/common\";\n\nexport class ODataDefaultParser extends ODataParserBase<any> {\n}\n\nexport class TextParser implements ODataParser<string> {\n\n    public parse(r: Response): Promise<string> {\n        return r.text();\n    }\n}\n\nexport class BlobParser implements ODataParser<Blob> {\n\n    public parse(r: Response): Promise<Blob> {\n        return r.blob();\n    }\n}\n\nexport class JSONParser implements ODataParser<any> {\n\n    public parse(r: Response): Promise<any> {\n        return r.json();\n    }\n}\n\nexport class BufferParser implements ODataParser<ArrayBuffer> {\n\n    public parse(r: any): Promise<ArrayBuffer> {\n\n        if (Util.isFunc(r.arrayBuffer)) {\n            return r.arrayBuffer();\n        }\n\n        return r.buffer();\n    }\n}\n","import { ODataParser } from \"./core\";\nimport { ODataBatch } from \"./odatabatch\";\nimport { ICachingOptions, CachingParserWrapper, CachingOptions } from \"./caching\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Util, FetchOptions, RequestClient } from \"@pnp/common\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface RequestContext<T> {\n    batch: ODataBatch;\n    batchDependency: () => void;\n    cachingOptions: ICachingOptions;\n    hasResult?: boolean;\n    isBatched: boolean;\n    isCached: boolean;\n    options: FetchOptions;\n    parser: ODataParser<T>;\n    pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>;\n    requestAbsoluteUrl: string;\n    requestId: string;\n    result?: T;\n    verb: string;\n    clientFactory: () => RequestClient;\n}\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T>(context: RequestContext<T>): Promise<T | null> {\n\n    Logger.log({\n        data: context.result,\n        level: LogLevel.Verbose,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result, see data property for value.`,\n    });\n\n    return Promise.resolve(context.result || null);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T>(context: RequestContext<T>, value: any): Promise<RequestContext<T>> {\n\n    return new Promise<RequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T>(c: RequestContext<T>): Promise<RequestContext<T>> {\n\n    if (c.pipeline.length > 0) {\n        return c.pipeline.shift()(c);\n    } else {\n        return Promise.resolve(c);\n    }\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T>(context: RequestContext<T>): Promise<T | null> {\n\n    if (context.pipeline.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Warning);\n    }\n\n    return next(context)\n        .then(ctx => returnResult(ctx))\n        .catch((e: Error) => {\n            Logger.error(e);\n            throw e;\n        });\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && args[0].hasOwnProperty(\"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: RequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.verb === \"GET\" && context.isCached) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\n                if (typeof context.cachingOptions !== \"undefined\") {\n                    cacheOptions = Util.extend(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n                    if (data !== null) {\n                        // ensure we clear any help batch dependency we are resolving from the cache\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n                        context.batchDependency();\n                        // handle the case where a parser needs to take special actions with a cached result (such as getAs)\n                        if (context.parser.hasOwnProperty(\"hydrate\")) {\n                            data = context.parser.hydrate!(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                context.batchDependency();\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = Util.extend(context.options || {}, { method: context.verb });\n                client.fetch(context.requestAbsoluteUrl, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T>(context: RequestContext<T>): Promise<RequestContext<T>> {\n\n        return new Promise<RequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import {\n    Util,\n    Dictionary,\n    RuntimeConfig,\n    FetchOptions,\n    ConfigOptions,\n    mergeOptions,\n} from \"@pnp/common\";\nimport { Logger } from \"@pnp/logging\";\nimport { ODataParser } from \"./core\";\nimport { ODataDefaultParser } from \"./parsers\";\nimport { ICachingOptions } from \"./caching\";\nimport { ODataBatch } from \"./odatabatch\";\nimport {\n    RequestContext,\n    getDefaultPipeline,\n    pipe,\n} from \"./pipeline\";\n\nexport class AlreadyInBatchException extends Error {\n\n    constructor(msg = \"This query is already part of a batch.\") {\n        super(msg);\n        this.name = \"AlreadyInBatchException\";\n        Logger.error(this);\n    }\n}\n\nexport abstract class ODataQueryable<BatchType extends ODataBatch> {\n\n    /**\n     * Tracks the batch of which this query may be part\n     */\n    protected _batch: BatchType | null;\n\n    /**\n     * Additional options to be set before sending actual http request\n     */\n    protected _options: ConfigOptions;\n\n    /**\n     * Tracks the query parts of the url\n     */\n    protected _query: Dictionary<string>;\n\n    /**\n     * Tracks the url as it is built\n     */\n    protected _url: string;\n\n    /**\n     * Stores the parent url used to create this instance, for recursing back up the tree if needed\n     */\n    protected _parentUrl: string;\n\n    /**\n     * Explicitly tracks if we are using caching for this request\n     */\n    protected _useCaching: boolean;\n\n    /**\n     * Any options that were supplied when caching was enabled\n     */\n    protected _cachingOptions: ICachingOptions | null;\n\n    constructor() {\n        this._batch = null;\n        this._query = new Dictionary<string>();\n        this._options = {};\n        this._url = \"\";\n        this._parentUrl = \"\";\n        this._useCaching = false;\n        this._cachingOptions = null;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this._url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Dictionary<string> {\n        return this._query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: ConfigOptions): this {\n        mergeOptions(this._options, options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this._useCaching = true;\n            if (typeof options !== \"undefined\") {\n                this._cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: BatchType): this {\n\n        if (this.batch !== null) {\n            throw new AlreadyInBatchException();\n        }\n\n        this._batch = batch;\n\n        return this;\n    }\n\n    /**\n     * Gets the currentl url\n     *\n     */\n    public toUrl(): string {\n        return this._url;\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = any>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.toRequestContext(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected postCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected patchCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    protected deleteCore<T = any>(options: FetchOptions = {}, parser: ODataParser<T> = new ODataDefaultParser()): Promise<T> {\n        return this.toRequestContext(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    protected addBatchDependency(): () => void {\n        if (this._batch !== null) {\n            return this._batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return Util.objectDefinedNotNull(this._batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): BatchType | null {\n        return this.hasBatch ? this._batch : null;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    protected append(pathPart: string) {\n        this._url = Util.combinePaths(this._url, pathPart);\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this._parentUrl;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected abstract toRequestContext<T>(\n        verb: string,\n        options: FetchOptions,\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>>;\n}\n","import { ODataParser } from \"./core\";\nimport { Util, FetchOptions } from \"@pnp/common\";\n\nexport interface ODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: FetchOptions;\n    parser: ODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n}\n\nexport abstract class ODataBatch {\n\n    protected _dependencies: Promise<void>[];\n    protected _requests: ODataBatchRequestInfo[];\n\n    constructor(private _batchId = Util.getGUID()) {\n        this._requests = [];\n        this._dependencies = [];\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): ODataBatchRequestInfo[] {\n        return this._requests;\n    }\n\n    /**\n     * \n     * @param url Request url\n     * @param method Request method (GET, POST, etc)\n     * @param options Any request options\n     * @param parser The parser used to handle the eventual return from the query\n     */\n    public add<T>(url: string, method: string, options: FetchOptions, parser: ODataParser<T>): Promise<T> {\n\n        const info: ODataBatchRequestInfo = {\n            method: method.toUpperCase(),\n            options: options,\n            parser: parser,\n            reject: null,\n            resolve: null,\n            url: url,\n        };\n\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._requests.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n        const promise = new Promise<void>((resolve) => {\n            resolver = resolve;\n        });\n\n        this._dependencies.push(promise);\n\n        return resolver;\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._dependencies).then(() => Promise.all(this._dependencies)).then(() => this.executeImpl());\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n"],"names":["tslib_1.__decorate"],"mappings":"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"}