{"version":3,"file":"Context.js","sourceRoot":"../src/","sources":["Context.tsx"],"names":[],"mappings":";;;IAIA,wBACE,YAA+C,EAC/C,iBAA8C;QAE9C;YAAuB,oCAAuB;YAA9C;;YAUA,CAAC;YAPQ,kCAAe,GAAtB;gBACE,OAAO,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YAEM,yBAAM,GAAb;gBACE,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAClD,CAAC;YARsB,0BAAiB,GAAsC,YAAY,CAAC;YAS7F,eAAC;SAAA,AAVD,CAAuB,KAAK,CAAC,SAAS,GAUrC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAjBD,wCAiBC","sourcesContent":["\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nexport function provideContext<TContext, TProps>(\n  contextTypes: PropTypes.ValidationMap<TContext>,\n  mapPropsToContext: (props: TProps) => TContext\n): React.ComponentType<TProps> {\n  class Provider extends React.Component<TProps> {\n    public static readonly childContextTypes: PropTypes.ValidationMap<TContext> = contextTypes;\n\n    public getChildContext(): TContext {\n      return mapPropsToContext(this.props);\n    }\n\n    public render(): JSX.Element | null {\n      return React.Children.only(this.props.children);\n    }\n  }\n\n  return Provider;\n}\n"]}