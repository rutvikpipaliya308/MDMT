{"version":3,"file":"hoist.js","sourceRoot":"../src/","sources":["hoist.ts"],"names":[],"mappings":";;;IAAA,IAAM,0BAA0B,GAAG;QACjC,UAAU;QACV,QAAQ;QACR,oBAAoB;QACpB,mBAAmB;QACnB,2BAA2B;QAC3B,uBAAuB;QACvB,qBAAqB;QACrB,oBAAoB;QACpB,sBAAsB;KACvB,CAAC;IAEF;;;;;;;;OAQG;IACH,kCAAkC;IAClC,sBAA6B,WAAgB,EAAE,MAAW,EAAE,UAAiD;QAAjD,2BAAA,EAAA,uCAAiD;QAC3G,IAAI,OAAO,GAAa,EAAE,CAAC;gCAClB,UAAU;YACjB,IACE,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,UAAU;gBACxC,WAAW,CAAC,UAAU,CAAC,KAAK,SAAS;gBACrC,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EACtD;gBACA,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,2CAA2C;gBAC3C,WAAW,CAAC,UAAU,CAAC,GAAG,cAAoB,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7F,mBAAmB;aACpB;QACH,CAAC;QAXD,KAAK,IAAI,UAAU,IAAI,MAAM;oBAApB,UAAU;SAWlB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAhBD,oCAgBC;IAED;;;;;;OAMG;IACH,kCAAkC;IAClC,wBAA+B,MAAW,EAAE,WAAqB;QAC/D,WAAW;aACR,OAAO,CAAC,UAAC,UAAkB,IAAK,OAAA,OAAO,MAAM,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC,CAAC;IAChE,CAAC;IAHD,wCAGC","sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\n  'setState',\n  'render',\n  'componentWillMount',\n  'componentDidMount',\n  'componentWillReceiveProps',\n  'shouldComponentUpdate',\n  'componentWillUpdate',\n  'componentDidUpdate',\n  'componentWillUnmount'\n];\n\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\n// tslint:disable-next-line:no-any\nexport function hoistMethods(destination: any, source: any, exclusions: string[] = REACT_LIFECYCLE_EXCLUSIONS): string[] {\n  let hoisted: string[] = [];\n  for (let methodName in source) {\n    if (\n      typeof source[methodName] === 'function' &&\n      destination[methodName] === undefined &&\n      (!exclusions || exclusions.indexOf(methodName) === -1)\n    ) {\n      hoisted.push(methodName);\n      /* tslint:disable:no-function-expression */\n      destination[methodName] = function (): void { source[methodName].apply(source, arguments); };\n      /* tslint:enable */\n    }\n  }\n\n  return hoisted;\n}\n\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// tslint:disable-next-line:no-any\nexport function unhoistMethods(source: any, methodNames: string[]): void {\n  methodNames\n    .forEach((methodName: string) => delete source[methodName]);\n}\n"]}