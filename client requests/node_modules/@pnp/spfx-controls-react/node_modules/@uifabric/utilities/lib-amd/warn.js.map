{"version":3,"file":"warn.js","sourceRoot":"../src/","sources":["warn.ts"],"names":[],"mappings":";;;IAAA,IAAI,gBAAgB,GAA4C,SAAS,CAAC;IAM1E;;;;;;;;OAQG;IACH,0BACE,aAAqB,EACrB,KAAQ,EACR,cAA+B;QAE/B,KAAK,IAAM,QAAQ,IAAI,cAAc,EAAE;YACrC,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE;gBAC9B,IAAI,kBAAkB,GAAM,aAAa,mBAAc,QAAQ,wCAAqC,CAAC;gBACrG,IAAM,mBAAmB,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAErD,IAAI,mBAAmB,EAAE;oBACvB,kBAAkB,IAAI,WAAS,mBAAmB,eAAY,CAAC;iBAChE;gBACD,IAAI,CAAC,kBAAkB,CAAC,CAAC;aAC1B;SACF;IACH,CAAC;IAhBD,4CAgBC;IAED;;;;;;;OAOG;IACH,+BACE,aAAqB,EACrB,KAAQ,EACR,YAA6B;QAE7B,KAAK,IAAM,QAAQ,IAAI,YAAY,EAAE;YACnC,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE;gBAC9B,IAAI,uBAAuB,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACrD,IAAI,uBAAuB,IAAI,uBAAuB,IAAI,KAAK,EAAE;oBAC/D,IAAI,CACC,aAAa,mBAAc,QAAQ,sCAAiC,YAAY,CAAC,QAAQ,CAAC,6BAA0B,CACxH,CAAC;iBACH;aACF;SACF;IACH,CAAC;IAfD,sDAeC;IAED;;;;;;;;;MASE;IACF,wCACE,aAAqB,EACrB,KAAQ,EACR,aAAuB,EACvB,mBAA2B,EAC3B,SAAkB;QAElB,IAAI,SAAS,KAAK,IAAI,EAAE;YACtB,KAA+B,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;gBAAvC,IAAM,gBAAgB,sBAAA;gBACzB,IAAI,CAAC,CAAC,gBAAgB,IAAI,KAAK,CAAC,EAAE;oBAChC,IAAI,CACC,aAAa,mBAAc,gBAAgB,4BAAuB,mBAAmB,gBAAa,CACtG,CAAC;iBACH;aACF;SACF;IACH,CAAC;IAhBD,wEAgBC;IAED;;;;;OAKG;IACH,cAAqB,OAAe;QAClC,IAAI,gBAAgB,EAAE;YACpB,gBAAgB,CAAC,OAAO,CAAC,CAAC;SAC3B;aAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvB;IACH,CAAC;IAND,oBAMC;IAED;;;;;;OAMG;IACH,4BAAmC,eAA2C;QAC5E,gBAAgB,GAAG,eAAe,CAAC;IACrC,CAAC;IAFD,gDAEC","sourcesContent":["let _warningCallback: ((message: string) => void) | undefined = undefined;\n\nexport type ISettingsMap<T> = {\n  [P in keyof T]?: string;\n};\n\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nexport function warnDeprecations<P>(\n  componentName: string,\n  props: P,\n  deprecationMap: ISettingsMap<P>): void {\n\n  for (const propName in deprecationMap) {\n    if (props && propName in props) {\n      let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\n      const replacementPropName = deprecationMap[propName];\n\n      if (replacementPropName) {\n        deprecationMessage += ` Use '${replacementPropName}' instead.`;\n      }\n      warn(deprecationMessage);\n    }\n  }\n}\n\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive<P>(\n  componentName: string,\n  props: P,\n  exclusiveMap: ISettingsMap<P>): void {\n\n  for (const propName in exclusiveMap) {\n    if (props && propName in props) {\n      let propInExclusiveMapValue = exclusiveMap[propName];\n      if (propInExclusiveMapValue && propInExclusiveMapValue in props) {\n        warn(\n          `${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. Use one or the other.`\n        );\n      }\n    }\n  }\n}\n\n/**\n * Warns when props are required if a condition is met.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param requiredProps - The name of the props that are required when the condition is met.\n * @param conditionalPropName - The name of the prop that the condition is based on.\n * @param condition - Whether the condition is met.\n*/\nexport function warnConditionallyRequiredProps<P>(\n  componentName: string,\n  props: P,\n  requiredProps: string[],\n  conditionalPropName: string,\n  condition: boolean): void {\n\n  if (condition === true) {\n    for (const requiredPropName of requiredProps) {\n      if (!(requiredPropName in props)) {\n        warn(\n          `${componentName} property '${requiredPropName}' is required when '${conditionalPropName}' is used.'`\n        );\n      }\n    }\n  }\n}\n\n/**\n * Sends a warning to console, if the api is present.\n *\n * @public\n * @param message - Warning message.\n */\nexport function warn(message: string): void {\n  if (_warningCallback) {\n    _warningCallback(message);\n  } else if (console && console.warn) {\n    console.warn(message);\n  }\n}\n\n/**\n * Configures the warning callback. Passing in undefined will reset it to use the default\n * console.warn function.\n *\n * @public\n * @param warningCallback - Callback to override the generated warnings.\n */\nexport function setWarningCallback(warningCallback?: (message: string) => void): void {\n  _warningCallback = warningCallback;\n}\n"]}