{"version":3,"file":"Context.js","sourceRoot":"../src/","sources":["Context.tsx"],"names":[],"mappings":";;;AACA,6BAA+B;AAG/B,wBACE,YAA+C,EAC/C,iBAA8C;IAE9C;QAAuB,oCAAuB;QAA9C;;QAUA,CAAC;QAPQ,kCAAe,GAAtB;YACE,OAAO,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QAEM,yBAAM,GAAb;YACE,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QARsB,0BAAiB,GAAsC,YAAY,CAAC;QAS7F,eAAC;KAAA,AAVD,CAAuB,KAAK,CAAC,SAAS,GAUrC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAjBD,wCAiBC","sourcesContent":["\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nexport function provideContext<TContext, TProps>(\n  contextTypes: PropTypes.ValidationMap<TContext>,\n  mapPropsToContext: (props: TProps) => TContext\n): React.ComponentType<TProps> {\n  class Provider extends React.Component<TProps> {\n    public static readonly childContextTypes: PropTypes.ValidationMap<TContext> = contextTypes;\n\n    public getChildContext(): TContext {\n      return mapPropsToContext(this.props);\n    }\n\n    public render(): JSX.Element | null {\n      return React.Children.only(this.props.children);\n    }\n  }\n\n  return Provider;\n}\n"]}