{"version":3,"file":"customizable.js","sourceRoot":"../src/","sources":["customizable.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AACxC,OAAO,EACL,cAAc,GACf,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,YAAY,EACb,MAAM,gBAAgB,CAAC;AAExB,MAAM,uBACJ,KAAa,EACb,MAAgB;AAChB,kCAAkC;;IAGlC,gDAAgD;IAChD,OAAO;IACL,kCAAkC;IAClC,iBAA4E;IAC5E,kCAAkC;;QAElC,IAAM,WAAW;gBAA4C,sDAAsB;gBASjF,kCAAkC;gBAClC,oCAAY,KAAQ,EAAE,OAAY;oBAAlC,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAGtB;oBADC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;gBAC7D,CAAC;gBAEM,sDAAiB,GAAxB;oBACE,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACjD,CAAC;gBAEM,yDAAoB,GAA3B;oBACE,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACnD,CAAC;gBAEM,2CAAM,GAAb;oBACE,IAAM,YAAY,GAAG,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;oBAE5F,OAAO;oBACL,kCAAkC;oBAClC,oBAAC,iBAAiB,uBAAM,YAAY,EAAQ,IAAI,CAAC,KAAY,EAAK,CACnE,CAAC;gBACJ,CAAC;gBAEO,sDAAiB,GAAzB;oBACE,IAAI,CAAC,WAAW,EAAE,CAAC;gBACrB,CAAC;gBAEH,iCAAC;YAAD,CAAC,AArCmB,CAAyC,KAAK,CAAC,SAAS;YAC5D,cAAW,GAAW,YAAY,GAAG,KAAM;YAE3C,eAAY,GAEtB;gBACA,cAAc,EAAE,SAAS,CAAC,MAAM;aAChC;eA8BL,CAAC;QAEF,OAAO,YAAY,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;;IACtD,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Customizations,\n} from './Customizations';\nimport {\n  hoistStatics\n} from './hoistStatics';\n\nexport function customizable(\n  scope: string,\n  fields: string[]\n  // tslint:disable-next-line:no-any\n): <P, S>(ComposedComponent: new (props: P, ...args: any[]) => React.Component<P, S>) => any {\n\n  // tslint:disable-next-line:no-shadowed-variable\n  return function customizableFactory<P, S>(\n    // tslint:disable-next-line:no-any\n    ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)\n    // tslint:disable-next-line:no-any\n  ): any {\n    const resultClass = class ComponentWithInjectedProps extends React.Component<P, {}> {\n      public static displayName: string = 'Customized' + scope;\n\n      public static contextTypes: {\n        customizations: PropTypes.Requireable<{}>;\n      } = {\n          customizations: PropTypes.object\n        };\n\n      // tslint:disable-next-line:no-any\n      constructor(props: P, context: any) {\n        super(props, context);\n\n        this._onSettingChanged = this._onSettingChanged.bind(this);\n      }\n\n      public componentDidMount(): void {\n        Customizations.observe(this._onSettingChanged);\n      }\n\n      public componentWillUnmount(): void {\n        Customizations.unobserve(this._onSettingChanged);\n      }\n\n      public render(): JSX.Element {\n        const defaultProps = Customizations.getSettings(fields, scope, this.context.customizations);\n\n        return (\n          // tslint:disable-next-line:no-any\n          <ComposedComponent { ...defaultProps } { ...this.props as any } />\n        );\n      }\n\n      private _onSettingChanged(): void {\n        this.forceUpdate();\n      }\n\n    };\n\n    return hoistStatics(ComposedComponent, resultClass);\n  };\n}\n"]}