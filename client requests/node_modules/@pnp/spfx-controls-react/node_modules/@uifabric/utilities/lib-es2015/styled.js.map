{"version":3,"file":"styled.js","sourceRoot":"../src/","sources":["styled.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAmBnE;;;;;;;;;;;;;GAaG;AACH,MAAM,iBACJ,SAA4F,EAC5F,aAA8C,EAC9C,QAA+D;IAG/D,IAAM,OAAO,GAAG,CAAC,UAAC,cAAuE;QACvF,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;QAErC,IAAM,iBAAiB,GACrB,MAAM,IAAI,CAAC,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC;YAChE,cAAc,CAAC,SAAS,CAAC;QAE3B,IAAM,SAAS,GAAG,UAChB,UAAuB,IACpB,OAAA,eAAe,CAClB,aAAa,IAAI,aAAa,CAAC,UAAU,CAAC,EAC1C,cAAc,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,UAAU,CAAC,CACrE,EAHI,CAGJ,CAAC;QACF,IAAM,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEjE,OAAO,CACL,oBAAC,SAAS,uBACH,eAAe,EACf,cAAc,IACnB,SAAS,EAAG,SAAS,IACrB,CACH,CAAC;IACJ,CAAC,CAAuC,CAAC;IAEzC,OAAO,CAAC,WAAW,GAAG,YAAS,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,IAAI,CAAE,CAAC;IACzE,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import * as React from 'react';\nimport { concatStyleSets } from '@uifabric/merge-styles/lib/index';\nimport { IStyleFunction } from './IStyleFunction';\n\nexport interface IPropsWithStyles<TStyleProps, TStyles> {\n  getStyles?: IStyleFunction<TStyleProps, TStyles>;\n  subComponents?: {\n    [key: string]: IStyleFunction<{}, {}>;\n  };\n}\n\ninterface IMaybeNewStyles<TStyleProps, TStyles> {\n  styles?: IStyleFunction<TStyleProps, TStyles> | TStyles;\n}\n\ninterface IWrappedComponent<P> {\n  (props: P): JSX.Element;\n  displayName: string;\n}\n\n/**\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\n * getStyles functional props, and mix customized props passed in using concatStyleSets. Example:\n *\n * ```tsx\n * export const Toggle = styled(\n *   ToggleBase,\n *   {\n *     getStyles: props => ({ root: { background: 'red' }})\n *   }\n * );\n * ```\n *\n */\nexport function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyles>, TStyleProps, TStyles>(\n  Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>,\n  getBaseStyles: (props: TStyleProps) => TStyles,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>\n): (props: TComponentProps) => JSX.Element {\n\n  const Wrapped = ((componentProps: TComponentProps & IMaybeNewStyles<TStyleProps, TStyles>) => {\n    const styles = componentProps.styles;\n\n    const originalGetStyles =\n      styles && (typeof styles === 'function' ? styles : () => styles) ||\n      componentProps.getStyles;\n\n    const getStyles = (\n      styleProps: TStyleProps\n    ) => concatStyleSets(\n      getBaseStyles && getBaseStyles(styleProps),\n      componentProps && originalGetStyles && originalGetStyles(styleProps)\n    );\n    const additionalProps = getProps ? getProps(componentProps) : {};\n\n    return (\n      <Component\n        { ...additionalProps }\n        { ...componentProps }\n        getStyles={ getStyles }\n      />\n    );\n  }) as IWrappedComponent<TComponentProps>;\n\n  Wrapped.displayName = `Styled${Component.displayName || Component.name}`;\n  return Wrapped;\n}\n"]}