{"version":3,"file":"dom.js","sourceRoot":"../src/","sources":["dom.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRectangle } from './IRectangle';\n\n/**\n * Attached interface for elements which support virtual references.\n * Used internally by the virtual hierarchy methods.\n */\ninterface IVirtualElement extends HTMLElement {\n  _virtual: {\n    parent?: IVirtualElement;\n    children: IVirtualElement[];\n  };\n}\n\n/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n *\n * @public\n */\nexport function setVirtualParent(child: HTMLElement, parent: HTMLElement): void {\n  let virtualChild = <IVirtualElement>child;\n  let virtualParent = <IVirtualElement>parent;\n\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: []\n    };\n  }\n\n  let oldParent = virtualChild._virtual.parent;\n\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    let index = oldParent._virtual.children.indexOf(virtualChild);\n\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n\n  virtualChild._virtual.parent = virtualParent || undefined;\n\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: []\n      };\n    }\n\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}\n\n/**\n * Gets the virtual parent given the child element, if it exists.\n *\n * @public\n */\nexport function getVirtualParent(child: HTMLElement): HTMLElement | undefined {\n  let parent: HTMLElement | undefined;\n\n  if (child && isVirtualElement(child)) {\n    parent = child._virtual.parent;\n  }\n\n  return parent;\n}\n\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement | null {\n  return child && (\n    allowVirtualParents && getVirtualParent(child) ||\n    child.parentNode && child.parentNode as HTMLElement\n  );\n}\n\n/**\n * Gets the elements which are child elements of the given element.\n * If `allowVirtualChildren` is `true`, this method enumerates virtual child elements\n * after the original children.\n * @param parent\n * @param allowVirtualChildren\n */\nexport function getChildren(parent: HTMLElement, allowVirtualChildren: boolean = true): HTMLElement[] {\n  const children: HTMLElement[] = [];\n\n  if (parent) {\n    for (let i = 0; i < parent.children.length; i++) {\n      children.push(parent.children.item(i) as HTMLElement);\n    }\n\n    if (allowVirtualChildren && isVirtualElement(parent)) {\n      children.push(...parent._virtual.children);\n    }\n  }\n\n  return children;\n}\n\n/**\n * Determines whether or not a parent element contains a given child element.\n * If `allowVirtualParents` is true, this method may return `true` if the child\n * has the parent in its virtual element hierarchy.\n *\n * @public\n */\nexport function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents: boolean = true): boolean {\n  let isContained = false;\n\n  if (parent && child) {\n    if (allowVirtualParents) {\n      isContained = false;\n\n      while (child) {\n        let nextParent: HTMLElement | null = getParent(child);\n\n        if (nextParent === parent) {\n          isContained = true;\n          break;\n        }\n\n        child = nextParent;\n      }\n    } else if (parent.contains) {\n      isContained = parent.contains(child);\n    }\n  }\n\n  return isContained;\n}\n\nlet _isSSR = false;\n\n/**\n * Helper to set ssr mode to simulate no window object returned from getWindow helper.\n *\n * @public\n */\nexport function setSSR(isEnabled: boolean): void {\n  _isSSR = isEnabled;\n}\n\n/**\n * Helper to get the window object.\n *\n * @public\n */\nexport function getWindow(rootElement?: Element | null): Window | undefined {\n  if (_isSSR || typeof window === 'undefined') {\n    return undefined;\n  } else {\n    return (\n      rootElement &&\n        rootElement.ownerDocument &&\n        rootElement.ownerDocument.defaultView ?\n        rootElement.ownerDocument.defaultView :\n        window\n    );\n  }\n}\n\n/**\n * Helper to get the document object.\n *\n * @public\n */\nexport function getDocument(rootElement?: HTMLElement | null): Document | undefined {\n  if (_isSSR || typeof document === 'undefined') {\n    return undefined;\n  } else {\n    return rootElement && rootElement.ownerDocument ? rootElement.ownerDocument : document;\n  }\n}\n\n/**\n * Helper to get bounding client rect, works with window.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight\n      };\n    } else if ((element as HTMLElement).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n\n  return rect;\n}\n\n/**\n * Finds the first parent element where the matchFunction returns true\n * @param element element to start searching at\n * @param matchFunction the function that determines if the element is a match\n * @returns the matched element or null no match was found\n */\nexport function findElementRecursive(element: HTMLElement | null, matchFunction: (element: HTMLElement) => boolean): HTMLElement | null {\n  if (!element || element === document.body) {\n    return null;\n  }\n\n  return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}\n\n/**\n * Determines if an element, or any of its ancestors, contian the given attribute\n * @param element - element to start searching at\n * @param attribute - the attribute to search for\n * @returns the value of the first instance found\n */\nexport function elementContainsAttribute(element: HTMLElement, attribute: string): string | null {\n  let elementMatch = findElementRecursive(element, (testElement: HTMLElement) => testElement.hasAttribute(attribute));\n  return elementMatch && elementMatch.getAttribute(attribute);\n}\n\n/**\n * Determines whether or not an element has the virtual hierarchy extension.\n *\n * @public\n */\nfunction isVirtualElement(element: HTMLElement | IVirtualElement): element is IVirtualElement {\n  return element && !!(<IVirtualElement>element)._virtual;\n}\n"]}