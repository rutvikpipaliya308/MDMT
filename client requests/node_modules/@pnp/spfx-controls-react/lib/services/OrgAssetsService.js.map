{"version":3,"sources":["services/OrgAssetsService.ts"],"names":[],"mappings":"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","file":"services/OrgAssetsService.js","sourcesContent":["import { FileBrowserService } from \"./FileBrowserService\";\nimport { WebPartContext } from \"@microsoft/sp-webpart-base\";\nimport { SPHttpClient } from \"@microsoft/sp-http\";\nimport { ILibrary, FilesQueryResult } from \"./FileBrowserService.types\";\nimport { ExtensionContext } from \"@microsoft/sp-extension-base\";\n\nexport class OrgAssetsService extends FileBrowserService {\n  private _orgAssetsLibraryServerRelativeSiteUrl: string = null;\n\n  constructor(context: ExtensionContext | WebPartContext, itemsToDownloadCount?: number) {\n    super(context, itemsToDownloadCount);\n  }\n\n  public getListItems = async (libraryName: string, folderPath: string, acceptedFilesExtensions?: string[], nextPageQueryStringParams?: string): Promise<FilesQueryResult> => {\n    let filesQueryResult: FilesQueryResult = { items: [], nextHref: null };\n    try {\n      // Retrieve Lib path from folder path\n      if (folderPath.charAt(0) !== \"/\") {\n        folderPath = `/${folderPath}`;\n      }\n      // Remove all the rest of the folder path\n      let libName = folderPath.replace(`${this._orgAssetsLibraryServerRelativeSiteUrl}/`, \"\");\n      libName = libName.split(\"/\")[0];\n      // Buil absolute library URL\n      const libFullUrl = this.buildAbsoluteUrl(`${this._orgAssetsLibraryServerRelativeSiteUrl}/${libName}`);\n\n      let queryStringParams: string = \"\";\n      // Do not pass FolderServerRelativeUrl as query parameter\n      // Attach passed nextPageQueryStringParams values to REST URL\n      if (nextPageQueryStringParams) {\n        // Remove start ? from the query params\n        if (nextPageQueryStringParams.charAt(0) === \"?\") {\n          nextPageQueryStringParams = nextPageQueryStringParams.substring(1);\n        }\n        queryStringParams = nextPageQueryStringParams;\n      } else {\n        queryStringParams = `RootFolder=${folderPath}`;\n      }\n      const restApi = `${this.context.pageContext.web.absoluteUrl}/_api/SP.List.GetListDataAsStream?listFullUrl='${libFullUrl}'&${queryStringParams}`;\n\n      filesQueryResult = await this._getListDataAsStream(restApi, null, acceptedFilesExtensions);\n    } catch (error) {\n      filesQueryResult.items = null;\n      console.error(error.message);\n    }\n    return filesQueryResult;\n  }\n\n  public getSiteMediaLibraries = async (includePageLibraries: boolean = false): Promise<ILibrary[]> => {\n    try {\n      const restApi = `${this.context.pageContext.web.absoluteUrl}/_api/Microsoft.Online.SharePoint.TenantManagement.Office365Tenant/GetOrgAssets`;\n      const orgAssetsResult = await this.context.spHttpClient.get(restApi, SPHttpClient.configurations.v1);\n\n      if (!orgAssetsResult || !orgAssetsResult.ok) {\n        throw new Error(`Something went wrong when executing request. Status='${orgAssetsResult.status}'`);\n      }\n      const orgAssetsData = await orgAssetsResult.json();\n      if (!orgAssetsData || !orgAssetsData.OrgAssetsLibraries || !orgAssetsData.OrgAssetsLibraries.Items || orgAssetsData.OrgAssetsLibraries.Items.length <= 0) {\n        return null;\n      }\n\n      this._orgAssetsLibraryServerRelativeSiteUrl = orgAssetsData ? orgAssetsData.Url.DecodedUrl : null;\n      const libs: ILibrary[] = orgAssetsData ? orgAssetsData.OrgAssetsLibraries.Items.map((libItem) => { return this._parseOrgAssetsLibraryItem(libItem); }) : [];\n      return libs;\n    } catch (error) {\n      console.error(`[OrgAssetsService.getOrganisationAssetsLibraries]: Err='${error.message}'`);\n      return null;\n    }\n  }\n\n  private _parseOrgAssetsLibraryItem = (libItem: any) => {\n    const orgAssetsLibrary: ILibrary = {\n      absoluteUrl: this.buildAbsoluteUrl(libItem.LibraryUrl.DecodedUrl),\n      title: libItem.DisplayName,\n      serverRelativeUrl: libItem.LibraryUrl.DecodedUrl,\n      iconPath: libItem.ThumbnailUrl && libItem.ThumbnailUrl.DecodedUrl ? this.buildAbsoluteUrl(`${this._orgAssetsLibraryServerRelativeSiteUrl}/${libItem.ThumbnailUrl.DecodedUrl}`) : null\n    };\n\n    return orgAssetsLibrary;\n  }\n}\n"],"sourceRoot":"../../src"}