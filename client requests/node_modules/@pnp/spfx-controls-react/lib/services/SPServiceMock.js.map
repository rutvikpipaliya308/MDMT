{"version":3,"sources":["services/SPServiceMock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;IAIE,uBAAY,YAAsB,EAAE,YAAqB;QACvD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,YAAY,IAAI,GAAG,CAAC;IAC3C,CAAC;IAYM,+BAAO,GAAd,UAAe,OAAsB;QAArC,iBAOC;QANC,MAAM,CAAC,IAAI,OAAO,CAAW,UAAM,OAAO;;;;6BACpC,CAAA,IAAI,CAAC,aAAa,KAAK,IAAI,CAAA,EAA3B,wBAA2B;wBAC7B,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAAA;;wBAApC,SAAoC,CAAC,CAAC,wBAAwB;;;wBAEhE,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;;;;aAC/B,CAAC,CAAC;IACL,CAAC;IACD;;;MAGE;IACM,6BAAK,GAAb,UAAc,EAAU;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,EAAvB,CAAuB,CAAC,CAAC;IACzD,CAAC;IAxBD;;MAEE;IACa,oBAAM,GAAa;QAChC,KAAK,EAAE;YACL,EAAE,EAAE,EAAE,sCAAsC,EAAE,KAAK,EAAE,eAAe,EAAE,YAAY,EAAE,KAAK,EAAE;YAC3F,EAAE,EAAE,EAAE,sCAAsC,EAAE,KAAK,EAAE,eAAe,EAAE,YAAY,EAAE,KAAK,EAAE;YAC3F,EAAE,EAAE,EAAE,sCAAsC,EAAE,KAAK,EAAE,iBAAiB,EAAE,YAAY,EAAE,KAAK,EAAE;SAC9F;KACF,CAAC;IAgBJ,oBAAC;CAlCD,AAkCC,IAAA;kBAlCoB,aAAa","file":"services/SPServiceMock.js","sourcesContent":["import { ISPService, ILibsOptions } from \"./ISPService\";\nimport { ISPLists } from \"../common/SPEntities\";\n\nexport default class SPServiceMock implements ISPService {\n  private _includeDelay?: boolean;\n  private _delayTimeout?: number;\n\n  constructor(includeDelay?: boolean, delayTimeout?: number) {\n    this._includeDelay = includeDelay;\n    this._delayTimeout = delayTimeout || 500;\n  }\n\n  /**\n  * The mock lists to present to the local workbench\n  */\n  private static _lists: ISPLists = {\n    value: [\n      { Id: '8dc80f2e-0e01-43ee-b59e-fbbca2d1f35e', Title: 'Mock List One', BaseTemplate: '109' },\n      { Id: '772a30d4-2d62-42da-aa48-c2a37971d693', Title: 'Mock List Two', BaseTemplate: '109' },\n      { Id: '16c0d1c6-b467-4823-a37b-c308cf730366', Title: 'Mock List Three', BaseTemplate: '109' }\n    ]\n  };\n  public getLibs(options?: ILibsOptions): Promise<ISPLists> {\n    return new Promise<ISPLists>(async resolve => {\n      if (this._includeDelay === true) {\n        await this.sleep(this._delayTimeout); // Simulate network load\n      }\n      resolve(SPServiceMock._lists);\n    });\n  }\n  /**\n  * Locks the thread for the specified amount of time\n  * @param ms Milliseconds to wait\n  */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n"],"sourceRoot":"../../src"}