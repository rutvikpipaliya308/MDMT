{"version":3,"sources":["services/OneDriveService.ts"],"names":[],"mappings":"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","file":"services/OneDriveService.js","sourcesContent":["// PnP\nimport { WebPartContext } from \"@microsoft/sp-webpart-base\";\n\nimport { SPHttpClient } from '@microsoft/sp-http';\nimport { FileBrowserService } from \"./FileBrowserService\";\nimport { FilesQueryResult } from \"./FileBrowserService.types\";\nimport { ExtensionContext } from \"@microsoft/sp-extension-base\";\nimport { GeneralHelper } from \"../Utilities\";\n\nexport class OneDriveService extends FileBrowserService {\n  protected oneDrivePersonalUrl: string;\n  protected oneDriveRootFolderRelativeUrl: string;\n  protected oneDriveRootFolderAbsoluteUrl: string;\n  protected oneDrivePersonalLibraryTitle: string;\n\n  constructor(context: ExtensionContext | WebPartContext, itemsToDownloadCount?: number) {\n    super(context, itemsToDownloadCount);\n\n    this.oneDrivePersonalUrl = null;\n    this.oneDriveRootFolderRelativeUrl = null;\n    this.oneDriveRootFolderAbsoluteUrl = null;\n    this.oneDrivePersonalLibraryTitle = null;\n  }\n\n  /**\n   * Gets files from OneDrive personal library\n   */\n  public getListItems = async (libraryName: string, folderPath?: string, acceptedFilesExtensions?: string[], nextPageQueryStringParams?: string): Promise<FilesQueryResult> => {\n    let filesQueryResult: FilesQueryResult = { items: [], nextHref: null };\n    try {\n      const oneDriveRootFolder = await this.getOneDriveRootFolderFullUrl();\n      const encodedListUrl = encodeURIComponent(oneDriveRootFolder);\n\n      let queryStringParams = \"\";\n      folderPath = folderPath ? folderPath : this.oneDriveRootFolderRelativeUrl;\n      const encodedFolderPath = encodeURIComponent(folderPath);\n\n      if (nextPageQueryStringParams) {\n        // Remove start ? from the query params\n        if (nextPageQueryStringParams.charAt(0) === \"?\") {\n          nextPageQueryStringParams = nextPageQueryStringParams.substring(1);\n        }\n        queryStringParams = nextPageQueryStringParams;\n      } else {\n        queryStringParams = `RootFolder=${encodedFolderPath}`;\n      }\n\n      const restApi = `${this.context.pageContext.web.absoluteUrl}/_api/SP.List.GetListDataAsStream?listFullUrl='${encodedListUrl}'&${queryStringParams}`;\n      filesQueryResult = await this._getListDataAsStream(restApi, null, acceptedFilesExtensions);\n    } catch (error) {\n      filesQueryResult.items = null;\n      console.error(error.message);\n    }\n    return filesQueryResult;\n  }\n\n  /**\n   * Downloads document content from OneDrive location.\n   */\n  public downloadSPFileContent = async (absoluteFileUrl: string, fileName: string): Promise<File> => {\n    try {\n      // replace url OneDrive site URL with current web url\n      const urlTokens = absoluteFileUrl.split(\"/_api/\");\n      let fileUrl = `${this.context.pageContext.web.absoluteUrl}/_api/${urlTokens[1]}?`;\n\n      const fileInfoResult = await this.context.spHttpClient.get(fileUrl, SPHttpClient.configurations.v1);\n      const fileInfo = await fileInfoResult.json();\n      const oneDrvieFileUrl = fileInfo[\"@content.downloadUrl\"];\n\n      const fileDownloadResult = await this.context.httpClient.get(oneDrvieFileUrl, SPHttpClient.configurations.v1, {\n        headers: new Headers(),\n        method: 'GET',\n        mode: 'cors'\n      });\n\n      if (!fileDownloadResult || !fileDownloadResult.ok) {\n        throw new Error(`Something went wrong when downloading the file. Status='${fileDownloadResult.status}'`);\n      }\n\n      // Return file created from blob\n      const blob: Blob = await fileDownloadResult.blob();\n      return GeneralHelper.getFileFromBlob(blob, fileName);\n    } catch (err) {\n      console.error(`[OneDriveService.fetchFileContent] Err='${err.message}'`);\n      return null;\n    }\n  }\n\n  /**\n     * Gets users one drive personal documents library path\n     */\n  public getOneDriveRootFolderFullUrl = async (): Promise<string> => {\n    try {\n      // Return result if already obtained\n      if (this.oneDriveRootFolderAbsoluteUrl) {\n        return this.oneDriveRootFolderAbsoluteUrl;\n      }\n\n      const oneDriveUrl = await this.getOneDrivePersonalUrl();\n      if (!oneDriveUrl) {\n        throw new Error(`Cannot obtain OneDrive personal URL.`);\n      }\n      const apiUrl: string = `${this.context.pageContext.web.absoluteUrl}/_api/SP.RemoteWeb(@a1)/Web/Lists?$filter=BaseTemplate eq 700 and BaseType eq 1&@a1='${encodeURIComponent(oneDriveUrl)}'`;\n      const oneDriveFolderResult = await this.context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1, {\n        headers: {\n          \"accept\": \"application/json;odata=nometadata\",\n          \"content-type\": \"application/json;odata=nometadata\",\n          \"odata-version\": \"\"\n        }\n      });\n      if (!oneDriveFolderResult || !oneDriveFolderResult.ok) {\n        throw new Error(`Something went wrong when executing oneDriveRootFolder retrieve request. Status='${oneDriveFolderResult.status}'`);\n      }\n\n      const oneDriveLibsData = await oneDriveFolderResult.json();\n      if (!oneDriveLibsData || !oneDriveLibsData.value || oneDriveLibsData.value.length == 0) {\n        throw new Error(`Cannot read one drive libs data.`);\n      }\n\n      const myDocumentsLibrary = oneDriveLibsData.value[0];\n      this.oneDrivePersonalLibraryTitle = myDocumentsLibrary.Title;\n      this.oneDriveRootFolderRelativeUrl = `${myDocumentsLibrary.ParentWebUrl}/${myDocumentsLibrary.Title}`;\n      this.oneDriveRootFolderAbsoluteUrl = `${this.oneDrivePersonalUrl}${myDocumentsLibrary.Title}`;\n    } catch (error) {\n      console.error(`[FileBrowserService.getOneDrivePersonalUrl] Err='${error.message}'`);\n      this.oneDriveRootFolderAbsoluteUrl = null;\n    }\n    return this.oneDriveRootFolderAbsoluteUrl;\n  }\n\n  /**\n   * Gets OneDrive RootFolder server relative URL.\n   */\n  public getOneDriveRootFolderRelativeUrl = async (): Promise<string> => {\n    if (!this.oneDriveRootFolderRelativeUrl) {\n      await this.getOneDriveRootFolderFullUrl();\n    }\n    return this.oneDriveRootFolderRelativeUrl;\n  }\n\n  /**\n   * Gets OneDrive personal library Title\n   */\n  public getOneDrivePersonalLibraryTitle = async (): Promise<string> => {\n    if (!this.oneDrivePersonalLibraryTitle) {\n      await this.getOneDriveRootFolderFullUrl();\n    }\n    return this.oneDrivePersonalLibraryTitle;\n  }\n\n  /**\n   * Gets personal site path.\n   */\n  private getOneDrivePersonalUrl = async (): Promise<string> => {\n    try {\n      // Return result if already obtained\n      if (this.oneDrivePersonalUrl) {\n        return this.oneDrivePersonalUrl;\n      }\n\n      const userProfileApi = `${this.context.pageContext.web.absoluteUrl}/_api/SP.UserProfiles.ProfileLoader.GetProfileLoader/GetUserProfile`;\n      const userProfileResult = await this.context.spHttpClient.post(userProfileApi, SPHttpClient.configurations.v1, {});\n\n      if (!userProfileResult || !userProfileResult.ok) {\n        throw new Error(`Something went wrong when executing user profile request. Status='${userProfileResult.status}'`);\n      }\n\n      const profileData = await userProfileResult.json();\n      if (!profileData) {\n        throw new Error(`Cannot read user profile data.`);\n      }\n\n      this.oneDrivePersonalUrl = profileData.FollowPersonalSiteUrl;\n    } catch (error) {\n      console.error(`[FileBrowserService.getOneDrivePersonalUrl] Err='${error.message}'`);\n      this.oneDrivePersonalUrl = null;\n    }\n    return this.oneDrivePersonalUrl;\n  }\n\n  /**\n   * Creates an absolute URL\n   */\n  protected buildAbsoluteUrl = (relativeUrl: string) => {\n    const oneDriveHost = `https://${this.oneDrivePersonalUrl.split(\"//\")[1].split(\"/\")[0]}`;\n    return oneDriveHost + relativeUrl;\n  }\n}\n"],"sourceRoot":"../../src"}