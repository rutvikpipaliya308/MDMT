{"version":3,"sources":["services/FileBrowserService.ts"],"names":[],"mappings":"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","file":"services/FileBrowserService.js","sourcesContent":["import { WebPartContext } from \"@microsoft/sp-webpart-base\";\nimport { IFile, FilesQueryResult, ILibrary } from \"./FileBrowserService.types\";\nimport { SPHttpClient } from \"@microsoft/sp-http\";\nimport { GeneralHelper } from \"..\";\nimport { ExtensionContext } from \"@microsoft/sp-extension-base\";\n\nexport class FileBrowserService {\n  protected itemsToDownloadCount: number;\n  protected context: ExtensionContext | WebPartContext;\n\n  protected driveAccessToken: string;\n  protected mediaBaseUrl: string;\n  protected callerStack: string;\n\n  constructor(context: ExtensionContext | WebPartContext, itemsToDownloadCount: number = 100) {\n    this.context = context;\n\n    this.itemsToDownloadCount = itemsToDownloadCount;\n    this.driveAccessToken = null;\n  }\n\n  /**\n   * Gets files from current sites library\n   * @param libraryName\n   * @param folderPath\n   * @param acceptedFilesExtensions\n   */\n  public getListItems = async (libraryName: string, folderPath: string, acceptedFilesExtensions?: string[], nextPageQueryStringParams?: string): Promise<FilesQueryResult> => {\n    let filesQueryResult: FilesQueryResult = { items: [], nextHref: null };\n    try {\n      let restApi = `${this.context.pageContext.web.absoluteUrl}/_api/web/lists/GetByTitle('${libraryName}')/RenderListDataAsStream`;\n\n      // Do not pass FolderServerRelativeUrl as query parameter\n      // Attach passed nextPageQueryStringParams values to REST URL\n      if (nextPageQueryStringParams) {\n        restApi += `${nextPageQueryStringParams}`;\n        folderPath = null;\n      }\n\n      filesQueryResult = await this._getListDataAsStream(restApi, folderPath, acceptedFilesExtensions);\n    } catch (error) {\n      filesQueryResult.items = null;\n      console.error(error.message);\n    }\n    return filesQueryResult;\n  }\n\n\n  /**\n   * Provides the URL for file preview.\n   */\n  public getFileThumbnailUrl = (file: IFile, thumbnailWidth: number, thumbnailHeight: number): string => {\n    const thumbnailUrl = `${this.mediaBaseUrl}/transform/thumbnail?provider=spo&inputFormat=${file.fileType}&cs=${this.callerStack}&docid=${file.spItemUrl}&${this.driveAccessToken}&width=${thumbnailWidth}&height=${thumbnailHeight}`;\n    return thumbnailUrl;\n  }\n\n\n  /**\n   * Gets document and media libraries from the site\n   */\n  public getSiteMediaLibraries = async (includePageLibraries: boolean = false) => {\n    try {\n      const absoluteUrl = this.context.pageContext.web.absoluteUrl;\n      const restApi = `${absoluteUrl}/_api/SP.Web.GetDocumentAndMediaLibraries?webFullUrl='${encodeURIComponent(absoluteUrl)}'&includePageLibraries='${includePageLibraries}'`;\n      const mediaLibrariesResult = await this.context.spHttpClient.get(restApi, SPHttpClient.configurations.v1);\n\n      if (!mediaLibrariesResult || !mediaLibrariesResult.ok) {\n        throw new Error(`Something went wrong when executing request. Status='${mediaLibrariesResult.status}'`);\n      }\n      const libResults = await mediaLibrariesResult.json();\n      if (!libResults || !libResults.value) {\n        throw new Error(`Cannot read data from the results.`);\n      }\n\n      const result: ILibrary[] = libResults.value.map((libItem) => { return this.parseLibItem(libItem); });\n      return result;\n    } catch (error) {\n      console.error(`[FileBrowserService.getSiteMediaLibraries]: Err='${error.message}'`);\n      return null;\n    }\n  }\n\n  /**\n   * Downloads document content from SP location.\n   */\n  public downloadSPFileContent = async (absoluteFileUrl: string, fileName: string): Promise<File> => {\n    try {\n      const fileDownloadResult = await this.context.spHttpClient.get(absoluteFileUrl, SPHttpClient.configurations.v1);\n\n      if (!fileDownloadResult || !fileDownloadResult.ok) {\n        throw new Error(`Something went wrong when downloading the file. Status='${fileDownloadResult.status}'`);\n      }\n\n      // Return file created from blob\n      const blob: Blob = await fileDownloadResult.blob();\n      return GeneralHelper.getFileFromBlob(blob, fileName);\n    } catch (err) {\n      console.error(`[FileBrowserService.fetchFileContent] Err='${err.message}'`);\n      return null;\n    }\n  }\n\n  /**\n   * Executes query to load files with possible extension filtering\n   * @param restApi\n   * @param folderPath\n   * @param acceptedFilesExtensions\n   */\n  protected _getListDataAsStream = async (restApi: string, folderPath: string, acceptedFilesExtensions?: string[]): Promise<FilesQueryResult> => {\n    let filesQueryResult: FilesQueryResult = { items: [], nextHref: null };\n    try {\n      const body = {\n        parameters: {\n          AllowMultipleValueFilterForTaxonomyFields: true,\n          // ContextInfo (1), ListData (2), ListSchema (4), ViewMetadata (1024), EnableMediaTAUrls (4096), ParentInfo (8192)\n          RenderOptions: 1 | 2 | 4 | 1024 | 4096 | 8192,\n          ViewXml: this.getFilesCamlQueryViewXml(acceptedFilesExtensions)\n        }\n      };\n      if (folderPath) {\n          body.parameters[\"FolderServerRelativeUrl\"] = folderPath;\n      }\n      const data: any = await this.context.spHttpClient.fetch(restApi, SPHttpClient.configurations.v1, {\n        method: \"POST\",\n        body: JSON.stringify(body)\n      });\n\n      if (!data || !data.ok) {\n        throw new Error(`[FileBrowser._getListItems]: Something went wrong when executing request. Status='${data.statusMessage}'`);\n      }\n      const filesResult = await data.json();\n      if (!filesResult || !filesResult.ListData || !filesResult.ListData.Row) {\n        throw new Error(`[FileBrowser._getListItems]: No data is available. Status='${data.statusMessage}'`);\n      }\n\n      // Set additional information from the ListResponse\n      this.processResponse(filesResult);\n\n      const items = filesResult.ListData.Row.map(fileItem => this.parseFileItem(fileItem));\n      filesQueryResult = {\n        items: items,\n        nextHref: filesResult.ListData.NextHref\n      };\n    } catch (error) {\n      filesQueryResult.items = null;\n      console.error(error.message);\n    }\n    return filesQueryResult;\n  }\n\n  /**\n   * Generates CamlQuery files filter.\n   * @param accepts\n   */\n  protected getFileTypeFilter(accepts: string[]) {\n    let fileFilter: string = \"\";\n\n    if (accepts && accepts.length > 0) {\n      fileFilter = \"<Values>\";\n      accepts.forEach((fileType: string, index: number) => {\n        fileType = fileType.replace(\".\", \"\");\n        if (index >= 0) {\n          fileFilter = fileFilter + `<Value Type=\"Text\">${fileType}</Value>`;\n        }\n      });\n      fileFilter = fileFilter + \"</Values>\";\n    }\n\n    return fileFilter;\n  }\n\n  /**\n   * Generates Files CamlQuery ViewXml\n   */\n  protected getFilesCamlQueryViewXml = (accepts: string[]) => {\n    const fileFilter: string = this.getFileTypeFilter(accepts);\n    let queryCondition = fileFilter && fileFilter != \"\" ?\n      `<Query>\n        <Where>\n          <Or>\n            <And>\n              <Eq>\n                <FieldRef Name=\"FSObjType\" />\n                <Value Type=\"Text\">1</Value>\n              </Eq>\n              <Eq>\n                <FieldRef Name=\"SortBehavior\" />\n                <Value Type=\"Text\">1</Value>\n              </Eq>\n            </And>\n            <In>\n              <FieldRef Name=\"File_x0020_Type\" />\n              ${fileFilter}\n            </In>\n          </Or>\n        </Where>\n      </Query>` : \"\";\n\n    // Add files types condiiton\n    const viewXml = `<View>\n                      ${queryCondition}\n                      <ViewFields>\n                        <FieldRef Name=\"DocIcon\"/>\n                        <FieldRef Name=\"LinkFilename\"/>\n                        <FieldRef Name=\"Modified\"/>\n                        <FieldRef Name=\"Editor\"/>\n                        <FieldRef Name=\"FileSizeDisplay\"/>\n                        <FieldRef Name=\"SharedWith\"/>\n                        <FieldRef Name=\"MediaServiceFastMetadata\"/>\n                        <FieldRef Name=\"MediaServiceOCR\"/>\n                        <FieldRef Name=\"_ip_UnifiedCompliancePolicyUIAction\"/>\n                        <FieldRef Name=\"ItemChildCount\"/>\n                        <FieldRef Name=\"FolderChildCount\"/>\n                        <FieldRef Name=\"SMTotalFileCount\"/>\n                        <FieldRef Name=\"SMTotalSize\"/>\n                      </ViewFields>\n                      <RowLimit Paged=\"TRUE\">${this.itemsToDownloadCount}</RowLimit>\n                    </View>`;\n\n    return viewXml;\n  }\n\n  /**\n   * Converts REST call results to IFile\n   */\n  protected parseFileItem = (fileItem: any): IFile => {\n    const modifiedFriendly: string = fileItem[\"Modified.FriendlyDisplay\"];\n\n    // Get the modified date\n    const modifiedParts: string[] = modifiedFriendly!.split('|');\n    let modified: string = fileItem.Modified;\n\n    // If there is a friendly modified date, use that\n    if (modifiedParts.length === 2) {\n      modified = modifiedParts[1];\n    }\n\n    const file: IFile = {\n      name: fileItem.FileLeafRef,\n      fileIcon: fileItem.DocIcon,\n      serverRelativeUrl: fileItem.FileRef,\n      modified: modified,\n      fileSize: fileItem.File_x0020_Size,\n      fileType: fileItem.File_x0020_Type,\n      modifiedBy: fileItem.Editor![0]!.title,\n      isFolder: fileItem.FSObjType === \"1\",\n      absoluteUrl: this.buildAbsoluteUrl(fileItem.FileRef),\n\n      // Required for item thumbnail\n      supportsThumbnail: true,\n      spItemUrl: fileItem[\".spItemUrl\"]\n    };\n    return file;\n  }\n\n  protected parseLibItem = (libItem: any): ILibrary => {\n    const library: ILibrary = {\n      title: libItem.Title,\n      absoluteUrl: libItem.AbsoluteUrl,\n      serverRelativeUrl: libItem.ServerRelativeUrl\n    };\n\n    return library;\n  }\n\n  /**\n   * Creates an absolute URL\n   */\n  protected buildAbsoluteUrl = (relativeUrl: string) => {\n    const siteUrl: string = GeneralHelper.getAbsoluteDomainUrl(this.context.pageContext.web.absoluteUrl);\n    return `${siteUrl}${relativeUrl.indexOf('/') === 0 ? '' : '/'}${relativeUrl}`;\n  }\n\n  protected processResponse = (fileResponse: any): void => {\n    // Extract media base URL\n    this.mediaBaseUrl = fileResponse.ListSchema[\".mediaBaseUrl\"];\n    this.callerStack = fileResponse.ListSchema[\".callerStack\"];\n    this.driveAccessToken = fileResponse.ListSchema[\".driveAccessToken\"];\n  }\n}\n"],"sourceRoot":"../../src"}