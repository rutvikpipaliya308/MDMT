{"version":3,"sources":["common/extensions/String.extensions.ts"],"names":[],"mappings":"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","file":"common/extensions/String.extensions.js","sourcesContent":["export { };\n\nimport { ICultureInfo, ICultureNumberFormat } from '../SPEntities';\nimport { InvariantCulture } from '../Constants';\n\ndeclare global {\n    interface String {\n        parseNumberInvariant(): number;\n        _parseNumber(culture: ICultureInfo): number;\n        _parseNumberNegativePattern(numberFormat: ICultureNumberFormat, pattern: number): string[];\n    }\n}\n\ndeclare var window: any;\n\n/**\n * Parses number in invariant culture\n */\nString.prototype.parseNumberInvariant = function (): number {\n    return this._parseNumber((window.Sys && window.Sys.CultureInfo && window.Sys.CultureInfo.InvariantCulture) || InvariantCulture);\n};\n\n/**\n * Parses number in provided culture\n */\nString.prototype._parseNumber = function (culture: ICultureInfo): number {\n    let str: string = '' + this;\n    str = str.trim();\n    if (str.match(/^[+-]?infinity$/i)) {\n        return parseFloat(str);\n    }\n    if (str.match(/^0x[a-f0-9]+$/i)) {\n        return parseInt(str);\n    }\n    const numberFormat: ICultureNumberFormat = culture.numberFormat;\n    let patternParsed: string[] = str._parseNumberNegativePattern(numberFormat, numberFormat.NumberNegativePattern);\n    let symbol: string = patternParsed[0];\n    let digit: string = patternParsed[1];\n    if (symbol === '' && numberFormat.NumberNegativePattern !== 1) {\n        patternParsed = str._parseNumberNegativePattern(numberFormat, 1);\n        symbol = patternParsed[0];\n        digit = patternParsed[1];\n    }\n    if (symbol === '') {\n        symbol = '+';\n    }\n    let exponent: string;\n    let base: string;\n    let scientificSymbolIndex: number = digit.indexOf('e');\n    if (scientificSymbolIndex < 0) {\n        scientificSymbolIndex = digit.indexOf('E');\n    }\n    if (scientificSymbolIndex < 0) {\n        base = digit;\n        exponent = null;\n    }\n    else {\n        base = digit.substr(0, scientificSymbolIndex);\n        exponent = digit.substr(scientificSymbolIndex + 1);\n    }\n    let intPart: string;\n    let fractionalPart: string;\n    let decimalSeparatorIdx: number = base.indexOf(numberFormat.NumberDecimalSeparator);\n    if (decimalSeparatorIdx < 0) {\n        intPart = base;\n        fractionalPart = null;\n    }\n    else {\n        intPart = base.substr(0, decimalSeparatorIdx);\n        fractionalPart = base.substr(decimalSeparatorIdx + numberFormat.NumberDecimalSeparator.length);\n    }\n    intPart = intPart.split(numberFormat.NumberGroupSeparator).join('');\n    var n = numberFormat.NumberGroupSeparator.replace(/\\u00A0/g, ' ');\n    if (numberFormat.NumberGroupSeparator !== n) {\n        intPart = intPart.split(n).join('');\n    }\n    var result: string = symbol + intPart;\n    if (fractionalPart !== null) {\n        result += '.' + fractionalPart;\n    }\n    if (exponent !== null) {\n        const exponentParsed: string[] = exponent._parseNumberNegativePattern(numberFormat, 1);\n        if (exponentParsed[0] === '') {\n            exponentParsed[0] = '+';\n        }\n        result += 'e' + exponentParsed[0] + exponentParsed[1];\n    }\n    if (result.match(/^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$/)) {\n        return parseFloat(result);\n    }\n    return Number.NaN;\n};\n\n/**\n * Internal method, Microsoft's replica to parse FriendlyFormat of date or digit\n */\nString.prototype._parseNumberNegativePattern = function (numberFormat: ICultureNumberFormat, pattern: number): string[] {\n    let negativeSign: string = numberFormat.NegativeSign;\n    let positiveSign: string = numberFormat.PositiveSign;\n    switch (pattern) {\n        case 4:\n            negativeSign = ' ' + negativeSign;\n            positiveSign = ' ' + positiveSign;\n            break;\n        case 3:\n            if (this.endsWith(negativeSign)) {\n                return ['-', this.substr(0, this.length - negativeSign.length)];\n            }\n            else if (this.endsWith(positiveSign)) {\n                return ['+', this.substr(0, this.length - positiveSign.length)];\n            }\n            break;\n        case 2:\n            negativeSign += ' ';\n            positiveSign += ' ';\n            break;\n        case 1: if (this.startsWith(negativeSign)) {\n            return ['-', this.substr(negativeSign.length)];\n        }\n        else if (this.startsWith(positiveSign)) {\n            return ['+', this.substr(positiveSign.length)];\n        }\n            break;\n        case 0:\n            if (this.startsWith('(') && this.endsWith(')')) {\n                return ['-', this.substr(1, this.length - 2)];\n            }\n    }\n    return ['', this];\n};\n"],"sourceRoot":"../../../src"}