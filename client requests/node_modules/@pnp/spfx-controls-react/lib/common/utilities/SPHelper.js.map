{"version":3,"sources":["common/utilities/SPHelper.ts"],"names":[],"mappings":"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","file":"common/utilities/SPHelper.js","sourcesContent":["import { IContext, IFields } from '../Interfaces';\nimport { GeneralHelper } from './GeneralHelper';\nimport { ISPField, ISPFieldLookupValue, IPrincipal, ITerm } from '../SPEntities';\nimport * as Constants from '../Constants';\nimport { ListItemAccessor } from '@microsoft/sp-listview-extensibility';\nimport { SPField } from '@microsoft/sp-page-context';\nimport { sp } from '@pnp/sp';\nimport { SPHttpClient } from '@microsoft/sp-http';\n\ndeclare var window: any;\n\n/**\n * Helper class to work with SharePoint objects and entities\n */\nexport class SPHelper {\n\n    /**\n     * Gets field's Real Name from FieldNamesMapping\n     * @param columnName current field name\n     */\n    public static getStoredFieldName(columnName: string): string {\n        if (!columnName)\n            return '';\n\n        return Constants.FieldNamesMapping[columnName] ? Constants.FieldNamesMapping[columnName].storedName : columnName;\n    }\n\n    /**\n     * Gets Field's text\n     * @param fieldValue field value as it appears in Field Customizer's onRenderCell event\n     * @param listItem List Item accessor\n     * @param context Customizer's context\n     */\n    public static getFieldText(fieldValue: any, listItem: ListItemAccessor, context: IContext): Promise<string> {\n        return new Promise<string>(resolve => {\n            const field: SPField = context.field;\n\n            if (!field) {\n                resolve('');\n                return;\n            }\n\n            const fieldName: string = field.internalName; //this.getFieldNameById(field.id.toString());\n            const fieldType: string = field.fieldType;\n            const strFieldValue: string = fieldValue ? fieldValue.toString() : '';\n\n            switch (fieldType) {\n                case 'Note':\n                    SPHelper.getFieldProperty(field.id.toString(), \"RichText\", context, false).then(richText => {\n                        const isRichText: boolean = richText === 'TRUE';\n                        if (isRichText) {\n                            resolve(GeneralHelper.getTextFromHTML(strFieldValue));\n                        }\n                        resolve(fieldValue);\n                    });\n                    break;\n                case 'DateTime':\n                    const friendlyDisplay: string = SPHelper.getRowItemValueByName(listItem, `${fieldName}.FriendlyDisplay`);\n                    resolve(friendlyDisplay ? GeneralHelper.getRelativeDateTimeString(friendlyDisplay) : strFieldValue);\n                    break;\n                case 'User':\n                case 'UserMulti':\n                    const titles: string[] = [];\n                    const users: IPrincipal[] = <IPrincipal[]>fieldValue;\n\n                    if (!users) {\n                        resolve('');\n                    }\n\n                    for (let i = 0, len = users.length; i < len; i++) {\n                        titles.push(users[i].title);\n                    }\n                    resolve(titles.join('\\n'));\n                    break;\n                case \"Lookup\":\n                case \"LookupMulti\":\n                    const lookupValues = fieldValue as ISPFieldLookupValue[];\n\n                    if (!lookupValues) {\n                        resolve('');\n                    }\n\n                    const lookupTexts: string[] = [];\n                    for (let i = 0, len = lookupValues.length; i < len; i++) {\n                        lookupTexts.push(lookupValues[i].lookupValue);\n                    }\n                    resolve(lookupTexts.join('\\n'));\n                    break;\n                case 'URL':\n                    SPHelper.getFieldProperty(field.id.toString(), 'Format', context, true).then(format => {\n                        const isImage: boolean = format === 'Image';\n                        if (isImage) {\n                            resolve('');\n                        }\n                        resolve(SPHelper.getRowItemValueByName(listItem, `${fieldName}.desc`));\n                    });\n                    break;\n                case 'Taxonomy':\n                case 'TaxonomyFieldType':\n                case 'TaxonomyFieldTypeMulti':\n                    const terms: ITerm[] = Array.isArray(fieldValue) ? <ITerm[]>fieldValue : <ITerm[]>[fieldValue];\n\n                    if (!terms) {\n                        resolve('');\n                    }\n\n                    const termTexts: string[] = [];\n                    for (let i = 0, len = terms.length; i < len; i++) {\n                        termTexts.push(terms[i].Label);\n                    }\n                    resolve(termTexts.join('\\n'));\n                    break;\n                case 'Attachments':\n                    resolve('');\n                    break;\n                case 'Computed':\n                    const storedName: string = this.getStoredFieldName(fieldName);\n                    if (storedName === 'URL') {\n                        resolve(this.getRowItemValueByName(listItem, 'URL.desc') || strFieldValue);\n                    }\n                    resolve(strFieldValue);\n                    break;\n                default:\n                    resolve(strFieldValue);\n            }\n        });\n    }\n\n    /**\n     * Gets property of the Field by Field's ID and Property Name\n     * @param fieldId Field's ID\n     * @param propertyName Property name\n     * @param context SPFx context\n     * @param fromSchemaXml true if the field should be read from Field Schema Xml\n     */\n    public static getFieldProperty(fieldId: string, propertyName: string, context: IContext, fromSchemaXml: boolean): Promise<any> {\n        return new Promise<any>(resolve => {\n            let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\n            const viewId: string = SPHelper.getPageViewId(context);\n\n            if (!loadedViewFields) {\n                loadedViewFields = {};\n            }\n\n            if (!loadedViewFields[viewId]) {\n                loadedViewFields[viewId] = {};\n            }\n\n            let field: ISPField = loadedViewFields[viewId][fieldId];\n            if (!field) {\n                field = {\n                    Id: fieldId\n                };\n            }\n\n\n            if (GeneralHelper.isDefined(field[propertyName])) {\n                resolve(field[propertyName]);\n                return;\n            }\n\n            sp.setup({\n                spfxContext: context\n            });\n\n            if (fromSchemaXml) {\n                SPHelper.getFieldSchemaXmlById(fieldId, context.pageContext.list.title, context).then(schemaXml => {\n                    let fieldValue: string;\n                    const xml: Document = GeneralHelper.parseXml(schemaXml);\n                    const fieldEls = xml.getElementsByTagName('Field');\n                    if (fieldEls.length) {\n                        const fieldEl = fieldEls[0];\n                        fieldValue = fieldEl.getAttribute(propertyName);\n                        if (!GeneralHelper.isDefined(fieldValue)) {\n                            fieldValue = fieldEl.textContent;\n                        }\n                    }\n                    if (!GeneralHelper.isDefined(fieldValue)) {\n                        fieldValue = '';\n                    }\n                    field[propertyName] = fieldValue;\n                    SPHelper._updateFieldInSessionStorage(field, context);\n                }, (error) => {\n                    resolve('');\n                });\n            }\n            else {\n                sp.web.lists.getByTitle(context.pageContext.list.title).fields.getById(fieldId).select(propertyName).get().then(f => {\n                    field[propertyName] = f[propertyName];\n\n                    loadedViewFields[viewId][field.Id] = field;\n\n                    SPHelper._updateSessionStorageLoadedViewFields(loadedViewFields);\n                    resolve(field);\n                }, (error) => {\n                    resolve('');\n                });\n            }\n        });\n    }\n\n    /**\n     * Asynchronously gets the Diplay Form Url for the Lookup field\n     * @param fieldId Field Id\n     * @param context SPFx Context\n     */\n    public static getLookupFieldListDispFormUrl(fieldId: string, context: IContext): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\n            const viewId: string = SPHelper.getPageViewId(context);\n\n            if (!loadedViewFields) {\n                loadedViewFields = {};\n            }\n\n            if (!loadedViewFields[viewId]) {\n                loadedViewFields[viewId] = {};\n            }\n\n            let field: ISPField = loadedViewFields[viewId][fieldId];\n            if (!field) {\n                field = {\n                    Id: fieldId\n                };\n            }\n\n            if (GeneralHelper.isDefined(field.LookupDisplayUrl)) {\n                resolve(field.LookupDisplayUrl);\n                return;\n            }\n            sp.setup({\n                spfxContext: context\n            });\n            sp.web.lists.getByTitle(context.pageContext.list.title).fields.getById(fieldId).select('LookupWebId', 'LookupList').get().then(f => {\n                sp.site.openWebById(f.LookupWebId).then(openedWeb => {\n                    openedWeb.web.select('Url').get().then(w => {\n                        field.LookupDisplayUrl = `${w.Url}/_layouts/15/listform.aspx?PageType=4&ListId=${f.LookupList}`;\n                        SPHelper._updateFieldInSessionStorage(field, context);\n                        resolve(field.LookupDisplayUrl);\n                    }, (error) => {\n                        reject(error);\n                    });\n                });\n            });\n        });\n    }\n\n    /**\n     * Gets column's value for the row using List Item Accessor.\n     * This method works with private property _values of List Item Accessor to get such values as FriendlyDisplay text for Date, and more.\n     * @param listItem List Item Accessor\n     * @param itemName column name\n     */\n    public static getRowItemValueByName(listItem: ListItemAccessor, itemName: string): any {\n        const _values: any = (<any>listItem)._values;\n\n        if (_values) {\n            return (_values as Map<string, any>).get(itemName);\n        }\n        else {\n            //\n            // TODO: here we should call make a POST request to _api/web/GetList(@listUrl)/RenderListDataAsStream with correct parameters to get correct data\n            // the parameters should contain view, folder, pagination data, etc.\n            // I hope that Dev team will expose this data in API before I implement that because it's pretty complicated and they already have it in place\n            //\n\n            return null;\n        }\n    }\n\n    /**\n     * Gets SchemaXml for the field by List Title and Field Id\n     * @param fieldId Field's Id\n     * @param listTitle List Title\n     * @param context Customizer's context\n     */\n    public static getFieldSchemaXmlById(fieldId: string, listTitle: string, context: IContext): Promise<string> {\n        return new Promise<string>((resolve) => {\n            let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\n            const viewId: string = SPHelper.getPageViewId(context);\n\n            if (!loadedViewFields) {\n                loadedViewFields = {};\n            }\n\n            if (!loadedViewFields[viewId]) {\n                loadedViewFields[viewId] = {};\n            }\n\n            let field: ISPField = loadedViewFields[viewId][fieldId];\n            if (!field) {\n                field = {\n                    Id: fieldId\n                };\n            }\n\n\n            if (GeneralHelper.isDefined(field.SchemaXml)) {\n                resolve(field.SchemaXml);\n                return;\n            }\n            sp.setup({\n                spfxContext: context\n            });\n\n            sp.web.lists.getByTitle(listTitle).fields.getById(fieldId).select('SchemaXml').get().then((f) => {\n                field.SchemaXml = f && f.SchemaXml;\n\n                loadedViewFields[viewId][field.Id] = field;\n\n                SPHelper._updateSessionStorageLoadedViewFields(loadedViewFields);\n                resolve(f ? f.SchemaXml : '');\n            }, (error) => {\n                resolve('');\n            });\n        });\n    }\n\n    /**\n     * Gets correct view id from the page\n     * @param context SPFx Context\n     */\n    public static getPageViewId(context: IContext): string {\n        const urlParams: URLSearchParams = new URLSearchParams(location.search);\n        let viewIdQueryParam: string = urlParams.get('viewid');\n        if (viewIdQueryParam && viewIdQueryParam.indexOf('{') !== 0) {\n            viewIdQueryParam = `{${viewIdQueryParam}}`;\n        }\n        return viewIdQueryParam || context.pageContext.legacyPageContext.viewId;\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     * @param id user id\n     * @param context SPFx context\n     */\n    public static async getUserById(id: number, context: IContext): Promise<any> {\n        sp.setup({\n            spfxContext: context\n        });\n\n        return sp.web.getUserById(id).get();\n    }\n\n    /**\n     * Returns user profile properties\n     * @param loginName User's login name\n     * @param context SPFx context\n     */\n    public static async getUserProperties(loginName: string, context: IContext): Promise<any> {\n        let url: string;\n        url = context.pageContext.web.absoluteUrl;\n        url = GeneralHelper.trimSlash(url);\n\n        url += \"/_api/SP.UserProfiles.PeopleManager/GetPropertiesFor(accountName=@v)?@v='\" + encodeURIComponent(loginName) + \"'\";\n         return context.spHttpClient.get(url, SPHttpClient.configurations.v1)\n            .then((response): Promise<any> => {\n                return response.json();\n            })\n            .then((value) => {\n                return value;\n            });\n    }\n\n\n    private static _updateFieldInSessionStorage(field: ISPField, context: IContext): void {\n        let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\n        if (!loadedViewFields) {\n            loadedViewFields = {};\n        }\n        const viewId: string = SPHelper.getPageViewId(context);\n        if (!loadedViewFields[viewId]) {\n            loadedViewFields[viewId] = {};\n        }\n        loadedViewFields[viewId][field.Id] = field;\n        SPHelper._updateSessionStorageLoadedViewFields(loadedViewFields);\n    }\n\n    private static _updateSessionStorageLoadedViewFields(loadedViewFields: { [viewId: string]: IFields }): void {\n        const sessionStorage: any = window.sessionStorage;\n        sessionStorage.setItem(Constants.LoadedViewFieldsKey, JSON.stringify(loadedViewFields));\n    }\n\n    private static _getLoadedViewFieldsFromStorage(): { [viewId: string]: IFields } {\n        const loadedViewFields = sessionStorage.getItem(Constants.LoadedViewFieldsKey);\n        if (loadedViewFields) {\n            return JSON.parse(loadedViewFields);\n        }\n\n        return null;\n    }\n}"],"sourceRoot":"../../../src"}