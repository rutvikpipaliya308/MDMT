{"version":3,"sources":["controls/filePicker/controls/FileBrowser/FileBrowser.tsx"],"names":[],"mappings":"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","file":"controls/filePicker/controls/FileBrowser/FileBrowser.js","sourcesContent":["import * as React from 'react';\nimport { IFile, FilesQueryResult } from '../../../../services/FileBrowserService.types';\nimport { GeneralHelper } from '../../../../Utilities';\nimport { LoadingState } from './IFileBrowserState';\nimport { TilesList } from '../TilesList/TilesList';\nimport { IFilePickerResult } from '../../FilePicker.types';\nimport { IFileBrowserProps, IFileBrowserState, ViewType } from '.';\nimport { Spinner } from 'office-ui-fabric-react/lib/Spinner';\nimport { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, IColumn, IDetailsRowProps, DetailsRow, SelectionZone } from 'office-ui-fabric-react/lib/DetailsList';\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\nimport { IContextualMenuItem } from 'office-ui-fabric-react/lib/ContextualMenu';\nimport { ScrollablePane } from 'office-ui-fabric-react/lib/ScrollablePane';\n\nimport styles from './FileBrowser.module.scss';\nimport * as strings from 'ControlStrings';\n\nconst LAYOUT_STORAGE_KEY: string = 'comparerSiteFilesLayout';\n\nexport class FileBrowser extends React.Component<IFileBrowserProps, IFileBrowserState> {\n  private _selection: Selection;\n  constructor(props: IFileBrowserProps) {\n    super(props);\n\n    // If possible, load the user's favourite layout\n    const lastLayout: ViewType = localStorage ?\n      localStorage.getItem(LAYOUT_STORAGE_KEY) as ViewType\n      : 'list' as ViewType;\n\n    const columns: IColumn[] = [\n      {\n        key: 'column1',\n        name: 'Type',\n        ariaLabel: strings.TypeAriaLabel,\n        iconName: 'Page',\n        isIconOnly: true,\n        fieldName: 'docIcon',\n        headerClassName: styles.iconColumnHeader,\n        minWidth: 16,\n        maxWidth: 16,\n        onColumnClick: this._onColumnClick,\n        onRender: (item: IFile) => {\n          const folderIcon: string = strings.FolderIconUrl;\n          // TODO: Improve file icon URL\n          const isPhoto = GeneralHelper.isImage(item.name);\n          const iconUrl = isPhoto ? strings.PhotoIconUrl : `https://spoprod-a.akamaihd.net/files/odsp-next-prod_2019-01-11_20190116.001/odsp-media/images/itemtypes/20_2x/${item.fileType}.png`;\n\n          const altText: string = item.isFolder ? strings.FolderAltText : strings.ImageAltText.replace('{0}', item.fileType);\n          return <div className={styles.fileTypeIcon}>\n            <img src={item.isFolder ? folderIcon : iconUrl} className={styles.fileTypeIconIcon} alt={altText} title={altText} />\n          </div>;\n        }\n      },\n      {\n        key: 'column2',\n        name: strings.NameField,\n        fieldName: 'fileLeafRef',\n        minWidth: 210,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: strings.SortedAscending,\n        sortDescendingAriaLabel: strings.SortedDescending,\n        onColumnClick: this._onColumnClick,\n        data: 'string',\n        isPadded: true,\n        onRender: (item: IFile) => {\n          if (item.isFolder) {\n            return <span className={styles.folderItem} onClick={(_event) => this._handleOpenFolder(item)}>{item.name}</span>;\n          } else {\n            return <span className={styles.fileItem}>{item.name}</span>;\n          }\n        },\n      },\n      {\n        key: 'column3',\n        name: strings.ModifiedField,\n        fieldName: 'dateModifiedValue',\n        minWidth: 120,\n        isResizable: true,\n        onColumnClick: this._onColumnClick,\n        data: 'number',\n        onRender: (item: IFile) => {\n          //const dateModified = moment(item.modified).format(strings.DateFormat);\n          return <span>{item.modified}</span>;\n        },\n        isPadded: true\n      },\n      {\n        key: 'column4',\n        name: strings.ModifiedByField,\n        fieldName: 'modifiedBy',\n        minWidth: 120,\n        isResizable: true,\n        data: 'string',\n        onColumnClick: this._onColumnClick,\n        onRender: (item: IFile) => {\n          return <span>{item.modifiedBy}</span>;\n        },\n        isPadded: true\n      },\n      {\n        key: 'column5',\n        name: strings.FileSizeField,\n        fieldName: 'fileSizeRaw',\n        minWidth: 70,\n        maxWidth: 90,\n        isResizable: true,\n        data: 'number',\n        onColumnClick: this._onColumnClick,\n        onRender: (item: IFile) => {\n          return <span>{item.fileSize ? GeneralHelper.formatBytes(item.fileSize, 1) : undefined}</span>;\n        }\n      }\n    ];\n\n    this._selection = new Selection({\n      selectionMode: SelectionMode.single\n    });\n\n    this.state = {\n      columns: columns,\n      items: [],\n      nextPageQueryString: null,\n      loadingState: LoadingState.loading,\n      selectedView: lastLayout,\n      filePickerResult: null\n    };\n  }\n\n  /**\n   * Gets the list of files when settings change\n   * @param prevProps\n   * @param prevState\n   */\n  public componentDidUpdate(prevProps: IFileBrowserProps, prevState: IFileBrowserState): void {\n\n    if (this.props.folderPath !== prevProps.folderPath) {\n      this._selection.setAllSelected(false);\n      this._getListItems();\n    }\n  }\n\n  /**\n   * Gets the list of files when tab first loads\n   */\n  public componentDidMount(): void {\n    this._getListItems();\n  }\n\n  public render(): React.ReactElement<IFileBrowserProps> {\n    return (\n      <div>\n        {\n          (this.state.items && this.state.items.length > 0 && this.state.loadingState != LoadingState.loading) &&\n          <div>\n            <div className={styles.itemPickerTopBar}>\n              <CommandBar\n                items={this._getToolbarItems()}\n                farItems={this.getFarItems()}\n              />\n            </div>\n            <div className={styles.scrollablePaneWrapper}>\n              <ScrollablePane>\n\n                  {\n                    this.state.selectedView !== 'tiles' ?\n                      (\n                      <DetailsList\n                        items={this.state.items}\n                        compact={this.state.selectedView === 'compact'}\n                        columns={this.state.columns}\n                        selectionMode={SelectionMode.single}\n                        setKey=\"set\"\n                        layoutMode={DetailsListLayoutMode.justified}\n                        isHeaderVisible={true}\n                        selection={this._selection}\n                        onActiveItemChanged={(item: IFile, index: number, ev: React.FormEvent<Element>) => this._handleItemInvoked(item)}\n                        selectionPreservedOnEmptyClick={true}\n                        enterModalSelectionOnTouch={true}\n                        onRenderRow={this._onRenderRow}\n                        onRenderMissingItem={this._loadNextDataRequest}\n                      />) :\n                      (<TilesList\n                        fileBrowserService={this.props.fileBrowserService}\n                        filePickerResult={this.state.filePickerResult}\n                        selection={this._selection}\n                        items={this.state.items}\n\n                        onFolderOpen={this._handleOpenFolder}\n                        onFileSelected={this._itemSelectionChanged}\n                        onNextPageDataRequest={this._loadNextDataRequest}\n                      />)\n                  }\n              </ScrollablePane>\n            </div>\n          </div>\n        }\n\n        {\n          (this.state.loadingState === LoadingState.idle && (!this.state.items || this.state.items.length <= 0)) &&\n          /* Render information about empty folder */\n          this._renderEmptyFolder()\n        }\n\n        {\n          this.state.loadingState != LoadingState.idle &&\n          <Spinner label={strings.Loading} />\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Triggers paged data load\n   */\n  private _loadNextDataRequest = async () => {\n    if (this.state.loadingState == LoadingState.idle) {\n      // Load next list items from next page\n      await this._getListItems(true);\n    }\n  }\n\n  /**\n  * Renders a placeholder to indicate that the folder is empty\n  */\n  private _renderEmptyFolder = (): JSX.Element => {\n    return (\n      <div className={styles.emptyFolder}>\n        <div className={styles.emptyFolderImage}>\n          <img\n            className={styles.emptyFolderImageTag}\n            src={strings.OneDriveEmptyFolderIconUrl}\n            alt={strings.OneDriveEmptyFolderAlt} />\n        </div>\n        <div role=\"alert\">\n          <div className={styles.emptyFolderTitle}>\n            {strings.OneDriveEmptyFolderTitle}\n          </div>\n          <div className={styles.emptyFolderSubText}>\n            <span className={styles.emptyFolderPc}>\n              {strings.OneDriveEmptyFolderDescription}\n            </span>\n            {/* Removed until we add support to upload */}\n            {/* <span className={styles.emptyFolderMobile}>\n            Tap <Icon iconName=\"Add\" className={styles.emptyFolderIcon} /> to add files here.\n        </span> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Renders row with file or folder style.\n   */\n  private _onRenderRow = (props: IDetailsRowProps): JSX.Element => {\n    const fileItem: IFile = props.item;\n    return <DetailsRow {...props} className={fileItem.isFolder ? styles.folderRow : styles.fileRow} />;\n  }\n\n  /**\n   * Get the list of toolbar items on the left side of the toolbar.\n   * We leave it empty for now, but we may add the ability to upload later.\n   */\n  private _getToolbarItems = (): ICommandBarItemProps[] => {\n    return [\n\n    ];\n  }\n\n  private getFarItems = (): ICommandBarItemProps[] => {\n    const { selectedView } = this.state;\n\n    let viewIconName: string = undefined;\n    let viewName: string = undefined;\n    switch (this.state.selectedView) {\n      case 'list':\n        viewIconName = 'List';\n        viewName = strings.ListLayoutList;\n        break;\n      case 'compact':\n        viewIconName = 'AlignLeft';\n        viewName = strings.ListLayoutCompact;\n        break;\n      default:\n        viewIconName = 'GridViewMedium';\n        viewName = strings.ListLayoutTile;\n    }\n\n    const farItems: ICommandBarItemProps[] = [\n      {\n        key: 'listOptions',\n        className: styles.commandBarNoChevron,\n        title: strings.ListOptionsTitle,\n        ariaLabel: strings.ListOptionsAlt.replace('{0}', viewName),\n        iconProps: {\n          iconName: viewIconName\n        },\n        iconOnly: true,\n        subMenuProps: {\n          items: [\n            {\n              key: 'list',\n              name: strings.ListLayoutList,\n              iconProps: {\n                iconName: 'List'\n              },\n              canCheck: true,\n              checked: this.state.selectedView === 'list',\n              ariaLabel: strings.ListLayoutAriaLabel.replace('{0}', strings.ListLayoutList).replace('{1}', selectedView === 'list' ? strings.Selected : undefined),\n              title: strings.ListLayoutListDescrition,\n              onClick: (_ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => this._handleSwitchLayout(item)\n            },\n            {\n              key: 'compact',\n              name: strings.ListLayoutCompact,\n              iconProps: {\n                iconName: 'AlignLeft'\n              },\n              canCheck: true,\n              checked: this.state.selectedView === 'compact',\n              ariaLabel: strings.ListLayoutAriaLabel.replace('{0}', strings.ListLayoutCompact).replace('{1}', selectedView === 'compact' ? strings.Selected : undefined),\n              title: strings.ListLayoutCompactDescription,\n              onClick: (_ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => this._handleSwitchLayout(item)\n            },\n            {\n              key: 'tiles',\n              name: 'Tiles',\n              iconProps: {\n                iconName: 'GridViewMedium'\n              },\n              canCheck: true,\n              checked: this.state.selectedView === 'tiles',\n              ariaLabel: strings.ListLayoutAriaLabel.replace('{0}', strings.ListLayoutTile).replace('{1}', selectedView === 'tiles' ? strings.Selected : undefined),\n              title: strings.ListLayoutTileDescription,\n              onClick: (_ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => this._handleSwitchLayout(item)\n            }\n          ]\n        }\n      }\n    ];\n    return farItems;\n  }\n\n  /**\n   * Called when users switch the view\n   */\n  private _handleSwitchLayout = (item?: IContextualMenuItem) => {\n    if (item) {\n      // Store the user's favourite layout\n      if (localStorage) {\n        localStorage.setItem(LAYOUT_STORAGE_KEY, item.key);\n      }\n\n      this.setState({\n        selectedView: item.key as ViewType\n      });\n    }\n  }\n\n  /**\n   * Gratuitous sorting\n   */\n  private _onColumnClick = (event: React.MouseEvent<HTMLElement>, column: IColumn): void => {\n    const { columns } = this.state;\n    let { items } = this.state;\n    let isSortedDescending = column.isSortedDescending;\n\n    // If we've sorted this column, flip it.\n    if (column.isSorted) {\n      isSortedDescending = !isSortedDescending;\n    }\n\n    // Sort the items.\n    items = items!.concat([]).sort((a, b) => {\n      const firstValue = a[column.fieldName || ''];\n      const secondValue = b[column.fieldName || ''];\n\n      if (isSortedDescending) {\n        return firstValue > secondValue ? -1 : 1;\n      } else {\n        return firstValue > secondValue ? 1 : -1;\n      }\n    });\n\n    // Reset the items and columns to match the state.\n    this.setState({\n      items: items,\n      columns: columns!.map(col => {\n        col.isSorted = col.key === column.key;\n\n        if (col.isSorted) {\n          col.isSortedDescending = isSortedDescending;\n        }\n\n        return col;\n      })\n    });\n  }\n\n  /**\n   * When a folder is opened, calls parent tab to navigate down\n   */\n  private _handleOpenFolder = (item: IFile) => {\n    // De-select the list item that was clicked, the item in the same position\n    this._selection.setAllSelected(false);\n    // item in the folder will appear selected\n    this.setState({\n      loadingState: LoadingState.loading,\n      filePickerResult: undefined\n    }, () => { this.props.onOpenFolder(item); });\n  }\n\n  /**\n   * Handles selected item change\n   */\n  private _itemSelectionChanged = (item?: IFile) => {\n    let selectedItem: IFile = null;\n    // Deselect item\n    if (item && this.state.filePickerResult && item.absoluteUrl == this.state.filePickerResult.fileAbsoluteUrl) {\n      this._selection.setAllSelected(false);\n      selectedItem = null;\n    }\n    else if (item) {\n      const selectedItemIndex = this.state.items.indexOf(item);\n      this._selection.selectToIndex(selectedItemIndex);\n      selectedItem = item;\n    }\n\n    let filePickerResult: IFilePickerResult = null;\n    if (selectedItem && !selectedItem.isFolder) {\n      filePickerResult = {\n        fileAbsoluteUrl: selectedItem.absoluteUrl,\n        fileName: GeneralHelper.getFileNameFromUrl(selectedItem.name),\n        fileNameWithoutExtension: GeneralHelper.getFileNameWithoutExtension(selectedItem.name),\n        spItemUrl: selectedItem.spItemUrl,\n        downloadFileContent: null\n      };\n    }\n    this.props.onChange(filePickerResult);\n    this.setState({\n      filePickerResult\n    });\n  }\n\n  /**\n   * Handles item click.\n   */\n  private _handleItemInvoked = (item: IFile) => {\n   // If a file is selected, open the library\n   if (item.isFolder) {\n     this._handleOpenFolder(item);\n   } else {\n     // Otherwise, remember it was selected\n     this._itemSelectionChanged(item);\n   }\n }\n\n  /**\n   * Gets all files in a library with a matchihg path\n   */\n  private async _getListItems(concatenateResults: boolean = false) {\n    const { libraryName, folderPath, accepts } = this.props;\n    let { items, nextPageQueryString } = this.state;\n\n    let filesQueryResult: FilesQueryResult = { items: [], nextHref: null };\n    const loadingState = concatenateResults ? LoadingState.loadingNextPage : LoadingState.loading;\n    // If concatenate results is set to false -> it's needed to load new data without nextPageUrl\n    nextPageQueryString = concatenateResults ? nextPageQueryString : null;\n\n    try {\n      this.setState({\n        loadingState,\n        nextPageQueryString\n      });\n      // Load files in the folder\n      filesQueryResult = await this.props.fileBrowserService.getListItems(libraryName, folderPath, accepts, nextPageQueryString);\n    } catch (error) {\n      filesQueryResult.items = null;\n      console.error(error.message);\n    } finally {\n\n\n      // Remove the null mark from the end of the items array\n      if (concatenateResults && items && items.length > 0 && items.length[items.length - 1] == null) {\n        // Remove the null mark\n        items.splice(items.length - 1, 1);\n      }\n      //concatenate results\n      const newItems = concatenateResults ? items.concat(filesQueryResult.items) : filesQueryResult.items;\n\n      // If there are more items to load -> add null mark at the end of the array\n      if (filesQueryResult.nextHref != null) {\n        newItems.push(null);\n      }\n\n      if (!concatenateResults) {\n        // de-select anything that was previously selected\n        this._selection.setAllSelected(false);\n      }\n\n      this.setState({\n        items: newItems,\n        nextPageQueryString: filesQueryResult.nextHref,\n        // isLoading: false,\n        // isLoadingNextPage: false\n        loadingState: LoadingState.idle\n      });\n    }\n  }\n}\n"],"sourceRoot":"../../../../../src"}