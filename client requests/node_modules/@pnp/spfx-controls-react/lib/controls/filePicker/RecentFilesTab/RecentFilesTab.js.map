{"version":3,"sources":["controls/filePicker/RecentFilesTab/RecentFilesTab.tsx"],"names":[],"mappings":"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","file":"controls/filePicker/RecentFilesTab/RecentFilesTab.js","sourcesContent":["import * as React from 'react';\n\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/components/Button';\nimport { Spinner } from 'office-ui-fabric-react/lib/Spinner';\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { List } from 'office-ui-fabric-react/lib/List';\nimport { IRectangle } from 'office-ui-fabric-react/lib/Utilities';\nimport { css } from \"@uifabric/utilities/lib/css\";\nimport { Selection, SelectionMode, SelectionZone } from 'office-ui-fabric-react/lib/Selection';\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\nimport { Check } from 'office-ui-fabric-react/lib/Check';\nimport { Placeholder } from '../../../Placeholder';\nimport { IRecentFile } from '../../../services/FilesSearchService.types';\nimport { IFilePickerResult } from '../FilePicker.types';\nimport { GeneralHelper } from '../../../Utilities';\nimport { IRecentFilesTabProps, IRecentFilesTabState } from '.';\n\nimport * as strings from 'ControlStrings';\nimport styles from './RecentFilesTab.module.scss';\n\n/**\n * Rows per page\n */\nconst ROWS_PER_PAGE = 3;\n\n/**\n * Maximum row height\n */\nconst MAX_ROW_HEIGHT = 250;\n\nexport default class RecentFilesTab extends React.Component<IRecentFilesTabProps, IRecentFilesTabState> {\n  private _columnCount: number;\n  private _columnWidth: number;\n  private _rowHeight: number;\n  private _selection: Selection;\n  private _listElem: List = undefined;\n\n  constructor(props: IRecentFilesTabProps) {\n    super(props);\n\n    this._selection = new Selection({\n      selectionMode: SelectionMode.single,\n      onSelectionChanged: this._onSelectionChanged\n    });\n\n\n    this.state = {\n      isLoading: true,\n      results: [],\n      filePickerResult: null\n    };\n  }\n\n  /**\n   * Gets the most recently used files\n   */\n  public async componentDidMount() {\n    const recentFilesResult = await this.props.fileSearchService.executeRecentSearch(this.props.accepts);\n    this._selection.setItems(recentFilesResult, true);\n\n    this.setState({\n      isLoading: false,\n      results: recentFilesResult\n    });\n  }\n\n  /**\n   * Render the tab\n   */\n  public render(): React.ReactElement<IRecentFilesTabProps> {\n    const { results,\n      isLoading } = this.state;\n    return (\n      <span className={styles.tabContainer}>\n        <span className={styles.tabHeaderContainer}>\n          <h2 className={styles.tabHeader}>{strings.RecentDocumentsHeader}</h2>\n        </span>\n        <span className={styles.tab}>\n          {isLoading ?\n            this._renderSpinner() :\n            results === undefined || results.length < 1 ? this._renderPlaceholder() : this._renderGridList()\n          }\n        </span>\n        <span className={styles.actionButtonsContainer}>\n          <span className={styles.actionButtons}>\n            <PrimaryButton\n              disabled={!this.state.filePickerResult}\n              onClick={() => this._handleSave()}\n              className={styles.actionButton}\n            >{strings.OpenButtonLabel}</PrimaryButton>\n            <DefaultButton onClick={() => this._handleClose()} className={styles.actionButton}>{strings.CancelButtonLabel}</DefaultButton>\n          </span>\n        </span>\n      </span>\n    );\n  }\n\n  private _onSelectionChanged = () => {\n    // Get the selected item\n    const selectedItems = this._selection.getSelection();\n    if (selectedItems && selectedItems.length > 0) {\n      //Get the selected key\n      const selectedKey: IRecentFile = selectedItems[0] as IRecentFile;\n      const filePickerResult: IFilePickerResult = {\n        fileAbsoluteUrl: selectedKey.fileUrl,\n        fileName: GeneralHelper.getFileNameFromUrl(selectedKey.fileUrl),\n        fileNameWithoutExtension: GeneralHelper.getFileNameWithoutExtension(selectedKey.fileUrl),\n        downloadFileContent: () => { return this.props.fileSearchService.downloadSPFileContent(selectedKey.fileUrl, GeneralHelper.getFileNameFromUrl(selectedKey.fileUrl)); }\n      };\n\n      // Save the selected file\n      this.setState({\n        filePickerResult\n      });\n    } else {\n      // Remove any selected file\n      this.setState({\n        filePickerResult: undefined\n      });\n    }\n    if (this._listElem) {\n      // Force the list to update to show the selection check\n      this._listElem.forceUpdate();\n    }\n  }\n\n  /**\n     * Calculates how many items there should be in the page\n     */\n  private _getItemCountForPage = (itemIndex: number, surfaceRect: IRectangle): number => {\n    if (itemIndex === 0) {\n      this._columnCount = Math.ceil(surfaceRect.width / MAX_ROW_HEIGHT);\n      this._columnWidth = Math.floor(surfaceRect.width / this._columnCount);\n      this._rowHeight = this._columnWidth;\n    }\n\n    return this._columnCount * ROWS_PER_PAGE;\n  }\n\n  /** Calculates the list \"page\" height (a.k.a. row) */\n  private _getPageHeight = (): number => {\n    return this._rowHeight * ROWS_PER_PAGE;\n  }\n\n\n  /**\n   * Renders a \"please wait\" spinner while we're loading\n   */\n  private _renderSpinner = (): JSX.Element => {\n    return <Spinner label={strings.Loading} />;\n  }\n\n  /**\n   * Renders a message saying that there are no recent files\n   */\n  private _renderPlaceholder = (): JSX.Element => {\n    return <Placeholder iconName='OpenFolderHorizontal'\n      iconText={strings.NoRecentFiles}\n      description={strings.NoRecentFilesDescription}\n    />;\n  }\n\n  /**\n   * Renders a grid list containing results\n   */\n  private _renderGridList = (): JSX.Element => {\n    return <span className={styles.recentGridList} role=\"grid\">\n      <FocusZone>\n        <SelectionZone selection={this._selection}\n          onItemInvoked={(item: IRecentFile) => this._handleItemInvoked(item)}>\n          <List\n            ref={this._linkElement}\n            items={this.state.results}\n            onRenderCell={this._onRenderCell}\n            getItemCountForPage={this._getItemCountForPage}\n            getPageHeight={this._getPageHeight}\n            renderedWindowsAhead={4}\n          />\n        </SelectionZone>\n      </FocusZone>\n    </span>;\n  }\n\n  /**\n   * Renders each result in its own cell\n   */\n  private _onRenderCell = (item: IRecentFile, index: number | undefined): JSX.Element => {\n    let isSelected: boolean = false;\n\n    if (this._selection && index !== undefined) {\n      isSelected = this._selection.isIndexSelected(index);\n    }\n\n    return (\n      <div\n        className={styles.gridListCell} role={\"gridCell\"}>\n        <div\n          className={css(styles.itemTile, styles.isFile, styles.hasThumbnail, isSelected ? styles.isSelected : undefined)}\n          role=\"link\"\n          aria-selected={isSelected}\n          data-is-draggable=\"false\"\n          data-is-focusable=\"true\"\n          data-selection-index={index}\n          data-selection-invoke=\"true\"\n          data-item-index={index}\n          data-automationid=\"ItemTile\"\n          style={{\n            width: this._columnWidth,\n            height: this._rowHeight\n          }}\n        >\n          <div className={styles.itemTileContent}>\n            <div className={styles.itemTileFile}>\n              <div className={styles.itemTileFileContainer}>\n                <div className={styles.itemTileThumbnail}>\n                  {/* <div className={styles.image}> */}\n                  <Image src={item.fileUrl} width={this._columnWidth} height={this._rowHeight} imageFit={ImageFit.cover} />\n                  {/* </div> */}\n                </div>\n                <div className={styles.itemTileCheckCircle}\n                  role='checkbox'\n                  aria-checked={isSelected}\n                  data-item-index={index} data-selection-toggle={true} data-automationid='CheckCircle'>\n                  <Check checked={isSelected} />\n                </div>\n                <div className={styles.itemTileNamePlate}>\n                  <div className={styles.itemTileName}>{item.name}</div>\n                  <div className={styles.itemTileSubText}>\n                    <span>{strings.EditedByNamePlate}{item.editedBy}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Gets called what a file is selected.\n   */\n  private _handleItemInvoked = (item: IRecentFile) => {\n    this._selection.setKeySelected(item.key, true, true);\n  }\n\n  /**\n   * Gets called when it is time to save the currently selected item\n   */\n  private _handleSave = () => {\n    this.props.onSave(this.state.filePickerResult);\n  }\n\n  /**\n   * Gets called when it is time to close (without saving)\n   */\n  private _handleClose = () => {\n    this.props.onClose();\n  }\n\n  /**\n   * Creates a ref to the list\n   */\n  private _linkElement = (e: any) => {\n    this._listElem = e;\n  }\n}\n"],"sourceRoot":"../../../../src"}