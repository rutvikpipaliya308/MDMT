{"version":3,"sources":["controls/chartControl/AccessibleChartTable.tsx"],"names":[],"mappings":"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","file":"controls/chartControl/AccessibleChartTable.js","sourcesContent":["import * as React from 'react';\nimport { IAccessibleChartTableState, IAccessibleChartTableProps } from './AccessibleChartTable.types';\nimport styles from './ChartControl.module.scss';\nimport { ChartDataSets } from 'chart.js';\nimport { Guid } from '@microsoft/sp-core-library';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\nimport { escape } from '@microsoft/sp-lodash-subset';\n\nexport class AccessibleChartTable extends React.Component<IAccessibleChartTableProps, IAccessibleChartTableState> {\n  public render(): React.ReactElement<IAccessibleChartTableProps> {\n    const {\n      onRenderTable,\n      data\n    } = this.props;\n\n    if (data === undefined || data.datasets === undefined || data.datasets.length < 1) {\n      // tslint:disable-next-line:no-null-keyword\n      return null;\n    }\n\n    if (onRenderTable !== undefined) {\n      return (\n        <div className={styles.accessibleTable}>\n          {onRenderTable()}\n        </div>);\n    }\n    const tableBody: JSX.Element[] = this._renderTableBody();\n\n    return (\n      <div className={css(styles.accessibleTable, this.props.className)}>\n        {tableBody && tableBody.length > 0 ?\n          <table >\n            {this._renderCaption()}\n            <thead>\n              {this._renderTableHeader()}\n            </thead>\n            <tbody>\n              {tableBody}\n            </tbody>\n          </table>\n          : undefined}\n      </div>\n    );\n  }\n\n  /**\n   * Adds a caption to the top of the accessible table\n   */\n  private _renderCaption(): JSX.Element {\n    const { summary } = this.props;\n    const title: string = this._getAccessibleTitle();\n    const summaryElement: JSX.Element = summary && <span>{escape(summary)}</span>;\n\n\n    return title || summary ?\n    <caption>\n    {escape(title)}\n    { title && summaryElement && <br/>}\n    { summaryElement }\n    </caption> : undefined;\n  }\n\n  /**\n   * Renders the table's headers for X and Y axes\n   */\n  private _renderTableHeader(): JSX.Element[] {\n    const { chartOptions,\n      data } = this.props;\n\n    const {\n      datasets\n    } = data;\n\n    // See if there are labels; we'll need them for the headers\n    let hasLabels: boolean = true;\n    datasets.forEach((dataSet: ChartDataSets) => {\n      if (dataSet.label === undefined) {\n        hasLabels = false;\n      }\n    });\n\n    // If there are no labels, there is no need to render headers\n    if (!hasLabels) {\n      return undefined;\n    }\n\n    // Get the Y Axis label\n    const yAxisLabel: string = chartOptions\n      && chartOptions.scales\n      && chartOptions.scales.yAxes\n      && chartOptions.scales.yAxes[0].scaleLabel\n      && chartOptions.scales.yAxes[0].scaleLabel.labelString;\n\n    // Generate the Y header row\n    const yHeaderRow: JSX.Element = yAxisLabel\n      && <tr key={`yHeader-${Guid.newGuid().toString()}`}>\n        <th></th>\n        <th colSpan={datasets.length}>{escape(yAxisLabel)}</th>\n      </tr>;\n\n    // Get the X axis label\n    const xAxisLabel: string =\n      chartOptions\n      && chartOptions.scales\n      && chartOptions.scales.xAxes\n      && chartOptions.scales.xAxes[0].scaleLabel\n      && chartOptions.scales.xAxes[0].scaleLabel.labelString;\n\n    // Generate the X asix table cells\n    const xHeaderCells: JSX.Element[] = datasets.map((dataSet: ChartDataSets) => {\n      return <th scope='col' key={`colHeading-${Guid.newGuid().toString()}`}>{escape(dataSet.label)}</th>;\n    });\n\n    // Generate the X axis header row\n    const xHeaderRow: JSX.Element = <tr key={`xHeader-${Guid.newGuid().toString()}`}>\n      <th>{escape(xAxisLabel)}</th>\n      {xHeaderCells}\n    </tr>;\n\n    return [\n      yHeaderRow,\n      xHeaderRow\n    ];\n  }\n\n  /**\n   * Renders an accessible table body with data from the chart\n   */\n  private _renderTableBody(): JSX.Element[] {\n    const {\n      data\n    } = this.props;\n\n    // The data must have matching labels to render\n    // otherwise this is pointless\n    return data.labels && data.labels.map((labelValue: string, rowIndex: number) => {\n      const cells: JSX.Element[] = data.datasets.map((dataSet: ChartDataSets, dsIndex: number) => {\n        return <td key={`dataCell-${Guid.newGuid().toString()}`}>{dataSet.data[rowIndex]}</td>;\n      });\n      return <tr key={`dataRow-${Guid.newGuid().toString()}`}>\n        <th key={`dataCellHEader-${Guid.newGuid().toString()}`}>{escape(labelValue)}</th>\n        {cells}\n      </tr>;\n    });\n  }\n\n  /**\n   * Gets the caption for the table.\n   * If no caption, gets the title.\n   */\n  private _getAccessibleTitle(): string {\n    const {\n      chartOptions,\n      caption\n    } = this.props;\n\n    // Is there a caption?\n    if (caption !== undefined) {\n      // Let's use it!\n      return caption;\n    }\n\n    // No caption. Look for the title\n    if (chartOptions && chartOptions.title && chartOptions.title.text) {\n      // ChartJs supports titles in a string array to make them multiline\n      if (chartOptions.title.text instanceof Array) {\n        // If we're using an array, join them into a single string\n        return chartOptions.title.text.join(' ');\n      } else {\n        // Return the title\n        return chartOptions.title.text;\n      }\n    }\n\n    // If all else fails, no titles for you\n    return undefined;\n  }\n}\n"],"sourceRoot":"../../../src"}