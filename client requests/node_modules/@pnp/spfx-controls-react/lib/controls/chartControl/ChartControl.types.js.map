{"version":3,"sources":["controls/chartControl/ChartControl.types.ts"],"names":[],"mappings":";;AA0HA;;GAEG;AACH,IAAY,YAoGX;AApGD,WAAY,YAAY;IACtB;;;OAGG;IACH,qEAAe,CAAA;IAEf;;;OAGG;IACH,qEAAe,CAAA;IAEf;;8DAE0D;IAC1D,qEAAe,CAAA;IAEf;;+DAE2D;IAC3D,qEAAe,CAAA;IAEf;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,gFAAoB,CAAA;IAEpB;;;OAGG;IACH,gFAAoB,CAAA;IAEpB;;;OAGG;IACH,gFAAoB,CAAA;IAEpB;;;OAGG;IACH,kFAAqB,CAAA;IAErB;;;OAGG;IACH,kFAAqB,CAAA;IAErB;;;OAGG;IACH,kFAAqB,CAAA;IAErB;;;OAGG;IACH,kFAAqB,CAAA;AACvB,CAAC,EApGW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAoGvB;AAkGD;;GAEG;AACH,oBAAoB;AACP,QAAA,SAAS,GAAG;IACvB,IAAI,EAAE,MAAmB;IACzB,GAAG,EAAE,KAAkB;IACvB,aAAa,EAAE,eAA4B;IAC3C,KAAK,EAAE,OAAoB;IAC3B,QAAQ,EAAE,UAAuB;IACjC,SAAS,EAAE,WAAwB;IACnC,MAAM,EAAE,QAAqB;IAC7B,GAAG,EAAE,KAAkB;IACvB,OAAO,EAAE,SAAsB;CAChC,CAAC;AACF,mBAAmB","file":"controls/chartControl/ChartControl.types.js","sourcesContent":["/*\n* Parameter descriptions are from https://www.chartjs.org/docs/latest, where possible.\n*/\nimport {\n  Chart,\n  ChartSize,\n  ChartData,\n  ChartOptions\n} from 'chart.js';\n\n/**\n * The properties for the ChartComponent object\n */\nexport interface IChartControlProps {\n  /**\n   * Provides an accessible version of the chart for\n   * users with visual impairment\n   */\n  accessibility?: IChartAccessibility;\n\n  /**\n  The data to be displayed in the chart\n  @type {ChartData}\n  */\n  data?: ChartData;\n\n  /**\n  Promise to the data to be displayed in the chart.\n  ChartControl will automatically display data when\n  promise returns.\n  @type {Promise<ChartData>}\n  */\n  datapromise?: Promise<Chart.ChartData>;\n\n  /**\n  If using datapromises, sets the content to display while loading the data.\n  @type {JSX.Element | Function}\n   */\n  loadingtemplate?: JSX.Element | Function;\n\n  /**\n  If using datapromises, sets the content to display when a promise is rejected\n  @type {JSX.Element | Function}\n   */\n  rejectedtemplate?: JSX.Element | Function;\n\n  /**\n  The options for the chart\n  @type {ChartOptions}\n   */\n  options?: ChartOptions;\n\n  /**\n   The type of chart to render\n   @type {ChartType}\n   */\n  type: ChartType;\n\n  /**\n   The custom CSS classname\n   @type {string}\n   */\n  className?: string;\n\n  /**\n   * Specifies one of the Office color palettes.\n   * If the background color is set in the datasets, this option will be overwritten.\n   */\n  palette?: ChartPalette;\n\n  /**\n   Plugins are the most efficient way to customize or change the default behavior of a chart.\n   They have been introduced in chart.js version 2.1.0 (global plugins only) and extended\n   in version 2.5.0 (per chart plugins and options).\n   @type {object[]} an array of plugins\n   */\n  plugins?: object[];\n\n  /**\n   * Enables or disables the chart control's ability to detect the environment themes.\n   * @default true\n   */\n  useTheme?: boolean;\n\n  /**\n   * Called if the event is of type 'mouseup' or 'click'.\n   * Called in the context of the chart and passed the event and an array of active elements.\n   * If onClick is defined in the chart options, this callback will be ignored.\n   * @param event\n   * @param activeElements\n   */\n  onClick?(event?: MouseEvent, activeElements?: Array<{}>): void;\n\n  /**\n   * Called when any of the events fire.\n   * Called in the context of the chart and passed the event and an array of active elements (bars, points, etc).\n   * If onHover is defined in the chart options, this callback will be ignored\n   * @param chart @type {IChartJs}\n   * @param event  @type {MouseEvent}\n   * @param activeElements @type {Array<{}>}\n   */\n  onHover?(chart: Chart, event: MouseEvent, activeElements: Array<{}>): void;\n\n  /**\n    * Called when a resize occurs. Gets passed two arguments: the chart instance and the new size.\n    * If onResize is defined in the chart options, this callback will be ignored\n    * OnResize doesn't get called when the chart doesn't use relative positioning.\n    * @param chart @type {IChartJs}  the chart instance\n    * @param newSize @type {IChartSize} the new size.\n    */\n  onResize?(chart: Chart, newSize: ChartSize): void;\n}\n\n/**\n * The state of a chart\n */\nexport interface IChartControlState {\n  isLoading: boolean;\n  data?: Chart.ChartData;\n  rejected?: {};\n}\n\n/**\n * The color palettes available within Office.\n */\nexport enum ChartPalette {\n  /**\n   * Office Colorful Palette 1:\n   * Blue, Orange, Grey, Gold, Blue, Green\n   */\n  OfficeColorful1,\n\n  /**\n  * Office Colorful Palette 2:\n  * Blue, Grey, Blue, Dark Blue, Dark Grey, Dark Blue\n   */\n  OfficeColorful2,\n\n  /**\n   * Office Colorful Palette 3:\n   *  Orange, Gold, Green, Brown, Dark Yellow, Dark Green */\n  OfficeColorful3,\n\n  /**\n   * Office Colorful Palette 4:\n   * Green, Blue, Gold, Dark Green, Dark Blue, Dark Yellow */\n  OfficeColorful4,\n\n  /**\n   * Monochromatic Palette 1:\n   * Blue gradient, dark to light\n   */\n  OfficeMonochromatic1,\n\n  /**\n   * Monochromatic Palette 2:\n   * Orange gradient, dark to light\n   */\n  OfficeMonochromatic2,\n\n  /**\n   * Monochromatic Palette 3:\n   * Grey gradient, dark to light\n   */\n  OfficeMonochromatic3,\n\n  /**\n   * Monochromatic Palette 4:\n   * Gold gradient, dark to light\n   */\n  OfficeMonochromatic4,\n\n  /**\n   * Monochromatic Palette 5:\n   * Blue gradient, dark to light\n   */\n  OfficeMonochromatic5,\n\n  /**\n   * Monochromatic Palette 6:\n   * Green gradient, dark to light\n   */\n  OfficeMonochromatic6,\n\n  /**\n   * Monochromatic Palette 7:\n   * Dark Grey, Light Grey, Grey, Dark Grey, Light Grey, Grey\n   */\n  OfficeMonochromatic7,\n\n  /**\n   * Monochromatic Palette 8:\n   * Blue gradient, light to dark\n   */\n  OfficeMonochromatic8,\n\n  /**\n   * Monochromatic Palette 9:\n   * Orange gradient, light to dark\n   */\n  OfficeMonochromatic9,\n\n  /**\n   * Monochromatic Palette 10:\n   * Grey gradient, light to dark\n   */\n  OfficeMonochromatic10,\n\n  /**\n   * Monochromatic Palette 11:\n   * Gold gradient, light to dark\n   */\n  OfficeMonochromatic11,\n\n  /**\n   * Monochromatic Palette 12:\n   * Blue gradient, light to dark\n   */\n  OfficeMonochromatic12,\n\n  /**\n   * Monochromatic Palette 13:\n   * Green gradient, light to dark\n   */\n  OfficeMonochromatic13\n}\n\nexport interface IChartAccessibility {\n  /**\n   * Indicates if the chart should render\n   * a hidden table that will appear for\n   * screen readers\n   * @default true\n   */\n  enable?: boolean;\n\n  /**\n   * Allows you to overwrite the default classname\n   * of the accessible table\n   */\n  className?: string;\n\n  /**\n   * Provides a caption for the accessible table\n   * @default defaults to the chart's title if any\n   */\n  caption?: string;\n\n  /**\n   * Provides a summary of the data\n   */\n  summary?: string;\n\n  /**\n   * Provides an alternate text for the chart.\n   */\n  alternateText?: string;\n\n  /**\n   * Allows you to custom-render your own accessible table\n   */\n  onRenderTable?: () => JSX.Element;\n}\n\n/**\n * Use this interface if you'd like to create a plugin\n */\nexport interface IChartPlugin {\n   beforeInit?(chartInstance: Chart, options?: {}): void;\n  afterInit?(chartInstance: Chart, options?: {}): void;\n\n  beforeUpdate?(chartInstance: Chart, options?: {}): void;\n  afterUpdate?(chartInstance: Chart, options?: {}): void;\n\n  beforeLayout?(chartInstance: Chart, options?: {}): void;\n  afterLayout?(chartInstance: Chart, options?: {}): void;\n\n  beforeDatasetsUpdate?(chartInstance: Chart, options?: {}): void;\n  afterDatasetsUpdate?(chartInstance: Chart, options?: {}): void;\n\n  // This is called at the start of a render.\n  // It is only called once, even if the animation will run\n  // for a number of frames. Use beforeDraw or afterDraw\n  // to do something on each animation frame\n  beforeRender?(chartInstance: Chart, options?: {}): void;\n  afterRender?(chartInstance: Chart, options?: {}): void;\n\n  // Easing is for animation\n  beforeDraw?(chartInstance: Chart, easing: string, options?: {}): void;\n  afterDraw?(chartInstance: Chart, easing: string, options?: {}): void;\n\n  // Before the datasets are drawn but after scales are drawn\n  beforeDatasetsDraw?(chartInstance: Chart, easing: string, options?: {}): void;\n  afterDatasetsDraw?(chartInstance: Chart, easing: string, options?: {}): void;\n\n  // Called before drawing the `tooltip`. If any plugin returns `false`,\n  // the tooltip drawing is cancelled until another `render` is triggered.\n  beforeTooltipDraw?(chartInstance: Chart, tooltipData?: {}, options?: {}): void;\n  // Called after drawing the `tooltip`. Note that this hook will not,\n  // be called if the tooltip drawing has been previously cancelled.\n  afterTooltipDraw?(chartInstance: Chart, tooltipData?: {}, options?: {}): void;\n\n  // Called when an event occurs on the chart\n  beforeEvent?(chartInstance: Chart, event: Event, options?: {}): void;\n  afterEvent?(chartInstance: Chart, event: Event, options?: {}): void;\n\n  resize?(chartInstance: Chart, newChartSize: Chart.ChartSize, options?: {}): void;\n  destroy?(chartInstance: Chart): void;\n}\n\n/**\n * The types of charts available\n */\nexport type ChartType = 'line'\n  | 'bar'\n  | 'horizontalBar'\n  | 'radar'\n  | 'doughnut'\n  | 'polarArea'\n  | 'bubble'\n  | 'pie'\n  | 'scatter';\n\n/**\n * The types of charts available\n */\n/* tslint:disable */\nexport const ChartType = {\n  Line: 'line' as ChartType,\n  Bar: 'bar' as ChartType,\n  HorizontalBar: 'horizontalBar' as ChartType,\n  Radar: 'radar' as ChartType,\n  Doughnut: 'doughnut' as ChartType,\n  PolarArea: 'polarArea' as ChartType,\n  Bubble: 'bubble' as ChartType,\n  Pie: 'pie' as ChartType,\n  Scatter: 'scatter' as ChartType\n};\n/* tslint:enable */\n"],"sourceRoot":"../../../src"}