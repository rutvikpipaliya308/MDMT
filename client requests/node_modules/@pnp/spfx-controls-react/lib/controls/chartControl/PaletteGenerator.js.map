{"version":3,"sources":["controls/chartControl/PaletteGenerator.ts"],"names":[],"mappings":"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","file":"controls/chartControl/PaletteGenerator.js","sourcesContent":["import { ChartPalette } from './ChartControl.types';\nimport {\n  OFFICE_COLORFUL1,\n  OFFICE_COLORFUL2,\n  OFFICE_COLORFUL3,\n  OFFICE_COLORFUL4,\n  OFFICE_MONOCHROMATIC1,\n  OFFICE_MONOCHROMATIC2,\n  OFFICE_MONOCHROMATIC3,\n  OFFICE_MONOCHROMATIC4,\n  OFFICE_MONOCHROMATIC5,\n  OFFICE_MONOCHROMATIC6,\n  OFFICE_MONOCHROMATIC7,\n  OFFICE_MONOCHROMATIC8,\n  OFFICE_MONOCHROMATIC9,\n  OFFICE_MONOCHROMATIC10,\n  OFFICE_MONOCHROMATIC11,\n  OFFICE_MONOCHROMATIC12,\n  OFFICE_MONOCHROMATIC13\n} from './ChartColorPalettes';\nimport * as Color from 'color';\n\n\n/**\n * Generates color palettes matching those you get within Office charts\n */\nexport class PaletteGenerator {\n\n  /**\n   * Returns an array of colors generated using one of the\n   * pre-defined Office palettes colors\n   * @param palette the pre-defined Office palette\n   * @param desiredLength the desired resulting array lenght\n   */\n  public static GetPalette(palette: ChartPalette, desiredLength: number): string[] {\n    // Add default color scheme if it wasn't provided\n    let paletteColors: string[] = [];\n    switch (palette) {\n      case ChartPalette.OfficeColorful4:\n        paletteColors = this.generateRepeatingPattern(OFFICE_COLORFUL4, desiredLength);\n        break;\n      case ChartPalette.OfficeColorful3:\n        paletteColors = this.generateRepeatingPattern(OFFICE_COLORFUL3, desiredLength);\n        break;\n      case ChartPalette.OfficeColorful2:\n        paletteColors = this.generateRepeatingPattern(OFFICE_COLORFUL2, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic1:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC1, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic2:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC2, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic3:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC3, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic4:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC4, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic5:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC5, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic6:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC6, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic7:\n        paletteColors = this.generateRepeatingPattern(OFFICE_MONOCHROMATIC7, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic8:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC8, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic9:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC9, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic10:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC10, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic11:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC11, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic12:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC12, desiredLength);\n        break;\n      case ChartPalette.OfficeMonochromatic13:\n        paletteColors = this.generateNonRepeatingGradient(OFFICE_MONOCHROMATIC13, desiredLength);\n        break;\n      default:\n        paletteColors = this.generateRepeatingPattern(OFFICE_COLORFUL1, desiredLength);\n        break;\n    }\n\n    return paletteColors;\n  }\n\n  /**\n   * ChartJs doesn't give cycle through colors if the length of array of colors is smaller than\n   * the data length. This function repeats the array as many times as needed to make sure each\n   * item has a background color.\n   * @param array the array to make bigger\n   * @param desiredLength the desired length\n   */\n  public static generateRepeatingPattern(array: string[], desiredLength: number): string[] {\n    if (desiredLength === 0) {\n      return [];\n    }\n\n    let a: string[] = array;\n    while (a.length * 2 <= desiredLength) {\n      a = a.concat(a);\n    }\n\n    if (a.length < desiredLength) {\n      a = a.concat(a.slice(0, desiredLength - a.length));\n    }\n    return a;\n  }\n\n  /**\n   * Some of the Office color palettes consist of\n   * a non-repeating gradient from one color to another,\n   * divided by the number of steps (or array elements)\n   * @param colorRange the colors to start and end with\n   * @param numSteps the number of gradient steps to generate\n   */\n  public static generateNonRepeatingGradient(colorRange: string[], numSteps: number): string[] {\n    const startHex: string = colorRange[0];\n    const endHex: string = colorRange[colorRange.length - 1];\n    const startRGB: number[] = this._hexToRGB(startHex);\n    const endRGB: number[] = this._hexToRGB(endHex);\n\n    const colors: string[] = [];\n\n    const factorStep: number = 1 / (numSteps - 1);\n    for (let index: number = 0; index < numSteps; index++) {\n      const interpolatedColor: number[] = this._interpolateColors(startRGB, endRGB, factorStep * index);\n      const hexColor: string = this._rgbToHex(interpolatedColor);\n      colors.push(hexColor);\n    }\n\n    return colors;\n  }\n\n  /**\n  * Converts a color or array of colors to a semi-opaque version\n  * @param colors a single color, or array of colors to convert\n  * @param alphaValue a value between 0 and 1 indicating the opacity (alpha)\n  */\n  public static alpha(colors: string | string[], alphaValue: number): string | string[] {\n    if (colors instanceof Array) {\n      return colors.map((color: string) => {\n        return Color(color).alpha(alphaValue).toString();\n      });\n    } else {\n      return Color(colors).alpha(alphaValue).toString();\n    }\n  }\n\n  /**\n   * Interpolates between two colors\n   * @param color1 start color\n   * @param color2 end color\n   * @param factor interpolation facotor\n   */\n  private static _interpolateColors(color1: number[], color2: number[], factor: number): number[] {\n    if (arguments.length < 3) {\n      factor = 0.5;\n    }\n\n    const result: number[] = color1.slice();\n    for (let i: number = 0; i < 3; i++) {\n      result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Converts a hex color to RGB\n   * @param hex the hex color string\n   */\n  private static _hexToRGB(hex: string): number[] {\n    const result: RegExpExecArray = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    // tslint:disable-next-line:no-bitwise\n    return result ? [\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16)\n    ] : undefined;\n  }\n\n  /**\n   * Converts an RGB colour to a hex string\n   * @param rgb The RGC color\n   */\n  private static _rgbToHex(rgb: number[]): string {\n    // tslint:disable-next-line:no-bitwise\n    return '#' + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);\n  }\n}\n"],"sourceRoot":"../../../src"}