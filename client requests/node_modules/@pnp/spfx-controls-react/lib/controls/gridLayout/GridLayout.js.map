{"version":3,"sources":["controls/gridLayout/GridLayout.tsx"],"names":[],"mappings":"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","file":"controls/gridLayout/GridLayout.js","sourcesContent":["import * as React from 'react';\nimport styles from './GridLayout.module.scss';\n\n// Used to render list grid\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { List } from 'office-ui-fabric-react/lib/List';\nimport { IRectangle, ISize } from 'office-ui-fabric-react/lib/Utilities';\n\nimport { IGridLayoutProps, IGridLayoutState } from './GridLayout.types';\n\nimport * as telemetry from '../../common/telemetry';\n\n// Get the constants from the SCSS so that we don't hard-code look and feel elements\nconst ROWS_PER_PAGE: number = +styles.rowsPerPage;\nconst MAX_ROW_HEIGHT: number = +styles.maxWidth;\nconst PADDING: number = +styles.padding;\nconst MIN_WIDTH: number = +styles.minWidth;\nconst COMPACT_THRESHOLD: number = +styles.compactThreshold;\n\n/**\n * Grid layout component\n */\nexport class GridLayout extends React.Component<IGridLayoutProps, IGridLayoutState> {\n\n   /**\n   * Constructor method\n   */\n  constructor(props: IGridLayoutProps) {\n    super(props);\n\n    telemetry.track('ReactGridLayout');\n  }\n\n  // Number of columns in a row\n  private _columnCount: number;\n\n  // Width of each column\n  private _columnWidth: number;\n\n  // The height of every column\n  private _rowHeight: number;\n\n  // Whether the control is compact (i.e.: less than 480px)\n  private _isCompact: boolean;\n\n  /**\n   * Renders the grid control\n   */\n  public render(): React.ReactElement<IGridLayoutProps> {\n    return (\n      <div className={styles.gridLayout} role=\"group\" aria-label={this.props.ariaLabel}>\n      <FocusZone>\n        <List\n          role=\"presentation\"\n          className={styles.gridLayoutList}\n          items={this.props.items}\n          getItemCountForPage={this._getItemCountForPage}\n          getPageHeight={this._getPageHeight}\n          onRenderCell={this._onRenderCell}\n          {...this.props.listProps}\n        />\n      </FocusZone>\n      </div>\n    );\n  }\n\n  /**\n   * Calculates how many items in the page\n   */\n  private _getItemCountForPage = (itemIndex: number, surfaceRect: IRectangle): number => {\n    if (itemIndex === 0) {\n      this._isCompact = surfaceRect.width < COMPACT_THRESHOLD;\n      if (this._isCompact) {\n        this._columnCount = 1;\n        this._columnWidth = surfaceRect.width;\n      } else {\n        this._columnCount = Math.ceil(surfaceRect.width / (MAX_ROW_HEIGHT));\n        this._columnWidth = Math.max(MIN_WIDTH, Math.floor(surfaceRect.width / this._columnCount) + Math.floor(PADDING / this._columnCount));\n        this._rowHeight = this._columnWidth;\n      }\n    }\n\n    return this._columnCount * ROWS_PER_PAGE;\n  }\n\n  /**\n   * Calculates the page height for the grid\n   */\n  private _getPageHeight = (): number => {\n    return this._rowHeight * ROWS_PER_PAGE;\n  }\n\n  /**\n   * Calls the passed onRenderCell\n   */\n  private _onRenderCell = (item: any, index: number | undefined): JSX.Element => {\n    const isCompact: boolean = this._isCompact;\n    const cellPadding: number = index % this._columnCount !== this._columnCount - 1 && !isCompact ? PADDING : 0;\n    const finalSize: ISize = { width: this._columnWidth, height: this._rowHeight };\n    const cellWidth: number = isCompact ? this._columnWidth + PADDING : this._columnWidth - PADDING;\n    return (\n      <div\n        style={{\n          width: `${cellWidth}px`,\n          marginRight: `${cellPadding}px`\n        }}\n      >\n          {this.props.onRenderGridItem(item, finalSize, isCompact)}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}