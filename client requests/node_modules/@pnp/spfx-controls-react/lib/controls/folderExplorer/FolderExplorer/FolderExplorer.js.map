{"version":3,"sources":["controls/folderExplorer/FolderExplorer/FolderExplorer.tsx"],"names":[],"mappings":"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","file":"controls/folderExplorer/FolderExplorer/FolderExplorer.js","sourcesContent":["import * as React from 'react';\nimport { TextField } from \"office-ui-fabric-react/lib/TextField\";\nimport styles from './FolderExplorer.module.scss';\nimport * as strings from 'ControlStrings';\nimport { Icon } from \"office-ui-fabric-react/lib/Icon\";\nimport { IFolderExplorerProps, IFolderExplorerState } from '.';\nimport { FolderExplorerService } from '../../../services/FolderExplorerService';\nimport { IFolder, IFolderExplorerService } from '../../../services/IFolderExplorerService';\nimport { NewFolder } from \"../NewFolder\";\nimport { Breadcrumb, IBreadcrumbItem } from \"office-ui-fabric-react/lib/Breadcrumb\";\nimport * as telemetry from '../../../common/telemetry';\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\n\n\nexport class FolderExplorer extends React.Component<IFolderExplorerProps, IFolderExplorerState> {\n\n  private _spService: IFolderExplorerService;\n  private _allLibraries: IFolder[] = [];\n  private _allFolders: IFolder[] = [];\n\n  constructor(props: IFolderExplorerProps) {\n    super(props);\n\n    telemetry.track('FolderExplorer');\n\n    this._spService = new FolderExplorerService(this.props.context.serviceScope);\n\n    this.state = {\n      foldersLoading: false,\n      folders: [],\n      selectedFolder: null,\n    };\n  }\n\n  public async componentDidMount() {\n    const targetFolder = this.props.defaultFolder ? this.props.defaultFolder : this.props.rootFolder;\n    const siteAbsoluteUrl: string = this.props.siteAbsoluteUrl || this.props.context.pageContext.web.absoluteUrl;\n    // get libraries if site absolute url does not end with folder relative url - if not retrieving document libraries by default\n    if (siteAbsoluteUrl.lastIndexOf(targetFolder.ServerRelativeUrl, siteAbsoluteUrl.length - targetFolder.ServerRelativeUrl.length) === -1) {\n      this._allLibraries = await this._spService.GetDocumentLibraries(siteAbsoluteUrl);\n    }\n    await this._getFolders(targetFolder);\n\n  }\n\n  public render(): React.ReactElement<IFolderExplorerProps> {\n    const siteAbsoluteUrl: string = this.props.siteAbsoluteUrl || this.props.context.pageContext.web.absoluteUrl;\n    return (\n      <div>\n        {!this.props.hiddenBreadcrumb &&\n          this._getBreadcrumbDOM()\n        }\n        <div style={{ opacity: this.state.foldersLoading ? 0.8 : 1, }}>\n          {!this.props.hiddenFilterBox && this._allFolders.length > 0 &&\n            <div>\n              <SearchBox className={styles.filterBox} placeholder={strings.FolderFilterBoxPlaceholder} onSearch={this._onChangeFilterText} onChange={this._onChangeFilterText} />\n            </div>\n          }\n          {this.state.folders.length === 0 &&\n            <div className={styles.status}>\n              <span role=\"status\">{this.state.foldersLoading ? strings.FolderExplorerLoading : strings.FolderExplorerNoItems}</span>\n            </div>\n          }\n          {this.state.folders.length > 0 &&\n            <div>\n              {this.state.folders.map((folder) => {\n                return (\n                  <div className={styles.libraryItem} onClick={() => { this._getFolders(folder); }}>\n                    <Icon iconName=\"FabricFolder\" className={styles.folderIcon} />\n                    {folder.Name}\n                  </div>\n                );\n              })\n              }\n            </div>\n          }\n          {this.props.canCreateFolders && (this.state.selectedFolder && this.state.selectedFolder.ServerRelativeUrl !== this.props.context.pageContext.web.serverRelativeUrl) &&\n            <NewFolder context={this.props.context}\n              siteAbsoluteUrl={siteAbsoluteUrl}\n              selectedFolder={this.state.selectedFolder}\n              addSubFolder={this._addSubFolder}></NewFolder>\n          }\n        </div>\n      </div>\n    );\n\n  }\n\n  /**\n * Get HTML elements for rendering breadcrumb\n */\n  private _getBreadcrumbDOM = (): JSX.Element => {\n    let breadCrumbDOM = null;\n\n    let breadCrumbItems = this._getCurrentBreadcrumbItems();\n    let overflowIndex = breadCrumbItems.length > 1 ? 1 : 0;\n    breadCrumbDOM = <Breadcrumb items={breadCrumbItems} className={styles.breadcrumbPath} maxDisplayedItems={3} overflowIndex={overflowIndex} />;\n\n    return breadCrumbDOM;\n  }\n\n  /**\n * Get breadcrumb items\n * @returns an array of IBreadcrumbItem objects\n */\n  private _getCurrentBreadcrumbItems = (): IBreadcrumbItem[] => {\n    let items: IBreadcrumbItem[] = [];\n\n    if (this.props.initialBreadcrumbItems) {\n      items = [...this.props.initialBreadcrumbItems];\n    }\n\n    let rootItem: IBreadcrumbItem = { text: this.props.rootFolder.Name, key: 'Root-Item', onClick: this._getFolders.bind(this, this.props.rootFolder) };\n    items.push(rootItem);\n\n    if (this.state.selectedFolder && this.state.selectedFolder.ServerRelativeUrl !== this.props.rootFolder.ServerRelativeUrl) {\n      const folderPathSplit = this.state.selectedFolder.ServerRelativeUrl.replace(this.props.rootFolder.ServerRelativeUrl, '').split('/');\n      let folderPath = this.props.rootFolder.ServerRelativeUrl;\n      folderPathSplit.forEach((folderName, index) => {\n        if (folderName !== '') {\n          folderPath += '/' + folderName;\n          let itemText = folderName;\n          // check if library and if so use the Title of the library that was retrieved in case it's not the same as the url part\n          const lib = this._allLibraries.filter(l => l.ServerRelativeUrl === folderPath);\n          if (lib.length === 1) {\n            itemText = lib[0].Name;\n          }\n\n          let folderItem: IBreadcrumbItem = { text: itemText, key: `Folder-${index.toString()}`, onClick: this._getFolders.bind(this, { Name: folderName, ServerRelativeUrl: folderPath }) };\n          items.push(folderItem);\n        }\n      });\n    }\n\n    items[items.length - 1].isCurrentItem = true;\n    return items;\n  }\n\n  /**\n * Filter list of folders based on user input\n * @param filterText - The text to use when filtering the collection\n */\n  private _onChangeFilterText = (filterText: string): void => {\n    this.setState({\n      folders: filterText ? this._allFolders.filter(f => f.Name.toLowerCase().indexOf(filterText.toLowerCase()) > -1) : this._allFolders\n    });\n  }\n\n  /**\n* Load sub folders and files within a given folder\n* @param folder - Name of the folder\n*/\n  private _getFolders = async (folder: IFolder): Promise<void> => {\n\n    this.setState({ foldersLoading: true });\n    try {\n\n      const siteAbsoluteUrl: string = this.props.siteAbsoluteUrl || this.props.context.pageContext.web.absoluteUrl;\n      // check if absolute url ends with relative url to know if we are at the site level\n      if (siteAbsoluteUrl.lastIndexOf(folder.ServerRelativeUrl, siteAbsoluteUrl.length - folder.ServerRelativeUrl.length) !== -1) {\n        // site level, get libraries\n        if (this._allLibraries.length > 0) {\n          this._allFolders = [...this._allLibraries];\n        } else {\n          this._allLibraries = await this._spService.GetDocumentLibraries(siteAbsoluteUrl);\n          this._allFolders = [...this._allLibraries];\n        }\n      } else {\n        // library/folder level, get folders\n        this._allFolders = await this._spService.GetFolders(siteAbsoluteUrl, folder.ServerRelativeUrl);\n      }\n      this.setState({ folders: this._allFolders, selectedFolder: folder, foldersLoading: false });\n\n      // callback to parent component\n      this.props.onSelect(folder);\n\n    } catch (error) {\n      this.setState({ selectedFolder: null, foldersLoading: false });\n      console.error(error);\n    }\n  }\n\n  /**\n  * Add new subfolder to current folder\n  */\n  private _addSubFolder = async (newFolder: IFolder): Promise<void> => {\n    if (newFolder) {\n\n      // add folder if a folder with the same name does not exist yet\n      if (!this._allFolders.some(f => f.Name === newFolder.Name)) {\n        // update both list of folders\n        this._allFolders.push(newFolder);\n        this.setState({\n          folders: this._allFolders\n        });\n      }\n    }\n  }\n}\n"],"sourceRoot":"../../../../src"}