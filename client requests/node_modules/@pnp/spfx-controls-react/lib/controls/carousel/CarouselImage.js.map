{"version":3,"sources":["controls/carousel/CarouselImage.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+DAA4C;AAC5C,0DAAmE;AACnE,kEAA2D;AA+E3D;IAA2C,iCAAyD;IAApG;;IAuDA,CAAC;IAtDQ,8BAAM,GAAb;QACQ,IAAA,eAkBQ,EAjBZ,sBAAQ,EACR,gBAAwB,EAAxB,qDAAwB,EACxB,YAAG,EACH,gBAAK,EACL,4BAAW,EACX,cAAiB,EAAjB,sCAAiB,EACjB,0CAAkB,EAClB,wBAAS,EACT,gBAAK,EACL,8BAAY,EACZ,sBAAQ,EACR,sCAAgB,EAChB,8BAAY,EACZ,kCAAc,EACd,0BAAU,EACV,8CAAoB,EACpB,sCAAgB,CACH;QAEf,IAAI,OAAO,GAAuB,IAAI,CAAC;QACvC,IAAM,UAAU,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,WAAW,CAAC;QAE5C,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,aAAa,SAAoB,CAAC;YACtC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,EAAE,CAAC,CAAC,OAAM,CAAC,WAAW,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACrC,aAAa,GAAG,8BAAM,SAAS,EAAE,oBAAoB,EAAE,KAAK,EAAE,gBAAgB,IAAG,WAAW,CAAQ,CAAC;gBACvG,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,aAAa,GAAG,WAAW,CAAC;gBAC9B,CAAC;YACH,CAAC;YACD,IAAM,cAAc,GAAG,6BAAK,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,EAAE,KAAK,EAAE,YAAY;gBAC9F,CAAC,CAAC,KAAK,IAAI,8BAAM,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,KAAK,EAAE,cAAc,CAAC,EAAE,KAAK,EAAE,UAAU,IAAG,KAAK,CAAQ;gBAChG,aAAa,CACV,CAAC;YAEP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,OAAO,GAAG,2BAAG,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,IAAG,cAAc,CAAK,CAAC;YAC/D,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,OAAO,GAAG,cAAc,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,aAAa,EAAE,SAAS,EAAE,kBAAkB,GAAG,8BAAM,CAAC,cAAc,GAAG,8BAAM,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,KAAK;YACnI,oBAAC,aAAK,IAAC,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,GAAI;YACxG,OAAO,CACJ,CACP,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAvDA,AAuDC,CAvD0C,KAAK,CAAC,SAAS,GAuDzD","file":"controls/carousel/CarouselImage.js","sourcesContent":["import * as React from 'react';\nimport styles from './Carousel.module.scss';\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\n\n/**\n * Carousel Image component props\n */\nexport interface ICarouselImageProps {\n  /**\n   * Image source\n   */\n  imageSrc: string;\n  /**\n   * Specifies the method to be used to fit image\n   */\n  imageFit?: ImageFit;\n  /**\n   * URL to be opened when clicking on details\n   */\n  url?: string;\n  /**\n   * Title to display in details\n   */\n  title?: string;\n  /**\n   * Description to show in details.\n   * Can be either a string (text) or JSX.Element to show HTML\n   */\n  description?: string | JSX.Element;\n  /**\n   * Target of the URL to open\n   */\n  target?: '_blank' | '_self';\n  /**\n   * Specifies if the details are shown on hover or constantly\n   */\n  showDetailsOnHover?: boolean;\n  /**\n   * Class to apply to the component\n   */\n  className?: string;\n  /**\n   * Styles to apply to the component\n   */\n  style?: React.CSSProperties;\n  /**\n   * Class to apply to the image control\n   */\n  imgClassName?: string;\n  /**\n   * Styles to apply to the image control\n   */\n  imgStyle?: React.CSSProperties;\n  /**\n   * Class to apply to the details control\n   */\n  detailsClassName?: string;\n  /**\n   * Styles to apply to the details control\n   */\n  detailsStyle?: React.CSSProperties;\n  /**\n   * Class to apply to the title control\n   */\n  titleClassName?: string;\n  /**\n   * Styles to apply to the title control\n   */\n  titleStyle?: React.CSSProperties;\n  /**\n   * Class to apply to the description control\n   */\n  descriptionClassName?: string;\n  /**\n   * Class to apply to the description control\n   */\n  descriptionStyle?: React.CSSProperties;\n}\n\nexport interface ICarouselImageState { }\n\nexport default class CarouselImage extends React.Component<ICarouselImageProps, ICarouselImageState> {\n  public render(): React.ReactElement<ICarouselImageProps> {\n    const {\n      imageSrc,\n      imageFit = ImageFit.none,\n      url,\n      title,\n      description,\n      target = '_blank',\n      showDetailsOnHover,\n      className,\n      style,\n      imgClassName,\n      imgStyle,\n      detailsClassName,\n      detailsStyle,\n      titleClassName,\n      titleStyle,\n      descriptionClassName,\n      descriptionStyle\n    } = this.props;\n\n    let details: JSX.Element | null = null;\n    const hasDetails = !!title || !!description;\n\n    if (hasDetails) {\n      let descriptionEl: JSX.Element | null;\n      if (description) {\n        if (typeof(description) === 'string') {\n          descriptionEl = <span className={descriptionClassName} style={descriptionStyle}>{description}</span>;\n        }\n        else {\n          descriptionEl = description;\n        }\n      }\n      const detailsContent = <div className={css(styles.details, detailsClassName)} style={detailsStyle}>\n        {!!title && <span className={css(styles.title, titleClassName)} style={titleStyle}>{title}</span>}\n        {descriptionEl}\n      </div>;\n\n      if (url) {\n        details = <a href={url} target={target}>{detailsContent}</a>;\n      }\n      else {\n        details = detailsContent;\n      }\n    }\n\n    return (\n      <div className={css(styles.carouselImage, className, showDetailsOnHover ? styles.dynamicDetails : styles.staticDetails)} style={style}>\n        <Image className={css(styles.image, imgClassName)} style={imgStyle} imageFit={imageFit} src={imageSrc} />\n        {details}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}