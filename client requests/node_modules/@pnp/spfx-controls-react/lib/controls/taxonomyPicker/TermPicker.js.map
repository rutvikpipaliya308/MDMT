{"version":3,"sources":["controls/taxonomyPicker/TermPicker.tsx"],"names":[],"mappings":"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","file":"controls/taxonomyPicker/TermPicker.js","sourcesContent":["import * as React from 'react';\nimport { BasePicker, IBasePickerProps, IPickerItemProps } from 'office-ui-fabric-react/lib/Pickers';\nimport { IPickerTerm, IPickerTerms } from './ITermPicker';\nimport SPTermStorePickerService from './../../services/SPTermStorePickerService';\nimport styles from './TaxonomyPicker.module.scss';\nimport { ITaxonomyPickerProps } from './ITaxonomyPicker';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport * as strings from 'ControlStrings';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\nimport { ExtensionContext } from '@microsoft/sp-extension-base';\nimport { ITermSet } from \"../../services/ISPTermStorePickerService\";\nimport { EmptyGuid } from '../../Common';\n\nexport class TermBasePicker extends BasePicker<IPickerTerm, IBasePickerProps<IPickerTerm>>\n{\n\n}\n\nexport interface ITermPickerState {\n  terms: IPickerTerms;\n}\n\nexport interface ITermPickerProps {\n  termPickerHostProps: ITaxonomyPickerProps;\n  context: IWebPartContext | ExtensionContext;\n  disabled: boolean;\n  value: IPickerTerms;\n  allowMultipleSelections : boolean;\n  isTermSetSelectable?: boolean;\n  disabledTermIds?: string[];\n  disableChildrenOfDisabledParents?: boolean;\n  placeholder?: string;\n\n  onChanged: (items: IPickerTerm[]) => void;\n}\n\nexport default class TermPicker extends React.Component<ITermPickerProps, ITermPickerState> {\n  private allTerms: ITermSet = null;\n  private termsService: SPTermStorePickerService;\n  /**\n   * Constructor method\n   */\n  constructor(props: any) {\n    super(props);\n    this.onRenderItem = this.onRenderItem.bind(this);\n    this.onRenderSuggestionsItem = this.onRenderSuggestionsItem.bind(this);\n    this.onFilterChanged = this.onFilterChanged.bind(this);\n    this.onGetTextFromItem = this.onGetTextFromItem.bind(this);\n\n    this.state = {\n      terms: this.props.value\n    };\n    this.termsService = new SPTermStorePickerService(this.props.termPickerHostProps, this.props.context);\n  }\n\n  /**\n   * componentWillReceiveProps method\n   */\n  public componentWillReceiveProps(nextProps: ITermPickerProps) {\n    // check to see if props is different to avoid re-rendering\n    let newKeys = nextProps.value.map(a => a.key);\n    let currentKeys = this.state.terms.map(a => a.key);\n    if (newKeys.sort().join(',') !== currentKeys.sort().join(',')) {\n      this.setState({ terms: nextProps.value });\n    }\n  }\n\n  /**\n   * Renders the item in the picker\n   */\n  protected onRenderItem(term: IPickerItemProps<IPickerTerm>) {\n    return (\n      <div className={styles.pickedTermRoot}\n           key={term.index}\n           data-selection-index={term.index}\n           data-is-focusable={!term.disabled && true}>\n        <span className={styles.pickedTermText}>{term.item.name}</span>\n        {\n          !term.disabled && (\n            <span className={styles.pickedTermCloseIcon}\n              onClick={term.onRemoveItem}>\n              <Icon iconName=\"Cancel\" />\n            </span>\n          )\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Renders the suggestions in the picker\n   */\n  protected onRenderSuggestionsItem(term: IPickerTerm) {\n    let termParent = term.termSetName;\n    let termTitle = `${term.name} [${term.termSetName}]`;\n    if (term.path.indexOf(\";\") !== -1) {\n      let splitPath = term.path.split(\";\");\n      termParent = splitPath[splitPath.length - 2];\n      splitPath.pop();\n      termTitle = `${term.name} [${term.termSetName}:${splitPath.join(':')}]`;\n    }\n    return (\n      <div className={styles.termSuggestion} title={termTitle}>\n        <div>{term.name}</div>\n        <div className={styles.termSuggestionSubTitle}> {strings.TaxonomyPickerInLabel} {termParent ? termParent : strings.TaxonomyPickerTermSetLabel}</div>\n      </div>\n    );\n  }\n\n  /**\n   * When Filter Changes a new search for suggestions\n   */\n  private async onFilterChanged(filterText: string, tagList: IPickerTerm[]): Promise<IPickerTerm[]> {\n    if (filterText !== \"\") {\n      const {\n        termPickerHostProps,\n        context,\n        isTermSetSelectable\n      } = this.props;\n\n      let terms: IPickerTerm[] = await this.termsService.searchTermsByName(filterText);\n      // Check if the termset can be selected\n      if (isTermSetSelectable && !termPickerHostProps.anchorId) {\n        // Retrieve the current termset\n        const termSet = await this.termsService.getTermSet();\n        // Check if termset was retrieved and if it contains the filter value\n        if (termSet && termSet.Name.toLowerCase().indexOf(filterText.toLowerCase()) === 0) {\n          // Add the termset to the suggestion list\n          terms.push({\n            key: this.termsService.cleanGuid(termSet.Id),\n            name: termSet.Name,\n            path: \"\",\n            termSet: this.termsService.cleanGuid(termSet.Id)\n          });\n        }\n      }\n      // Filter out the terms which are already set\n      const filteredTerms: IPickerTerm[] = [];\n      const { disabledTermIds, disableChildrenOfDisabledParents } = this.props;\n      for (const term of terms) {\n        let canBePicked = true;\n\n        // Check if term is not disabled\n        if (disabledTermIds && disabledTermIds.length > 0) {\n          // Check if current term need to be disabled\n          if (disabledTermIds.indexOf(term.key) !== -1) {\n            canBePicked = false;\n          } else {\n            // Check if child terms need to be disabled\n            if (disableChildrenOfDisabledParents) {\n              // Check if terms were already retrieved\n              if (!this.allTerms) {\n                this.allTerms = await this.termsService.getAllTerms(this.props.termPickerHostProps.termsetNameOrID);\n              }\n\n              // Check if there are terms retrieved\n              if (this.allTerms.Terms && this.allTerms.Terms.length > 0) {\n                // Find the disabled parents\n                const disabledParents = this.allTerms.Terms.filter(t => disabledTermIds.indexOf(t.Id) !== -1);\n                // Check if disabled parents were found\n                if (disabledParents && disabledParents.length > 0) {\n                  // Check if the current term lives underneath a disabled parent\n                  const findTerm = disabledParents.filter(pt => term.path.indexOf(pt.PathOfTerm) !== -1);\n                  if (findTerm && findTerm.length > 0) {\n                    canBePicked = false;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (canBePicked) {\n          // Only retrieve the terms which are not yet tagged\n          if (tagList.filter(tag => tag.key === term.key).length === 0) {\n            filteredTerms.push(term);\n          }\n        }\n      }\n      return filteredTerms;\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n\n  /**\n   * gets the text from an item\n   */\n  private onGetTextFromItem(item: any): any {\n    return item.name;\n  }\n\n    /**\n   * Render method\n   */\n  public render(): JSX.Element {\n    const {\n      disabled,\n      value,\n      onChanged,\n      allowMultipleSelections,\n      placeholder\n    } = this.props;\n\n    const {\n      terms\n    } = this.state;\n\n    return (\n      <div>\n        <TermBasePicker\n          disabled={disabled}\n          onResolveSuggestions={this.onFilterChanged}\n          onRenderSuggestionsItem={this.onRenderSuggestionsItem}\n          getTextFromItem={this.onGetTextFromItem}\n          onRenderItem={this.onRenderItem}\n          defaultSelectedItems={value}\n          selectedItems={terms}\n          onChange={onChanged}\n          itemLimit={!allowMultipleSelections ? 1 : undefined}\n          className={styles.termBasePicker}\n          inputProps={{\n            placeholder: placeholder\n          }}\n        />\n      </div>\n    );\n\n  }\n}\n"],"sourceRoot":"../../../src"}