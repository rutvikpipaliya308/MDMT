{"version":3,"sources":["controls/taxonomyPicker/TermParent.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,8DAA0E;AAG1E,mDAAsF;AACtF,+BAA0B;AAE1B,2EAAkD;AAClD,gEAA+D;AAC/D,wCAA0C;AAE1C;;GAEG;AACH;IAAwC,8BAAmD;IAKzF,oBAAY,KAAuB;QAAnC,YACE,kBAAM,KAAK,CAAC,SAQb;QAsCD;;WAEG;QACK,4BAAsB,GAAG,UAAC,EAAgC,EAAE,SAAkB;YACpF,KAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAClE,CAAC,CAAA;QAjDC,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACvC,KAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI;SACf,CAAC;QACF,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACnD,CAAC;IAED;;OAEG;IACI,uCAAkB,GAAzB;QAAA,iBAoBC;QAnBC,2CAA2C;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CACxB,CAAC;YACC,IAAM,YAAU,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAxD,CAAwD,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7G,EAAE,CAAC,CAAC,YAAU,CAAC,CAAC,CAAC;gBACf,yDAAyD;gBACzD,IAAM,gBAAc,GAAM,YAAU,CAAC,UAAU,MAAG,CAAC;gBACnD,IAAI,CAAC,WAAW,GAAG,YAAU,CAAC,IAAI,CAAC;gBACnC,IAAI,WAAW,GAAa,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,gBAAc,CAAC,MAAM,CAAC,KAAK,gBAAc,IAAI,CAAC,CAAC,EAAE,KAAK,YAAU,CAAC,EAAE,EAA7F,CAA6F,CAAC,CAAC;gBAEnJ,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI;oBAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,YAAU,CAAC,SAAS,CAAC;oBAEvD,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;YAC5B,CAAC;QACH,CAAC;IACH,CAAC;IAGD;;OAEG;IACK,iCAAY,GAApB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC/B,CAAC,CAAC;IACL,CAAC;IAWD;;OAEG;IACI,2BAAM,GAAb;QAAA,iBA6EC;QA5EC,0DAA0D;QAC1D,IAAM,UAAU,GAAwB;YACtC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,GAAG,MAAM;SAChD,CAAC;QAEF,IAAI,OAAO,GAAgB,gCAAO,CAAC;QAEnC,sCAAsC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,eAAa,GAAG,EAAE,CAAC;gBACvB,OAAO,GAAG,CACR,6BAAK,KAAK,EAAE,UAAU,IAElB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,IAAI;oBAClB,IAAI,QAAQ,GAAG,KAAK,CAAC;oBACrB,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,IAAI,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACxE,qEAAqE;wBACrE,QAAQ,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC9D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACb,kCAAkC;4BAClC,eAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBACtC,CAAC;oBACH,CAAC;oBAED,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;wBAChD,8BAA8B;wBAC9B,IAAM,UAAU,GAAG,eAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC;wBAChF,QAAQ,GAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjD,CAAC;oBAED,MAAM,CAAC,oBAAC,cAAI,IAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EACZ,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,EAC9B,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,EACnC,eAAe,EAAE,KAAI,CAAC,KAAK,CAAC,eAAe,EAC3C,cAAc,EAAE,KAAI,CAAC,KAAK,CAAC,cAAc,EACzC,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,EACnC,kBAAkB,EAAE,KAAI,CAAC,KAAK,CAAC,kBAAkB,EACjD,aAAa,EAAE,KAAI,CAAC,KAAK,CAAC,aAAa,GAAI,CAAC;gBAC3D,CAAC,CAAC,CAEA,CACP,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,GAAG,6BAAK,SAAS,EAAK,oCAAM,CAAC,QAAQ,SAAI,oCAAM,CAAC,IAAM,IAAG,OAAO,CAAC,qBAAqB,CAAO,CAAC;YACvG,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,GAAG,oBAAC,iBAAO,IAAC,IAAI,EAAE,qBAAW,CAAC,MAAM,GAAI,CAAC;QAClD,CAAC;QAGD,MAAM,CAAC,CACL;YACE,6BAAK,SAAS,EAAK,oCAAM,CAAC,QAAQ,SAAI,oCAAM,CAAC,OAAO,UAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,oCAAM,CAAC,iBAAiB,GAAG,EAAE,CAAE,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY;gBAC5K,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,6BAAY,GAAG,8BAAa,EAAE,GAAG,EAAE,OAAO,CAAC,yBAAyB,EAAE,KAAK,EAAE,OAAO,CAAC,yBAAyB,GAAI;gBAEhJ,iCAAiC;gBACjC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;oBACxD,oBAAC,mBAAQ,IAAC,SAAS,EAAE,oCAAM,CAAC,eAAe,EACjC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,OAAO,EAApC,CAAoC,CAAC,CAAC,MAAM,IAAI,CAAC,EAC7F,QAAQ,EAAE,IAAI,CAAC,sBAAsB,GAAI;gBAErD,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,yBAAQ,GAAG,4BAAW,EAAE,GAAG,EAAE,OAAO,CAAC,yBAAyB,EAAE,KAAK,EAAE,OAAO,CAAC,yBAAyB,GAAI;gBAE1I,IAAI,CAAC,KAAK,CAAC,QAAQ;oBACjB,IAAI,CAAC,WAAW;oBAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAEvB;YACN,6BAAK,KAAK,EAAE,UAAU,IACnB,OAAO,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IACH,iBAAC;AAAD,CA7IA,AA6IC,CA7IuC,KAAK,CAAC,SAAS,GA6ItD","file":"controls/taxonomyPicker/TermParent.js","sourcesContent":["import * as React from 'react';\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\nimport { ITermParentProps, ITermParentState } from './ITaxonomyPicker';\nimport { ITerm } from '../../services/ISPTermStorePickerService';\nimport { EXPANDED_IMG, COLLAPSED_IMG, TERMSET_IMG, TERM_IMG } from './TaxonomyPicker';\nimport Term from './Term';\n\nimport styles from './TaxonomyPicker.module.scss';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport * as strings from 'ControlStrings';\n\n/**\n * Term Parent component, represents termset or term if anchorId\n */\nexport default class TermParent extends React.Component<ITermParentProps, ITermParentState> {\n\n  private _terms : ITerm[];\n  private _anchorName : string;\n\n  constructor(props: ITermParentProps) {\n    super(props);\n\n    this._terms = this.props.termset.Terms;\n    this.state = {\n      loaded: true,\n      expanded: true\n    };\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  /**\n   * componentWillMount\n   */\n  public componentWillMount() {\n    // fix term depth if anchroid for rendering\n    if (this.props.anchorId)\n    {\n      const anchorTerm = this._terms.filter(t => t.Id.toLowerCase() === this.props.anchorId.toLowerCase()).shift();\n      if (anchorTerm) {\n        // Append ';' separator, as a suffix to anchor term path.\n        const anchorTermPath = `${anchorTerm.PathOfTerm};`;\n        this._anchorName = anchorTerm.Name;\n        let anchorTerms : ITerm[] = this._terms.filter(t => t.PathOfTerm.substring(0, anchorTermPath.length) === anchorTermPath && t.Id !== anchorTerm.Id);\n\n        anchorTerms = anchorTerms.map(term => {\n          term.PathDepth = term.PathDepth - anchorTerm.PathDepth;\n\n          return term;\n        });\n\n        this._terms = anchorTerms;\n      }\n    }\n  }\n\n\n  /**\n   * Handle the click event: collapse or expand\n   */\n  private _handleClick() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  }\n\n\n  /**\n   * The term set selection changed\n   */\n  private termSetSelectionChange = (ev: React.FormEvent<HTMLElement>, isChecked: boolean): void => {\n    this.props.termSetSelectedChange(this.props.termset, isChecked);\n  }\n\n\n  /**\n   * Default React render method\n   */\n  public render(): JSX.Element {\n    // Specify the inline styling to show or hide the termsets\n    const styleProps: React.CSSProperties = {\n      display: this.state.expanded ? 'block' : 'none'\n    };\n\n    let termElm: JSX.Element = <div />;\n\n    // Check if the terms have been loaded\n    if (this.state.loaded) {\n      if (this._terms.length > 0) {\n        let disabledPaths = [];\n        termElm = (\n          <div style={styleProps}>\n            {\n              this._terms.map(term => {\n                let disabled = false;\n                if (this.props.disabledTermIds && this.props.disabledTermIds.length > 0) {\n                  // Check if the current term ID exists in the disabled term IDs array\n                  disabled = this.props.disabledTermIds.indexOf(term.Id) !== -1;\n                  if (disabled) {\n                    // Push paths to the disabled list\n                    disabledPaths.push(term.PathOfTerm);\n                  }\n                }\n\n                if (this.props.disableChildrenOfDisabledParents) {\n                  // Check if parent is disabled\n                  const parentPath = disabledPaths.filter(p => term.PathOfTerm.indexOf(p) !== -1);\n                  disabled = parentPath && parentPath.length > 0;\n                }\n\n                return <Term key={term.Id}\n                             term={term}\n                             termset={this.props.termset.Id}\n                             activeNodes={this.props.activeNodes}\n                             changedCallback={this.props.changedCallback}\n                             multiSelection={this.props.multiSelection}\n                             disabled={disabled}\n                             termActions={this.props.termActions}\n                             updateTaxonomyTree={this.props.updateTaxonomyTree}\n                             spTermService={this.props.spTermService} />;\n              })\n            }\n          </div>\n        );\n      } else {\n        termElm = <div className={`${styles.listItem} ${styles.term}`}>{strings.TaxonomyPickerNoTerms}</div>;\n      }\n    } else {\n      termElm = <Spinner type={SpinnerType.normal} />;\n    }\n\n\n    return (\n      <div>\n        <div className={`${styles.listItem} ${styles.termset} ${(!this.props.anchorId && this.props.isTermSetSelectable) ? styles.termSetSelectable : \"\"}`} onClick={this._handleClick}>\n          <img src={this.state.expanded ? EXPANDED_IMG : COLLAPSED_IMG} alt={strings.TaxonomyPickerExpandTitle} title={strings.TaxonomyPickerExpandTitle} />\n          {\n            // Show the termset selection box\n            (!this.props.anchorId && this.props.isTermSetSelectable) &&\n            <Checkbox className={styles.termSetSelector}\n                      checked={this.props.activeNodes.filter(a => a.path === \"\" && a.key === a.termSet).length >= 1}\n                      onChange={this.termSetSelectionChange} />\n          }\n          <img src={this.props.anchorId ? TERM_IMG : TERMSET_IMG} alt={strings.TaxonomyPickerMenuTermSet} title={strings.TaxonomyPickerMenuTermSet} />\n          {\n            this.props.anchorId ?\n              this._anchorName :\n              this.props.termset.Name\n          }\n        </div>\n        <div style={styleProps}>\n          {termElm}\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}