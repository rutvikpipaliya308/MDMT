{"version":3,"sources":["controls/taxonomyPicker/termActions/TermActionsControl.tsx"],"names":[],"mappings":"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","file":"controls/taxonomyPicker/termActions/TermActionsControl.js","sourcesContent":["import * as React from 'react';\nimport { ITermAction, ITermActionsControlProps, ITermActionsControlState, TermActionsDisplayMode, TermActionsDisplayStyle, ActionChange } from './ITermsActions';\nimport { DropdownTermAction } from './DropdownTermAction';\nimport ButtonTermAction from './ButtonTermAction';\n\nexport default class TermActionsControl extends React.Component<ITermActionsControlProps, ITermActionsControlState> {\n\n  constructor(props: ITermActionsControlProps) {\n    super(props);\n\n    const { termActions } = this.props;\n\n    const displayMode = termActions.termActionsDisplayMode ? termActions.termActionsDisplayMode : TermActionsDisplayMode.buttons;\n    const displayStyle = termActions.termActionsDisplayStyle ? termActions.termActionsDisplayStyle : TermActionsDisplayStyle.text;\n\n    this.state = {\n      availableActions: [],\n      displayMode,\n      displayStyle,\n      termActionChanges: {}\n    };\n  }\n\n  /**\n   * componentWillMount lifecycle hook\n   */\n  public componentWillMount(): void {\n    this.getAvailableActions();\n  }\n\n  /**\n   * Get the available term actions\n   */\n  private async getAvailableActions(): Promise<void> {\n    const { term, termActions } = this.props;\n\n    // Prepare list of the available actions\n    const availableActions: ITermAction[] = [];\n\n    if (termActions.actions) {\n      for (const action of termActions.actions) {\n        const available = await action.applyToTerm(term, this.props.termActionCallback, this.setActionStateForTerm);\n        if (available) {\n          availableActions.push(action);\n        }\n      }\n    }\n\n    this.setState({\n      availableActions\n    });\n  }\n\n  /**\n   * Sets the visibility of a certain action\n   * @param isHidden\n   */\n  private setActionStateForTerm = (actionId: string, termId: string, type: \"disabled\" | \"hidden\", value: boolean) => {\n    this.setState((prevState: ITermActionsControlState) => {\n      let termActionChanges = prevState.termActionChanges;\n      if (!termActionChanges[termId]) {\n        termActionChanges[termId] = [];\n      }\n\n      const actionChanges = termActionChanges[termId].filter((action: ActionChange) => action.actionId === actionId);\n      if (actionChanges.length === 0) {\n        termActionChanges[termId].push({\n          actionId,\n          [type]: value\n        });\n      } else {\n        actionChanges[0][type] = value;\n      }\n\n      return {\n        termActionChanges\n      };\n    });\n  }\n\n  /**\n   * Default React render method\n   */\n  public render(): React.ReactElement<ITermActionsControlProps> {\n    const { term } = this.props;\n    const { displayStyle, displayMode, availableActions, termActionChanges } = this.state;\n\n    if (!availableActions || availableActions.length <= 0 || !term) {\n      return null;\n    }\n\n    return (\n      <div>\n        {\n          displayMode == TermActionsDisplayMode.dropdown ?\n            <DropdownTermAction key={`DdAction-${term.Id}`} termActions={availableActions} term={term} displayStyle={displayStyle} termActionCallback={this.props.termActionCallback} spTermService={this.props.spTermService} termActionChanges={termActionChanges} />\n            :\n            <ButtonTermAction key={`BtnAction-${term.Id}`} termActions={availableActions} term={term} displayStyle={displayStyle} termActionCallback={this.props.termActionCallback} spTermService={this.props.spTermService} termActionChanges={termActionChanges} />\n        }\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../../src"}