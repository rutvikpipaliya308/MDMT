{"version":3,"sources":["controls/taxonomyPicker/termActions/ButtonTermAction.tsx"],"names":[],"mappings":"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","file":"controls/taxonomyPicker/termActions/ButtonTermAction.js","sourcesContent":["import * as React from 'react';\nimport { CommandBarButton } from 'office-ui-fabric-react/lib/Button';\nimport { ITermAction, TermActionsDisplayStyle, IConcreteTermActionProps, ActionChange } from './ITermsActions';\nimport { getTermActionChange } from './getTermActionChange';\n\nexport default class ButtonTermAction extends React.Component<IConcreteTermActionProps> {\n\n  /**\n   * componentWillMount lifecycle hook\n   */\n  public componentWillMount(): void {\n    this.checkForImmediateInvocations();\n  }\n\n  /**\n   * Prepares the command bar button\n   */\n  private prepareCommandBarButton = (termAction: ITermAction): { name: string, text: string, iconName: string, btnTitle: string } => {\n    let name: string = \"\";\n    let text: string = \"\";\n    let iconName: string = \"\";\n    let btnTitle: string = \"\";\n\n    if ((this.props.displayStyle && (this.props.displayStyle === TermActionsDisplayStyle.text || this.props.displayStyle === TermActionsDisplayStyle.textAndIcon))) {\n      name = termAction.title;\n      text = termAction.title;\n    }\n    if (this.props.displayStyle && (this.props.displayStyle === TermActionsDisplayStyle.icon || this.props.displayStyle === TermActionsDisplayStyle.textAndIcon)) {\n      iconName = termAction.iconName;\n    }\n\n    btnTitle = termAction.title;\n\n    return { name, text, iconName, btnTitle };\n  }\n\n  /**\n   * Gets the action button styling\n   */\n  private getTermActionActionButtonStyle = (): React.CSSProperties => {\n    let result: React.CSSProperties = {\n      backgroundColor: \"transparent\",\n      width: this.props.displayStyle === TermActionsDisplayStyle.icon ? \"32px\" : null,\n      height: \"32px\"\n    };\n\n    return result;\n  }\n\n  /**\n   * Check if there are action to immediatly invoke\n   */\n  private checkForImmediateInvocations() {\n    const { termActions } = this.props;\n    for (const action of termActions) {\n      if (action.invokeActionOnRender) {\n        this.onActionExecute(action);\n      }\n    }\n  }\n\n  /**\n   * On action execution\n   */\n  private onActionExecute = async (termAction: ITermAction) => {\n    const updateAction = await termAction.actionCallback(this.props.spTermService, this.props.term);\n    this.props.termActionCallback(updateAction);\n  }\n\n\n  /**\n   * Render all the term actions\n   */\n  private renderTermActions() {\n    const { term, termActions, termActionChanges } = this.props;\n    // Get term action changes\n    const tac: ActionChange[] = termActionChanges[term.Id];\n\n    return (\n      termActions && termActions.map(termAction => {\n        const { name, text, iconName, btnTitle } = this.prepareCommandBarButton(termAction);\n        const { actionDisabled, actionHidden } = getTermActionChange(tac, termAction);\n\n        if (actionHidden) {\n          return null;\n        }\n\n        if (termAction.hidden && actionHidden === null) {\n          return null;\n        }\n\n        return (\n            <div>\n              <CommandBarButton split={true}\n                                onClick={() => { this.onActionExecute(termAction); }}\n                                iconProps={{\n                                  iconName: iconName || null,\n                                  style: { display: iconName ? null : \"none\"}\n                                }}\n                                disabled={actionDisabled}\n                                text={text}\n                                title={btnTitle}\n                                name={name}\n                                key={term.Id}\n                                style={this.getTermActionActionButtonStyle()} />\n            </div>\n          );\n        }\n      )\n    );\n  }\n\n\n  /**\n   * Default React render method\n   */\n  public render(): React.ReactElement<IConcreteTermActionProps> {\n    // Get termActions\n    const allActions = this.renderTermActions().filter(action => action !== null);\n\n    if (allActions && allActions.length > 0) {\n      return (\n        <div style={{ display: 'flex', alignItems: 'stretch', height: '32px' }}>\n          {allActions}\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n"],"sourceRoot":"../../../../src"}