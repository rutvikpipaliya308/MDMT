{"version":3,"sources":["controls/taxonomyPicker/termActions/TermActions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,sBAA0D;AAC1D,gEAAwD;AAExD;;GAEG;AACH;IAME,yBAAmB,KAAa,EAAS,QAAmC;QAAnC,yBAAA,EAAA,2BAAmC;QAA5E,iBAEC;QAFkB,UAAK,GAAL,KAAK,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAA2B;QALrE,OAAE,GAAW,mBAAmB,CAAC;QASjC,gBAAW,GAAG,UAAC,WAAkB;YACtC,IAAM,SAAS,GAAG,4BAAS,CAAC,KAAI,CAAC,eAAe,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,IAAI,WAAW,CAAC,EAAE,EAAzB,CAAyB,CAAC,CAAC;YACrF,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAA;QAEM,mBAAc,GAAG,UAAO,aAAuC,EAAE,WAAkB;;;;;;wBAGlF,YAAY,GAAiB,IAAI,CAAC;wBACtC,KAAA,IAAI,CAAA;wBAAW,qBAAM,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,CAAC,EAAA;;wBAAhE,GAAK,OAAO,GAAG,SAAiD,CAAC;wBAEjE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;4BACb,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BACjD,YAAY,GAAG;gCACb,gBAAgB,EAAE,aAAU,CAAC,eAAe;gCAC5C,KAAK,EAAE,SAAS;6BACjB,CAAC;4BACF,MAAM,gBAAC,YAAY,EAAC;wBACtB,CAAC;wBACD,sBAAO,IAAI,EAAC;;;wBAEZ,OAAO,CAAC,GAAG,CAAC,OAAK,CAAC,CAAC;wBACnB,sBAAO,IAAI,EAAC;;;;aAEf,CAAA;QA9BC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;IA8BH,sBAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,0CAAe","file":"controls/taxonomyPicker/termActions/TermActions.js","sourcesContent":["import { ITerm } from \"../../../services/ISPTermStorePickerService\";\nimport SPTermStorePickerService from \"../../../services/SPTermStorePickerService\";\n\nimport { ITermAction, UpdateAction, UpdateType } from \".\";\nimport { findIndex } from \"@microsoft/sp-lodash-subset\";\n\n/**\n * TermAction is responsible to obtain different labels for the term.\n */\nexport class TermLabelAction implements ITermAction {\n  public id: string = \"TermLabelActionId\";\n\n  private _labels: string[];\n  private _processedTerms: ITerm[];\n\n  constructor(public title: string, public iconName: string = \"LocaleLanguage\") {\n    this._processedTerms = [];\n  }\n\n  public applyToTerm = (currentTerm: ITerm): boolean => {\n    const termIndex = findIndex(this._processedTerms, term => term.Id == currentTerm.Id);\n    if (termIndex >= 0) {\n      return false;\n    }\n    return true;\n  }\n\n  public actionCallback = async (spTermService: SPTermStorePickerService, currentTerm: ITerm): Promise<UpdateAction> => {\n    try {\n      // Set pointer to loading\n      let updateAction: UpdateAction = null;\n      this._labels = await spTermService.getTermLabels(currentTerm.Id);\n\n      if (this._labels) {\n        let termLabel: string = this._labels.join(\" ; \");\n        updateAction = {\n          updateActionType: UpdateType.updateTermLabel,\n          value: termLabel\n        };\n        return updateAction;\n      }\n      return null;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n}\n"],"sourceRoot":"../../../../src"}