{"version":3,"sources":["controls/taxonomyPicker/Term.tsx"],"names":[],"mappings":"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","file":"controls/taxonomyPicker/Term.js","sourcesContent":["import * as React from 'react';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { ITermProps, ITermState } from './ITaxonomyPicker';\n\nimport styles from './TaxonomyPicker.module.scss';\nimport TermActionsControl from './termActions/TermActionsControl';\nimport { UpdateAction, UpdateType } from './termActions';\n\n\n/**\n * Term component\n * Renders a selectable term\n */\nexport default class Term extends React.Component<ITermProps, ITermState> {\n\n  constructor(props: ITermProps) {\n    super(props);\n\n    // Check if current term is selected\n    let active = this.props.activeNodes.filter(item => item.key === this.props.term.Id);\n\n    this.state = {\n      selected: active.length > 0,\n      termLabel: this.props.term.Name,\n      hidden: false,\n      disabled: false\n    };\n\n    this._handleChange = this._handleChange.bind(this);\n  }\n\n  /**\n   * Handle the checkbox change trigger\n   */\n  private _handleChange(ev: React.FormEvent<HTMLElement>, isChecked: boolean) {\n    this.setState({\n      selected: isChecked\n    });\n    this.props.changedCallback(this.props.term, isChecked);\n  }\n\n  /**\n   * Lifecycle event hook when component retrieves new properties\n   * @param nextProps\n   * @param nextContext\n   */\n  public componentWillReceiveProps?(nextProps: ITermProps, nextContext: any): void {\n    // If multi-selection is turned off, only a single term can be selected\n    if (!this.props.multiSelection) {\n      let active = nextProps.activeNodes.filter(item => item.key === this.props.term.Id);\n      this.state = {\n        selected: active.length > 0,\n        termLabel: this.state.termLabel\n      };\n    }\n  }\n\n  /**\n   * Get the right class name for the term\n   */\n  private getClassName() {\n    if (this.props.term.IsDeprecated) {\n      return styles.termDisabled;\n    }\n\n    if (!this.props.term.IsAvailableForTagging) {\n      return styles.termNoTagging;\n    }\n\n    return styles.termEnabled;\n  }\n\n  private termActionCallback = (updateAction: UpdateAction | null): void => {\n    if (!updateAction) {\n      return;\n    }\n\n    if (updateAction.updateActionType === UpdateType.updateTermLabel) {\n      this.setState({\n        termLabel: updateAction.value as string\n      });\n    } else if (updateAction.updateActionType === UpdateType.hideTerm) {\n      this.setState({\n        hidden: updateAction.value as boolean\n      });\n    } else if (updateAction.updateActionType === UpdateType.disableTerm) {\n      this.setState({\n        disabled: updateAction.value as boolean\n      });\n    } else if (updateAction.updateActionType === UpdateType.selectTerm) {\n      // Only select the term when not disabled or hidden\n      if (!this.state.disabled && !this.state.hidden) {\n        this._handleChange(null, updateAction.value as boolean);\n      }\n    } else {\n      this.props.updateTaxonomyTree();\n    }\n  }\n\n  /**\n   * Default React render\n   */\n  public render(): JSX.Element {\n    const styleProps: React.CSSProperties = {\n      marginLeft: `${(this.props.term.PathDepth * 30)}px`\n    };\n    const checkBoxStyle: React.CSSProperties = {\n      display: \"inline-flex\"\n    };\n\n    if (this.state.hidden) {\n      return null;\n    }\n\n    return (\n      <div>\n        <div className={`${styles.listItem} ${styles.term}`} style={styleProps}>\n          <div>\n            <Checkbox\n              checked={this.state.selected}\n              style={checkBoxStyle}\n              disabled={this.props.term.IsDeprecated || !this.props.term.IsAvailableForTagging || this.props.disabled || this.state.disabled}\n              className={this.getClassName()}\n              label={this.state.termLabel}\n              onChange={this._handleChange} />\n          </div>\n          {\n            this.props.termActions &&\n            <TermActionsControl term={this.props.term}\n                                termActions={this.props.termActions}\n                                termActionCallback={this.termActionCallback}\n                                spTermService={this.props.spTermService} />\n          }\n        </div>\n      </div>\n\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}