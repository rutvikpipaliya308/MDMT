{"version":3,"sources":["controls/listView/IListView.ts"],"names":[],"mappings":";;AAAA,sEAAkF;AAGzE,wBAHW,2BAAa,CAGX;AAEtB,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,qDAAa,CAAA;IACb,uDAAU,CAAA;AACZ,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","file":"controls/listView/IListView.js","sourcesContent":["import { Selection, SelectionMode } from 'office-ui-fabric-react/lib/DetailsList';\nimport { IColumn, IGroup } from 'office-ui-fabric-react/lib/components/DetailsList';\n\nexport { SelectionMode };\n\nexport enum GroupOrder {\n  ascending = 1,\n  descending\n}\n\nexport interface IListViewProps {\n  /**\n   * Specify the name of the file URL path which will be used to show the file icon.\n   */\n  iconFieldName?: string;\n  /**\n   * The items to render.\n   */\n  items: any[];\n  /**\n   * The fields you want to view in your list view\n   */\n  viewFields?: IViewField[];\n  /**\n   * The fields you want to group your list view by\n   */\n  groupByFields?: IGrouping[];\n  /**\n   * Boolean value to indicate if the component should render in compact mode.\n   * Set to false by default\n   */\n  compact?: boolean;\n  /**\n   * Specify the item selection mode.\n   * By default this is set to none.\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * Selection event that passes the selected item(s)\n   */\n  selection?: (items: any[]) => void;\n  /**\n   * The index of the items to be select by default\n   */\n  defaultSelection?: number[];\n  /**\n   * Specify the placeholder for the filter text box. Default 'Search'\n   */\n  filterPlaceHolder?: string;\n  /**\n   * Specify if the filter text box should be rendered.\n   */\n  showFilter?: boolean;\n  /**\n   * Specify the initial filter to be applied to the list.\n   */\n  defaultFilter?: string;\n}\n\nexport interface IListViewState {\n  /**\n   * Current value of the filter input\n   */\n  filterValue?: string;\n  /**\n   * The items to render.\n   */\n  items: any[];\n  /**\n   * Given column defitions.\n   * If none are provided, default columns will be created based on the item's properties.\n   */\n  columns?: IColumn[];\n\n  groups?: IGroup[];\n}\n\nexport interface IGrouping {\n  name: string;\n  order: GroupOrder;\n}\n\nexport interface IGroupsItems {\n  items: any[];\n  groups: IGroup[];\n}\n\nexport interface IViewField {\n\n  /**\n   * Name of the field\n   */\n  name: string;\n  /**\n   * Name of the field that will be used as the column title\n   */\n  displayName?: string;\n  /**\n   * Specify the field name that needs to be used to render a link\n   */\n  linkPropertyName?: string;\n  /**\n   * Specify if you want to enable column sorting\n   */\n  sorting?: boolean;\n  /**\n   * Specify the minimum width of the column\n   */\n  minWidth?: number;\n  /**\n   * Specify the maximum width of the column\n   */\n  maxWidth?: number;\n  /**\n   * Determines if the column can be resized.\n   */\n  isResizable?: boolean;\n  /**\n   * Override the render method of the field\n   */\n  render?: (item?: any, index?: number, column?: IColumn) => any;\n}\n"],"sourceRoot":"../../../src"}