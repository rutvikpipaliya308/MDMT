{"version":3,"sources":["controls/listView/ListView.tsx"],"names":[],"mappings":"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","file":"controls/listView/ListView.js","sourcesContent":["import * as React from 'react';\nimport { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, IGroup } from 'office-ui-fabric-react/lib/DetailsList';\nimport { IListViewProps, IListViewState, IViewField, IGrouping, GroupOrder } from './IListView';\nimport { IColumn, IGroupRenderProps } from 'office-ui-fabric-react/lib/components/DetailsList';\nimport { findIndex, has, sortBy, isEqual, cloneDeep } from '@microsoft/sp-lodash-subset';\nimport { FileTypeIcon, IconType } from '../fileTypeIcon/index';\nimport * as strings from 'ControlStrings';\nimport { IGroupsItems } from './IListView';\nimport * as telemetry from '../../common/telemetry';\nimport filter = require('lodash/filter');\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\nimport { Guid } from '@microsoft/sp-core-library';\n\n/**\n * File type icon component\n */\nexport class ListView extends React.Component<IListViewProps, IListViewState> {\n  private _selection: Selection;\n  private originalItems: any[];\n  private originalGroups: IGroup[];\n  private originalColumns: IColumn[];\n\n  constructor(props: IListViewProps) {\n    super(props);\n\n    telemetry.track('ReactListView', {\n      viewFields: !!props.viewFields,\n      groupByFields: !!props.groupByFields,\n      selectionMode: !!props.selectionMode,\n      selection: !!props.selection,\n      defaultSelection: !!props.defaultSelection\n    });\n\n    // Initialize state\n    this.state = {\n      items: [],\n      filterValue: this.props.defaultFilter\n    };\n\n    if (this.props.selection) {\n      // Initialize the selection\n      this._selection = new Selection({\n        // Create the event handler when a selection changes\n        onSelectionChanged: () => this.props.selection(this._selection.getSelection())\n      });\n    }\n  }\n\n  /**\n   * Lifecycle hook when component is mounted\n   */\n  public componentDidMount(): void {\n    this._processProperties();\n  }\n\n  /**\n   * Lifecycle hook when component did update after state or property changes\n   * @param prevProps\n   * @param prevState\n   */\n  public componentDidUpdate(prevProps: IListViewProps, prevState: IListViewState): void {\n\n    if (!isEqual(prevProps, this.props)) {\n      // select default items\n      this._setSelectedItems();\n      // Reset the selected items\n      if (this._selection) {\n        this._selection.setItems(this.props.items, true);\n      }\n      // Process list view properties\n      this._processProperties();\n    }\n  }\n\n  /**\n   * Select all the items that should be selected by default\n   */\n  private _setSelectedItems(): void {\n    if (this.props.items &&\n      this.props.items.length > 0 &&\n      this.props.defaultSelection &&\n      this.props.defaultSelection.length > 0) {\n      for (const index of this.props.defaultSelection) {\n        if (index > -1) {\n          this._selection.setIndexSelected(index, true, false);\n        }\n      }\n    }\n  }\n\n  /**\n   * Specify result grouping for the list rendering\n   * @param items\n   * @param groupByFields\n   */\n  private _getGroups(items: any[], groupByFields: IGrouping[], level: number = 0, startIndex: number = 0): IGroupsItems {\n    // Group array which stores the configured grouping\n    let groups: IGroup[] = [];\n    let updatedItemsOrder: any[] = [];\n    // Check if there are groupby fields set\n    if (groupByFields) {\n      const groupField = groupByFields[level];\n      // Check if grouping is configured\n      if (groupByFields && groupByFields.length > 0) {\n        // Create grouped items object\n        const groupedItems = {};\n        items.forEach((item: any) => {\n          let groupName = item[groupField.name];\n          // Check if the group name exists\n          if (typeof groupName === \"undefined\") {\n            // Set the default empty label for the field\n            groupName = strings.ListViewGroupEmptyLabel;\n          }\n          // Check if group name is a number, this can cause sorting issues\n          if (typeof groupName === \"number\") {\n            groupName = `${groupName}.`;\n          }\n\n          // Check if current group already exists\n          if (typeof groupedItems[groupName] === \"undefined\") {\n            // Create a new group of items\n            groupedItems[groupName] = [];\n          }\n          groupedItems[groupName].push(item);\n        });\n\n        // Sort the grouped items object by its key\n        const sortedGroups = {};\n        let groupNames = Object.keys(groupedItems);\n        groupNames = groupField.order === GroupOrder.ascending ? groupNames.sort() : groupNames.sort().reverse();\n        groupNames.forEach((key: string) => {\n          sortedGroups[key] = groupedItems[key];\n        });\n\n        // Loop over all the groups\n        for (const groupItems in sortedGroups) {\n          // Retrieve the total number of items per group\n          const totalItems = groupedItems[groupItems].length;\n          // Create the new group\n          const group: IGroup = {\n            name: groupItems === \"undefined\" ? strings.ListViewGroupEmptyLabel : groupItems,\n            key: groupItems === \"undefined\" ? strings.ListViewGroupEmptyLabel : groupItems,\n            startIndex: startIndex,\n            count: totalItems,\n          };\n          // Check if child grouping available\n          if (groupByFields[level + 1]) {\n            // Get the child groups\n            const subGroup = this._getGroups(groupedItems[groupItems], groupByFields, (level + 1), startIndex);\n            subGroup.items.forEach((item) => {\n              updatedItemsOrder.push(item);\n            });\n            group.children = subGroup.groups;\n          } else {\n            // Add the items to the updated items order array\n            groupedItems[groupItems].forEach((item) => {\n              updatedItemsOrder.push(item);\n            });\n          }\n          // Increase the start index for the next group\n          startIndex = startIndex + totalItems;\n          groups.push(group);\n        }\n      }\n    }\n\n    return {\n      items: updatedItemsOrder,\n      groups\n    };\n  }\n\n  /**\n   * Process all the component properties\n   */\n  private _processProperties() {\n    const { items, iconFieldName, viewFields, groupByFields, showFilter } = this.props;\n\n    let tempState: IListViewState = cloneDeep(this.state);\n    let columns: IColumn[] = null;\n    // Check if a set of items was provided\n    if (typeof items !== 'undefined' && items !== null) {\n      tempState.items = this._flattenItems(items);\n    }\n\n    // Check if an icon needs to be shown\n    if (iconFieldName) {\n      if (columns === null) { columns = []; }\n      const iconColumn = this._createIconColumn(iconFieldName);\n      columns.push(iconColumn);\n    }\n\n    // Check if view fields were provided\n    if (viewFields) {\n      if (columns === null) { columns = []; }\n      columns = this._createColumns(viewFields, columns);\n    }\n\n    // Add the columns to the temporary state\n    tempState.columns = columns;\n\n    // Add grouping to the list view\n    const grouping = this._getGroups(tempState.items, groupByFields);\n    if (grouping.groups.length > 0) {\n      tempState.groups = grouping.groups;\n      // Update the items\n      tempState.items = grouping.items;\n    } else {\n      tempState.groups = null;\n    }\n\n    // Store the original items and groups objects\n    this.originalItems = tempState.items;\n    this.originalGroups = tempState.groups;\n    this.originalColumns = tempState.columns;\n\n    // Check if component needs to be filtered\n    const { filterValue } = this.state;\n    if (filterValue && showFilter) {\n      this.setState({\n        columns: tempState.columns\n      });\n      this._updateFilterValue(filterValue);\n    } else {\n      // Update the current component state with the new values\n      this.setState(tempState);\n    }\n  }\n\n  /**\n   * Flatten all objects in every item\n   * @param items\n   */\n  private _flattenItems(items: any[]): any[] {\n    // Flatten items\n    const flattenItems = items.map(item => {\n      // Flatten all objects in the item\n      return this._flattenItem(item);\n    });\n    return flattenItems;\n  }\n\n  /**\n   * Flatten all object in the item\n   * @param item\n   */\n  private _flattenItem(item: any): any {\n    let flatItem: any = {};\n    for (let parentPropName in item) {\n      // Check if property already exists\n      if (!item.hasOwnProperty(parentPropName)) continue;\n\n      // Check if the property is of type object\n      if ((typeof item[parentPropName]) === 'object') {\n        // Flatten every object\n        const flatObject = this._flattenItem(item[parentPropName]);\n        for (let childPropName in flatObject) {\n          if (!flatObject.hasOwnProperty(childPropName)) continue;\n          flatItem[`${parentPropName}.${childPropName}`] = flatObject[childPropName];\n        }\n      } else {\n        flatItem[parentPropName] = item[parentPropName];\n      }\n    }\n\n    if (!flatItem.key) {\n      flatItem.key = flatItem.ID || flatItem.Id;\n\n      if (!flatItem.key) {\n        flatItem.key = Guid.newGuid().toString();\n      }\n    }\n\n    return flatItem;\n  }\n\n  /**\n   * Create an icon column rendering\n   * @param iconField\n   */\n  private _createIconColumn(iconFieldName: string): IColumn {\n    return {\n      key: 'fileType',\n      name: 'File Type',\n      iconName: 'Page',\n      isIconOnly: true,\n      fieldName: 'fileType',\n      minWidth: 16,\n      maxWidth: 16,\n      onRender: (item: any) => {\n        return (\n          <FileTypeIcon type={IconType.image} path={item[iconFieldName]} />\n        );\n      }\n    };\n  }\n\n  /**\n   * Returns required set of columns for the list view\n   * @param viewFields\n   */\n  private _createColumns(viewFields: IViewField[], crntColumns: IColumn[]): IColumn[] {\n    viewFields.forEach(field => {\n      crntColumns.push({\n        key: field.name,\n        name: field.displayName || field.name,\n        fieldName: field.name,\n        minWidth: field.minWidth || 50,\n        maxWidth: field.maxWidth,\n        isResizable: field.isResizable,\n        onRender: this._fieldRender(field),\n        onColumnClick: this._columnClick\n      });\n    });\n    return crntColumns;\n  }\n\n  /**\n   * Check how field needs to be rendered\n   * @param field\n   */\n  private _fieldRender(field: IViewField): any | void {\n    // Check if a render function is specified\n    if (field.render) {\n      return field.render;\n    }\n\n    // Check if the URL property is specified\n    if (field.linkPropertyName) {\n      return (item: any, index?: number, column?: IColumn) => {\n        return <a href={item[field.linkPropertyName]}>{item[column.fieldName]}</a>;\n      };\n    }\n  }\n\n  /**\n   * Check if sorting needs to be set to the column\n   * @param ev\n   * @param column\n   */\n  private _columnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\n    // Find the field in the viewFields list\n    const columnIdx = findIndex(this.props.viewFields, field => field.name === column.key);\n    // Check if the field has been found\n    if (columnIdx !== -1) {\n      const field = this.props.viewFields[columnIdx];\n      // Check if the field needs to be sorted\n      if (has(field, 'sorting')) {\n        // Check if the sorting option is true\n        if (field.sorting) {\n          const sortDescending = typeof column.isSortedDescending === 'undefined' ? false : !column.isSortedDescending;\n          const sortedItems = this._sortItems(this.state.items, column.key, sortDescending);\n          // Update the columns\n          const sortedColumns = this.state.columns.map(c => {\n            if (c.key === column.key) {\n              c.isSortedDescending = sortDescending;\n              c.isSorted = true;\n            } else {\n              c.isSorted = false;\n              c.isSortedDescending = false;\n            }\n            return c;\n          });\n          // Update the grouping\n          const groupedItems = this._getGroups(sortedItems, this.props.groupByFields);\n          // Update the items and columns\n          this.setState({\n            items: groupedItems.groups.length > 0 ? groupedItems.items : sortedItems,\n            columns: sortedColumns,\n            groups: groupedItems.groups.length > 0 ? groupedItems.groups : null,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Method updates the controlled value of the filter field\n   * @param newValue\n   */\n  private _updateFilterValue = (filterValue: string) => {\n    let items = cloneDeep(this.originalItems);\n    let groups = cloneDeep(this.originalGroups);\n    const columns = cloneDeep(this.originalColumns);\n\n    // Check if a value is provided, otherwise revert back to the original list of items\n    if (filterValue && items && items.length > 0) {\n      items = this._executeFiltering(filterValue, items, columns);\n      const grouping = this._getGroups(items, this.props.groupByFields);\n\n      // Update grouping\n      if (grouping.groups.length > 0) {\n        groups = grouping.groups;\n        // Update the items\n        items = grouping.items;\n      } else {\n        groups = null;\n      }\n    }\n\n    this.setState({\n      filterValue,\n      items,\n      groups\n    });\n  }\n\n  /**\n   * Sort the list of items by the clicked column\n   * @param items\n   * @param columnName\n   * @param descending\n   */\n  private _sortItems(items: any[], columnName: string, descending = false): any[] {\n    // Sort the items\n    const ascItems = sortBy(items, [columnName]);\n    const sortedItems = descending ? ascItems.reverse() : ascItems;\n\n    // Return the sorted items list\n    return sortedItems;\n  }\n\n  /**\n   * Executes filtering. Method tries to indicate if filtering should be executed on a single or all columns.\n   * @param filterValue\n   * @param items\n   * @param columns\n   */\n  private _executeFiltering(filterValue: string, items: any[], columns: IColumn[]): any[] {\n    const filterSeparator = \":\";\n\n    let filterColumns = [...columns];\n    if (filterValue && filterValue.indexOf(filterSeparator) >= 0) {\n      const columnName = filterValue.split(filterSeparator)[0];\n      filterValue = filterValue.split(filterSeparator)[1];\n\n      filterColumns = filter(columns, column => column.fieldName === columnName || column.name === columnName);\n    }\n\n    return this._getFilteredItems(filterValue, items, filterColumns);\n  }\n\n  /**\n   * Execute filtering on the provided data set and columns\n   * @param filterValue\n   * @param items\n   * @param columns\n   */\n  private _getFilteredItems(filterValue: string, items: any[], columns: IColumn[]): any[] {\n    if (!filterValue) {\n      return items;\n    }\n\n    let result: any[] = [];\n    for (const item of items) {\n      let addItemToResultSet: boolean = false;\n      for (const viewField of columns) {\n        if (this._doesPropertyContainsValue(item, viewField.fieldName, filterValue)) {\n          addItemToResultSet = true;\n          break;\n        }\n        if (this._doesPropertyContainsValue(item, viewField.name, filterValue)) {\n          addItemToResultSet = true;\n          break;\n        }\n      }\n\n      if (addItemToResultSet) {\n        result.push(item);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the item contains property with proper value\n   * @param item\n   * @param property\n   * @param filterValue\n   */\n  private _doesPropertyContainsValue(item: any, property: string, filterValue: string): boolean {\n    const propertyValue = item[property];\n    let result = false;\n    if (propertyValue) {\n      // Case insensitive\n      result = propertyValue.toString().toLowerCase().indexOf(filterValue.toLowerCase()) >= 0;\n    }\n\n    return result;\n  }\n\n  /**\n   * Default React component render method\n   */\n  public render(): React.ReactElement<IListViewProps> {\n    let groupProps: IGroupRenderProps = {};\n\n    let { showFilter, filterPlaceHolder } = this.props;\n    let { filterValue, items } = this.state;\n\n    // Check if selection mode is single selection,\n    // if that is the case, disable the selection on grouping headers\n    if (this.props.selectionMode === SelectionMode.single) {\n      groupProps = {\n        headerProps: {\n          onToggleSelectGroup: () => null,\n          onGroupHeaderClick: () => null,\n        }\n      };\n    }\n\n    return (\n      <div>\n        {\n          showFilter && <SearchBox placeholder={filterPlaceHolder || strings.ListViewFilterLabel} onSearch={this._updateFilterValue} onChange={this._updateFilterValue} value={filterValue} />\n        }\n        <DetailsList\n          key=\"ListViewControl\"\n          items={items}\n          columns={this.state.columns}\n          groups={this.state.groups}\n          selectionMode={this.props.selectionMode || SelectionMode.none}\n          selectionPreservedOnEmptyClick={true}\n          selection={this._selection}\n          layoutMode={DetailsListLayoutMode.justified}\n          compact={this.props.compact}\n          setKey=\"ListViewControl\"\n          groupProps={groupProps} />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}