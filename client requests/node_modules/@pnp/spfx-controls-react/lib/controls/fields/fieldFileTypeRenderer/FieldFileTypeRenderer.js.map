{"version":3,"sources":["controls/fields/fieldFileTypeRenderer/FieldFileTypeRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,6BAA+B;AAC/B,kEAAgF;AAChF,wDAAuD;AAEvD,mDAA4D;AAC5D,qDAAuD;AAEvD,yFAAyD;AAqBzD;;;;GAIG;AACH;IAA2C,yCAAyE;IAClH,+BAAmB,KAAkC,EAAE,KAAkC;QAAzF,YACE,kBAAM,KAAK,EAAE,KAAK,CAAC,SAKpB;QAHC,SAAS,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;QAE7C,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IAClB,CAAC;IAGM,sCAAM,GAAb;QACE,IAAM,cAAc,GAAwB,EAC3C,CAAC;QACF,cAAc,CAAC,2CAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QACpD,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,2CAAM,CAAC,SAAS,EAAE,2CAAM,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IACvH,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,oBAAC,WAAI,IAAC,QAAQ,EAAE,kBAAkB,GAAI,GAAG,oBAAC,2BAAY,IAAC,IAAI,EAAE,uBAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAI,CACxH,CACP,CAAC;IACJ,CAAC;IATD;QADC,qBAAQ;uDAUR;IACH,4BAAC;CApBD,AAoBC,CApB0C,KAAK,CAAC,SAAS,GAoBzD;AApBY,sDAAqB","file":"controls/fields/fieldFileTypeRenderer/FieldFileTypeRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport * as React from 'react';\nimport { css, ISerializableObject } from 'office-ui-fabric-react/lib/Utilities';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\nimport { FileTypeIcon, IconType } from '../../fileTypeIcon';\nimport * as telemetry from '../../../common/telemetry';\n\nimport styles from './FieldFileTypeRenderer.module.scss';\nimport { findIndex } from '@microsoft/sp-lodash-subset';\n\nexport interface IFieldFileTypeRendererProps extends IFieldRendererProps {\n  /**\n   * file/document path\n   */\n  path: string;\n  /**\n   * true if the icon should be rendered for a folder, not file\n   */\n  isFolder?: boolean;\n}\n\n/**\n * For future\n */\nexport interface IFieldFileTypeRendererState {\n\n}\n\n/**\n * File Type Renderer.\n * Used for:\n *   - File/Document Type\n */\nexport class FieldFileTypeRenderer extends React.Component<IFieldFileTypeRendererProps, IFieldFileTypeRendererState> {\n  public constructor(props: IFieldFileTypeRendererProps, state: IFieldFileTypeRendererState) {\n    super(props, state);\n\n    telemetry.track('FieldFileTypeRenderer', {});\n\n    this.state = {};\n  }\n\n  @override\n  public render(): JSX.Element {\n    const optionalStyles: ISerializableObject = {\n    };\n    optionalStyles[styles.folder] = this.props.isFolder;\n    return (\n      <div className={css(this.props.className, styles.container, styles.fabricIcon, optionalStyles)} style={this.props.cssProps}>\n        {this.props.isFolder ? <Icon iconName={'FabricFolderFill'} /> : <FileTypeIcon type={IconType.font} path={this.props.path} />}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../../src"}