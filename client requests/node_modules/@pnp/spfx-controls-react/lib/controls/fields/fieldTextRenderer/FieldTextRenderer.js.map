{"version":3,"sources":["controls/fields/fieldTextRenderer/FieldTextRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,6BAA+B;AAC/B,kEAA2D;AAE3D,iFAAqD;AAErD,wFAAuF;AAEvF,qDAAuD;AAwBvD;;;;;;;;;GASG;AACH;IAAuC,qCAAiE;IACpG,2BAAmB,KAA8B,EAAE,KAA8B;QAAjF,YACI,kBAAM,KAAK,EAAE,KAAK,CAAC,SAKtB;QAHG,SAAS,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAEzC,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IACpB,CAAC;IAGM,kCAAM,GAAb;QACI,IAAM,kBAAkB,GAAY,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;QAClE,IAAM,uBAAuB,GAAQ,EAAE,CAAC;QACxC,uBAAuB,CAAC,uCAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QACrE,IAAI,IAAI,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QACnC,EAAE,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/C,IAAI,IAAI,gBAAc,uCAAM,CAAC,QAAQ,sEAA+D,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,IAAI,SAAS,qBAAgB,CAAC;QACtO,CAAC;QAGD,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,CAAC,6BAAK,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,uCAAM,CAAC,iBAAiB,EAAE,uBAAuB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,uBAAuB,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,GAAQ,CAAC,CAAC;QACvL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,CAAC,oBAAC,6CAAqB,IAAC,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,uCAAM,CAAC,iBAAiB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAI,CAAC,CAAC;QAC7J,CAAC;IACL,CAAC;IAhBD;QADC,qBAAQ;mDAiBR;IACL,wBAAC;CA3BD,AA2BC,CA3BsC,KAAK,CAAC,SAAS,GA2BrD;AA3BY,8CAAiB","file":"controls/fields/fieldTextRenderer/FieldTextRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport * as React from 'react';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\n\nimport styles from './FieldTextRenderer.module.scss';\n\nimport { FieldBaseTextRenderer } from '../fieldBaseTextRenderer/FieldBaseTextRenderer';\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\nimport * as telemetry from '../../../common/telemetry';\n\nexport interface IFieldTextRendererProps extends IFieldRendererProps {\n    /**\n     * text to be displayed\n     */\n    text?: string;\n    /**\n     * true if props.text can be inserted as innerHTML of the component\n     */\n    isSafeForInnerHTML?: boolean;\n    /**\n     * true if the text should be truncated\n     */\n    isTruncated?: boolean;\n}\n\n/**\n * For future\n */\nexport interface IFieldTextRendererState {\n\n}\n\n/**\n * Field Text Renderer.\n * Used for:\n *   - Single line of text\n *   - Multiline text\n *   - Choice\n *   - Checkbox\n *   - Number\n *   - Currency\n */\nexport class FieldTextRenderer extends React.Component<IFieldTextRendererProps, IFieldTextRendererState> {\n    public constructor(props: IFieldTextRendererProps, state: IFieldTextRendererState) {\n        super(props, state);\n\n        telemetry.track('FieldTextRenderer', {});\n\n        this.state = {};\n    }\n\n    @override\n    public render(): JSX.Element {\n        const isSafeForInnerHTML: boolean = this.props.isSafeForInnerHTML;\n        const isTruncatedClassNameObj: any = {};\n        isTruncatedClassNameObj[styles.isTruncated] = this.props.isTruncated;\n        let text: string = this.props.text;\n        if (isSafeForInnerHTML && this.props.isTruncated) {\n            text += `<div class=${styles.truncate} style=\"background: linear-gradient(to bottom, transparent, ${(this.props.cssProps && (this.props.cssProps.background || this.props.cssProps.backgroundColor)) || '#ffffff'} 100%)\"></div>`;\n        }\n\n\n        if (isSafeForInnerHTML) {\n            return (<div className={css(this.props.className, styles.fieldRendererText, isTruncatedClassNameObj)} style={this.props.cssProps} dangerouslySetInnerHTML={{__html: text}}></div>);\n        }\n        else {\n            return (<FieldBaseTextRenderer className={css(this.props.className, styles.fieldRendererText)} cssProps={this.props.cssProps} text={this.props.text} />);\n        }\n    }\n}\n"],"sourceRoot":"../../../../src"}