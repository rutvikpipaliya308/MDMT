{"version":3,"sources":["controls/fields/fieldLookupRenderer/FieldLookupRenderer.tsx"],"names":[],"mappings":"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","file":"controls/fields/fieldLookupRenderer/FieldLookupRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport * as React from 'react';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\nimport { Dialog, DialogType } from 'office-ui-fabric-react/lib/Dialog';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';\n\nimport { ISPFieldLookupValue } from \"../../../common/SPEntities\";\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\nimport * as telemetry from '../../../common/telemetry';\n\nimport styles from './FieldLookupRenderer.module.scss';\nimport { IFrameDialog } from '../../iFrameDialog/IFrameDialog';\nimport { SPHelper } from '../../../Utilities';\nimport { IContext } from '../../../Common';\n\n/**\n * Field Lookup Renderer Props\n * There are 3 options to provide the props:\n * - [recommended, used in FieldRendererHelper] Provide fieldId and context. In that case request for DispUrl will be sent only if a user clicks on the value\n * - Provide dispFormUrl: if you know this URL a priori you can provide it into the renderer\n * - Provide onClick handler to handle value's click event outside the renderer\n */\nexport interface IFieldLookupRendererProps extends IFieldRendererProps {\n    /**\n     * lookup values\n     */\n    lookups: ISPFieldLookupValue[];\n    /**\n     * url of Display form for the list that is referenced in the lookup\n     */\n    dispFormUrl?: string;\n    /**\n     * custom event handler of lookup item click. If not set the dialog with Display Form will be shown\n     */\n    onClick?: (args: IFieldLookupClickEventArgs) => void;\n    /**\n     * Field's id.\n     */\n    fieldId?: string;\n    /**\n     * Customizer context. Must be providede if fieldId is set\n     */\n    context?: IContext;\n}\n\n/**\n * Field Lookup Renderer State\n */\nexport interface IFieldLookupRendererState {\n    hideDialog?: boolean;\n    lookupDispFormUrl?: string;\n    dispFormUrl?: string;\n}\n\n/**\n * Lookup click event arguments\n */\nexport interface IFieldLookupClickEventArgs {\n    lookup?: ISPFieldLookupValue;\n}\n\n/**\n * Field Lookup Renderer.\n * Used for:\n *   - Lookup, LookupMulti\n */\nexport class FieldLookupRenderer extends React.Component<IFieldLookupRendererProps, IFieldLookupRendererState> {\n    public constructor(props: IFieldLookupRendererProps, state: IFieldLookupRendererState) {\n        super(props, state);\n\n        telemetry.track('FieldLookupRenderer', {});\n\n        this.state = {\n            hideDialog: true,\n            dispFormUrl: props.dispFormUrl\n        };\n    }\n\n    @override\n    public render(): JSX.Element {\n        const lookupLinks: JSX.Element[] = this.props.lookups.map((lookup) => {\n            return <Link onClick={this._onClick.bind(this, lookup)} className={styles.lookup} style={this.props.cssProps}>{lookup.lookupValue}</Link>;\n        });\n        return (\n            <div style={this.props.cssProps} className={css(this.props.className)}>{lookupLinks}\n                {!this.state.hideDialog && this.state.dispFormUrl && <IFrameDialog\n                    url={this.state.lookupDispFormUrl}\n                    iframeOnLoad={this._onIframeLoaded.bind(this)}\n                    hidden={this.state.hideDialog}\n                    onDismiss={this._onDialogDismiss.bind(this)}\n                    modalProps={{\n                        isBlocking: true,\n                        containerClassName: styles.dialogContainer\n                    }}\n                    dialogContentProps={{\n                        type: DialogType.close,\n                        showCloseButton: true\n                    }}\n                    width={'570px'}\n                    height={'250px'} />}\n                {!this.state.hideDialog && !this.state.dispFormUrl && <Dialog\n                    onDismiss={this._onDialogDismiss.bind(this)}\n                    modalProps={{\n                        isBlocking: true,\n                        containerClassName: styles.dialogContainer\n                    }}\n                    dialogContentProps={{\n                        type: DialogType.close,\n                        showCloseButton: true\n                    }}>\n                    <Spinner size={SpinnerSize.large} />\n                </Dialog>}\n            </div>);\n    }\n\n    private _onClick(lookup: ISPFieldLookupValue): void {\n        if (this.props.onClick) {\n            const args: IFieldLookupClickEventArgs = {\n                lookup: lookup\n            };\n            this.props.onClick(args);\n            return;\n        }\n\n        //\n        // showing Display Form in the dialog\n        //\n        const dispFormUrl = this.state.dispFormUrl;\n        if (dispFormUrl) {\n            this.setState({\n                lookupDispFormUrl: `${dispFormUrl}${(dispFormUrl.indexOf('?') === -1 ? '?' : '&')}ID=${lookup.lookupId}&RootFolder=*&IsDlg=1`,\n                hideDialog: false\n            });\n        }\n        else if (this.props.fieldId) {\n            this.setState({\n                hideDialog: false\n            });\n\n            SPHelper.getLookupFieldListDispFormUrl(this.props.fieldId, this.props.context).then(dispFormUrlValue => {\n                const listDispFormUrl: string = dispFormUrlValue.toString();\n                this.setState((prevState, props) => {\n                    if (prevState.hideDialog) {\n                        return;\n                    }\n\n                    return {\n                        dispFormUrl: listDispFormUrl,\n                        lookupDispFormUrl: `${listDispFormUrl}&ID=${lookup.lookupId}&RootFolder=*&IsDlg=1`\n                    };\n                });\n            });\n        }\n    }\n\n    private _onIframeLoaded(iframe: any): void {\n        //\n        // some additional configuration to beutify content of the iframe\n        //\n        const iframeWindow: Window = iframe.contentWindow;\n        const iframeDocument: Document = iframeWindow.document;\n\n        const s4Workspace: HTMLDivElement = iframeDocument.getElementById('s4-workspace') as HTMLDivElement;\n        s4Workspace.style.height = iframe.style.height;\n\n        s4Workspace.scrollIntoView();\n    }\n\n    private _onDialogDismiss(): void {\n        this.setState({\n            hideDialog: true\n        });\n    }\n}\n"],"sourceRoot":"../../../../src"}