{"version":3,"sources":["controls/fields/fieldBaseTextRenderer/FieldBaseTextRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,6BAA+B;AAC/B,kEAA2D;AAE3D,yFAAyD;AAEzD,qDAAuD;AAoBvD;;GAEG;AACH;IAA2C,yCAAyE;IAChH,+BAAoB,KAAkC,EAAE,KAAkC;QAA1F,YACI,kBAAM,KAAK,EAAE,KAAK,CAAC,SAKtB;QAHG,SAAS,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;QAE7C,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IACpB,CAAC;IAGM,sCAAM,GAAb;QACI,IAAM,IAAI,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,CAAC;QAC5C,MAAM,CAAC,CAAC,6BAAK,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,2CAAM,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC5F,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,GAAG,kCAAO,IAAI,CAAQ;YACrD,IAAI,CAAC,KAAK,CAAC,QAAQ,CACd,CAAC,CAAC;IACZ,CAAC;IAND;QADC,qBAAQ;uDAOR;IACL,4BAAC;CAjBD,AAiBC,CAjB0C,KAAK,CAAC,SAAS,GAiBzD;AAjBY,sDAAqB","file":"controls/fields/fieldBaseTextRenderer/FieldBaseTextRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport * as React from 'react';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\n\nimport styles from './FieldBaseTextRenderer.module.scss';\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\nimport * as telemetry from '../../../common/telemetry';\n\nexport interface IFieldBaseTextRendererProps extends IFieldRendererProps {\n    /**\n     * text to be displayed\n     */\n    text?: string;\n    /**\n     * true if no need to render span element with text content\n     */\n    noTextRender?: boolean;\n}\n\n/**\n * For future\n */\nexport interface IFieldBaseTextRendererState {\n\n}\n\n/**\n * Base renderer. Used to render text.\n */\nexport class FieldBaseTextRenderer extends React.Component<IFieldBaseTextRendererProps, IFieldBaseTextRendererState> {\n    public constructor (props: IFieldBaseTextRendererProps, state: IFieldBaseTextRendererState) {\n        super(props, state);\n\n        telemetry.track('FieldBaseTextRenderer', {});\n\n        this.state = {};\n    }\n\n    @override\n    public render(): JSX.Element {\n        const text: string = this.props.text || ' ';\n        return (<div className={css(this.props.className, styles.baseText)} style={this.props.cssProps}>\n        { this.props.noTextRender ? null : <span>{text}</span> }\n        {this.props.children}\n        </div>);\n    }\n}\n"],"sourceRoot":"../../../../src"}