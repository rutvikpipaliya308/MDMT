{"version":3,"sources":["controls/fields/fieldTitleRenderer/FieldTitleRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,6BAA+B;AAC/B,kEAA2D;AAC3D,wDAAuD;AAEvD,wFAAuF;AAEvF,qDAAuD;AA4CvD;;;;GAIG;AACH;IAAwC,sCAAmE;IACvG,4BAAmB,KAA+B,EAAE,KAA+B;QAAnF,YACI,kBAAM,KAAK,EAAE,KAAK,CAAC,SAKtB;QAHG,SAAS,CAAC,KAAK,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QAE1C,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IACpB,CAAC;IAGM,mCAAM,GAAb;QACI,IAAM,MAAM,GAAY,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAE1C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,CAAC,oBAAC,WAAI,IAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAQ,CAAC,CAAC;QACjJ,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,CAAC,oBAAC,6CAAqB,IAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAI,CAAC,CAAC;QAC9H,CAAC;IACL,CAAC;IAEO,qCAAQ,GAAhB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACrB,IAAM,IAAI,GAA8B,IAAI,CAAC,KAAkC,CAAC;YAChF,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC;QACX,CAAC;QACD,IAAM,GAAG,GAAc,IAAI,CAAC,KAAK,CAAC,OAAO,qDAAgD,IAAI,CAAC,KAAK,CAAC,MAAM,YAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC;QACjI,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;IACxB,CAAC;IAnBD;QADC,qBAAQ;oDAUR;IAWL,yBAAC;CA9BD,AA8BC,CA9BuC,KAAK,CAAC,SAAS,GA8BtD;AA9BY,gDAAkB","file":"controls/fields/fieldTitleRenderer/FieldTitleRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport * as React from 'react';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\n\nimport { FieldBaseTextRenderer } from '../fieldBaseTextRenderer/FieldBaseTextRenderer';\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\nimport * as telemetry from '../../../common/telemetry';\n\nexport interface IFieldTitleRendererProps extends IFieldRendererProps {\n    /**\n     * text to be displayed\n     */\n    text?: string;\n    /**\n     * true if the Title should be rendered as link\n     */\n    isLink?: boolean;\n    /**\n     * web url\n     */\n    baseUrl?: string;\n    /**\n     * list id\n     */\n    listId?: string;\n    /**\n     * item id\n     */\n    id?: number;\n    /**\n     * custom title click event handler. If not set Display form for the item will be displaed\n     */\n    onClick?: (args: IFieldTitleClickEventArgs) => void;\n}\n\n/**\n * For future\n */\nexport interface IFieldTitleRendererState {\n\n}\n\n/**\n * Title click event arguments\n */\nexport interface IFieldTitleClickEventArgs {\n    listId?: string;\n    id?: string;\n}\n\n/**\n * Field Title Renderer.\n * Used for:\n *   - Title\n */\nexport class FieldTitleRenderer extends React.Component<IFieldTitleRendererProps, IFieldTitleRendererState> {\n    public constructor(props: IFieldTitleRendererProps, state: IFieldTitleRendererState) {\n        super(props, state);\n\n        telemetry.track('FieldTitleRenderer', {});\n\n        this.state = {};\n    }\n\n    @override\n    public render(): JSX.Element {\n        const isLink: boolean = this.props.isLink;\n\n        if (isLink) {\n            return (<Link onClick={this._onClick.bind(this)} className={css(this.props.className)} style={this.props.cssProps}>{this.props.text}</Link>);\n        }\n        else {\n            return (<FieldBaseTextRenderer className={this.props.className} cssProps={this.props.cssProps} text={this.props.text} />);\n        }\n    }\n\n    private _onClick(): void {\n        if (this.props.onClick) {\n            const args: IFieldTitleClickEventArgs = this.props as IFieldTitleClickEventArgs;\n            this.props.onClick(args);\n            return;\n        }\n        const url: string = `${this.props.baseUrl}/_layouts/15/listform.aspx?PageType=4&ListId=${this.props.listId}&ID=${this.props.id}`;\n        location.href = url;\n    }\n}\n"],"sourceRoot":"../../../../src"}