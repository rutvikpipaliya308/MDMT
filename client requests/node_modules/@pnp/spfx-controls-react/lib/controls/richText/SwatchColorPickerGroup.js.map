{"version":3,"sources":["controls/richText/SwatchColorPickerGroup.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,2EAAkD;AAClD,0DAAyD;AAEzD,kEAAgH;AAChH,4DAAiE;AACjE,gEAAoD;AAEpD;IAAoD,0CAA2E;IAA/H;;IA0DA,CAAC;IAzDQ,uCAAM,GAAb;QAAA,iBAoDC;QAnDC,IAAM,SAAS,GAAG,wBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,CACL;YACE,oBAAC,aAAK,IAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC7B,SAAS,EAAE,oCAAM,CAAC,WAAW,IAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAS;YACpE,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;gBAC5B,oBAAC,qBAAS,IAAC,SAAS,EAAE,8BAAkB,CAAC,UAAU,EACxC,YAAY,eACZ,oBAAoB,EAAE,IAAI,EAC1B,SAAS,EAAE,oCAAM,CAAC,gBAAgB;oBAC3C,+BAAO,SAAS,EAAE,oCAAM,CAAC,SAAS;wBAChC,mCAEI,SAAS,CAAC,GAAG,CAAC,UAAC,EAAkB,EAAE,QAAgB;4BACjD,MAAM,CAAC,CACL,4BAAI,IAAI,EAAC,KAAK,IAEV,EAAE,CAAC,GAAG,CAAC,UAAC,EAAgB,EAAE,KAAa;gCACrC,MAAM,CAAC,CACL,4BAAI,IAAI,EAAC,cAAc,EAAC,SAAS,EAAE,oCAAM,CAAC,SAAS;oCACjD,oBAAC,qBAAY,IAAC,SAAS,EAAE,oCAAM,CAAC,SAAS,EAC3B,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,EAAE,CAAC,KAAK,gBACH,EAAE,CAAC,KAAK,mBACL,KAAI,CAAC,KAAK,CAAC,aAAa,KAAK,EAAE,CAAC,KAAK,gBACxC,KAAK,uBACE,IAAI,EACvB,EAAE,EAAK,KAAI,CAAC,KAAK,CAAC,SAAS,SAAI,EAAE,CAAC,EAAE,SAAI,KAAO,EAC/C,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAjC,CAAiC;wCAC5D,6BAAK,SAAS,EAAK,oCAAM,CAAC,GAAG,UAAI,KAAI,CAAC,KAAK,CAAC,aAAc,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,oCAAM,CAAC,QAAQ,GAAG,EAAE,CAAE,EACxH,OAAO,EAAC,WAAW,EACnB,IAAI,EAAE,EAAE,CAAC,KAAK,EAAE,SAAS,EAAC,OAAO;4CACnC,8BAAM,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,GAAQ,CACpC,CACO,CACZ,CACN,CAAC;4BACJ,CAAC,CAAC,CAED,CACN,CAAC;wBACJ,CAAC,CAAC,CAGE,CACF,CACE,CAER,CACF,CACP,CAAC;IACJ,CAAC;IAEO,mDAAkB,GAA1B,UAA2B,KAAa;QACtC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IACH,6BAAC;AAAD,CA1DA,AA0DC,CA1DmD,KAAK,CAAC,SAAS,GA0DlE","file":"controls/richText/SwatchColorPickerGroup.js","sourcesContent":["import * as React from 'react';\nimport styles from './RteColorPicker.module.scss';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { ISwatchColorPickerGroupState, ISwatchColorPickerGroupProps, ISwatchColor } from './SwatchColorPickerGroup.types';\nimport { FocusZone, FocusZoneDirection, FocusZoneTabbableElements } from 'office-ui-fabric-react/lib/FocusZone';\nimport { ActionButton } from 'office-ui-fabric-react/lib/Button';\nimport { chunk } from '@microsoft/sp-lodash-subset';\n\nexport default class SwatchColorPickerGroup extends React.Component<ISwatchColorPickerGroupProps, ISwatchColorPickerGroupState> {\n  public render(): React.ReactElement<ISwatchColorPickerGroupProps> {\n    const colorRows = chunk(this.props.groupColors, 5);\n    return (\n      <div>\n        <Label htmlFor={this.props.groupText}\n               className={styles.pickerLabel}>{this.props.groupText}</Label>\n        <div key={this.props.groupText}>\n          <FocusZone direction={FocusZoneDirection.horizontal}\n                     handleTabKey={FocusZoneTabbableElements.all}\n                     isCircularNavigation={true}\n                     className={styles.focusedContainer}>\n            <table className={styles.tableRoot}>\n              <tbody>\n                {\n                  colorRows.map((cr: ISwatchColor[], rowIndex: number) => {\n                    return (\n                      <tr role=\"row\">\n                        {\n                          cr.map((gc: ISwatchColor, index: number) => {\n                            return (\n                              <td role=\"presentation\" className={styles.tableCell}>\n                                <ActionButton className={styles.colorCell}\n                                              role=\"gridCell\"\n                                              title={gc.label}\n                                              aria-label={gc.label}\n                                              aria-selected={this.props.selectedColor === gc.color}\n                                              data-index={index}\n                                              data-is-focusable={true}\n                                              id={`${this.props.groupText}-${gc.id}-${index}`}\n                                              onClick={() => this.handleColorChanged(gc.color)}>\n                                  <svg className={`${styles.svg} ${this.props.selectedColor!.toUpperCase() === gc.color.toUpperCase() ? styles.selected : \"\"}`}\n                                      viewBox=\"0 0 20 20\"\n                                      fill={gc.color} focusable=\"false\">\n                                    <rect width=\"100%\" height=\"100%\"></rect>\n                                  </svg>\n                                </ActionButton>\n                              </td>\n                            );\n                          })\n                        }\n                      </tr>\n                    );\n                  })\n                }\n\n              </tbody>\n            </table>\n          </FocusZone>\n\n        </div>\n      </div>\n    );\n  }\n\n  private handleColorChanged(color: string) {\n    this.props.onColorChanged(color);\n  }\n}\n"],"sourceRoot":"../../../src"}