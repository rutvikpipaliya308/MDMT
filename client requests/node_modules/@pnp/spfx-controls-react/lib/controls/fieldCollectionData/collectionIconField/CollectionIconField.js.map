{"version":3,"sources":["controls/fieldCollectionData/collectionIconField/CollectionIconField.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,sFAAwD;AAExD,6EAA4E;AAC5E,mEAAkE;AAElE;IAAyC,uCAA8C;IAAvF;;IAkBA,CAAC;IAhBQ,oCAAM,GAAb;QAAA,iBAeC;QAdO,IAAA,eAA4B,EAA1B,gBAAK,EAAE,cAAI,CAAgB;QACnC,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,4CAA0C,yCAAM,CAAC,SAAW;YAC1E,oBAAC,qBAAS,IAAC,WAAW,EAAE,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,KAAK,EAC7C,SAAS,EAAE,yCAAM,CAAC,mBAAmB,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,EAC3C,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAA1C,CAA0C,EAChE,sBAAsB,EAAE,KAAK,CAAC,sBAAsB,IAAI,KAAK,CAAC,sBAAsB,IAAI,CAAC,GAAG,KAAK,CAAC,sBAAsB,GAAG,GAAG,EAC9H,iBAAiB,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,EAA/C,CAA+C,EAC7E,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,GAAI;YAC/C,oBAAC,WAAI,IAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,GAAI,CACpD,CACP,CAAC;IACJ,CAAC;IACH,0BAAC;AAAD,CAlBA,AAkBC,CAlBwC,KAAK,CAAC,SAAS,GAkBvD;AAlBY,kDAAmB","file":"controls/fieldCollectionData/collectionIconField/CollectionIconField.js","sourcesContent":["import * as React from 'react';\nimport styles from '../FieldCollectionData.module.scss';\nimport { ICollectionIconFieldProps } from '.';\nimport { TextField } from 'office-ui-fabric-react/lib/components/TextField';\nimport { Icon } from 'office-ui-fabric-react/lib/components/Icon';\n\nexport class CollectionIconField extends React.Component<ICollectionIconFieldProps, {}> {\n\n  public render(): React.ReactElement<ICollectionIconFieldProps> {\n    const { field, item } = this.props;\n    return (\n      <div className={`FieldCollectionData__panel__icon-field ${styles.iconField}`}>\n        <TextField placeholder={field.placeholder || field.title}\n                   className={styles.collectionDataField}\n                   value={item[field.id] ? item[field.id] : \"\"}\n                   required={field.required}\n                   onChanged={(value) => this.props.fOnValueChange(field.id, value)}\n                   deferredValidationTime={field.deferredValidationTime || field.deferredValidationTime >= 0 ? field.deferredValidationTime : 200}\n                   onGetErrorMessage={(value) => this.props.fValidation(this.props.field, value)}\n                   disabled={this.props.disableEdit} />\n        <Icon iconName={item[field.id] ? item[field.id] : \"\"} />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../../src"}