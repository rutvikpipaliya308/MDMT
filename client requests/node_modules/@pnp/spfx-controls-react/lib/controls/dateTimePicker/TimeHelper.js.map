{"version":3,"sources":["controls/dateTimePicker/TimeHelper.ts"],"names":[],"mappings":";;AAAA,sBAAmC;AAEnC;IAAA;IAuDA,CAAC;IArDC;;;;OAIG;IACW,sBAAW,GAAzB,UAA0B,KAAU;QAClC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,eAAe,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9F,CAAC;IAED;;;;OAIG;IACW,oBAAS,GAAvB,UAAwB,IAAU;QAChC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC;IAClE,CAAC;IAED;;OAEG;IACW,qBAAU,GAAxB,UAAyB,KAAa,EAAE,IAAgB;QAAhB,qBAAA,EAAA,QAAgB;QACtD,OAAO,KAAK,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;YAC3B,KAAK,GAAG,MAAI,KAAO,CAAC;QACtB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACW,qBAAU,GAAxB,UAAyB,KAAa,EAAE,cAA8B;QACpE,EAAE,CAAC,CAAC,cAAc,KAAK,iBAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9C,2BAA2B;YAC3B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,2BAA2B;YAC3B,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,OAAO,CAAC;YACjB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAK,CAAC;YACnD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;oBACjB,MAAM,CAAC,OAAO,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAI,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAK,CAAC;gBAC1D,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IACH,iBAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDY,gCAAU","file":"controls/dateTimePicker/TimeHelper.js","sourcesContent":["import { TimeConvention } from \".\";\n\nexport class TimeHelper {\n\n  /**\n   * Check if value is a valid date\n   *\n   * @param value\n   */\n  public static isValidDate(value: any): value is Date {\n    return Object.prototype.toString.call(value) === '[object Date]' && !isNaN(value.getTime());\n  }\n\n  /**\n   * Clone the date\n   *\n   * @param date\n   */\n  public static cloneDate(date: Date): Date {\n    return this.isValidDate(date) ? new Date(date.getTime()) : null;\n  }\n\n  /**\n   * Suffix number with zero\n   */\n  public static suffixZero(value: string, size: number = 2) {\n    while (value.length < size) {\n      value = `0${value}`;\n    }\n    return value;\n  }\n\n  /**\n   * Format the hours value\n   *\n   * @param hours\n   * @param timeConvention\n   */\n  public static hoursValue(hours: number, timeConvention: TimeConvention): string {\n    if (timeConvention === TimeConvention.Hours24) {\n      // 24 hours time convention\n      return this.suffixZero(hours.toString());\n    } else {\n      // 12 hours time convention\n      if (hours === 0) {\n        return `12 AM`;\n      } else if (hours < 12) {\n        return `${this.suffixZero(hours.toString())} AM`;\n      } else {\n        if (hours === 12) {\n          return `12 PM`;\n        } else {\n          return `${this.suffixZero((hours % 12).toString())} PM`;\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}