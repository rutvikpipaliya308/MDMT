{"version":3,"sources":["controls/dateTimePicker/MinutesComponent.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,wCAA0C;AAC1C,6BAA+B;AAE/B,kEAAuE;AACvE,2CAA0C;AAC1C,gEAAgF;AAChF,mEAAkE;AAElE;;GAEG;AACH;IAA8C,oCAAwC;IAIpF,0BAAY,KAA0B;QAAtC,YACE,kBAAM,KAAK,CAAC,SAGb;QADC,KAAI,CAAC,mBAAmB,EAAE,CAAC;;IAC7B,CAAC;IAEM,iCAAM,GAAb;QAEQ,IAAA,eAKQ,EAJZ,sBAAQ,EACR,gBAAK,EACL,sBAAQ,EACR,kDAAsB,CACT;QAEf,IAAM,cAAc,GAAG,sBAAsB,KAAK,+CAAsB,CAAC,QAAQ,CAAC;QAElF,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,CACL,oBAAC,mBAAQ,IACP,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC7B,KAAK,EAAC,EAAE,EACR,OAAO,EAAE,IAAI,CAAC,QAAQ,EACtB,SAAS,EAAE,UAAA,MAAM;oBACf,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC,GAAI,CACR,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,CACL,oBAAC,2BAAe,IAAC,QAAQ,EAAE,QAAQ,EACjC,KAAK,EAAC,EAAE,EACR,KAAK,EAAE,KAAK,GAAG,uBAAU,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,EAC7D,iBAAiB,EAAE,UAAC,GAAG;oBACrB,IAAI,OAAO,GAAG,EAAE,CAAC;oBACjB,IAAM,OAAO,GAAW,QAAQ,CAAC,GAAG,CAAC,CAAC;oBACtC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBACnB,OAAO,GAAG,OAAO,CAAC,gCAAgC,CAAC;oBACrD,CAAC;oBAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACb,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC;gBACjB,CAAC,EACD,IAAI,EAAC,IAAI,EACT,UAAU,EAAE;oBACV,GAAG,EAAE,OAAO;oBACZ,GAAG,EAAE,OAAO;iBACb,GAAI,CACR,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,8CAAmB,GAA3B;QACE,IAAI,OAAO,GAAsB,EAAE,CAAC;QACpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,QAAQ,SAAQ,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACX,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC1B,CAAC;YACD,IAAI,QAAQ,GAAY,KAAK,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3B,QAAQ,GAAG,IAAI,CAAC;YAClB,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IACH,uBAAC;AAAD,CA7EA,AA6EC,CA7E6C,KAAK,CAAC,SAAS,GA6E5D","file":"controls/dateTimePicker/MinutesComponent.js","sourcesContent":["import * as strings from 'ControlStrings';\nimport * as React from 'react';\nimport { ITimeComponentProps } from './ITimeComponentProps';\nimport { MaskedTextField } from 'office-ui-fabric-react/lib/TextField';\nimport { TimeHelper } from './TimeHelper';\nimport { IDropdownOption, Dropdown } from 'office-ui-fabric-react/lib/Dropdown';\nimport { TimeDisplayControlType } from './TimeDisplayControlType';\n\n/**\n * Minutes component, renders the minutes dropdown\n */\nexport default class MinutesComponent extends React.Component<ITimeComponentProps, {}> {\n\n  private _minutes: IDropdownOption[];\n\n  constructor(props: ITimeComponentProps) {\n    super(props);\n\n    this._initMinutesOptions();\n  }\n\n  public render(): JSX.Element {\n\n    const {\n      disabled,\n      value,\n      onChange,\n      timeDisplayControlType\n    } = this.props;\n\n    const renderDropdown = timeDisplayControlType === TimeDisplayControlType.Dropdown;\n\n    if (renderDropdown) {\n      return (\n        <Dropdown\n          disabled={this.props.disabled}\n          label=''\n          options={this._minutes}\n          onChanged={option => {\n            onChange(option.text);\n          }} />\n      );\n    }\n    else {\n      return (\n        <MaskedTextField disabled={disabled}\n          label=\"\"\n          value={value ? TimeHelper.suffixZero(value.toString()) : \"00\"}\n          onGetErrorMessage={(val) => {\n            let message = \"\";\n            const minutes: number = parseInt(val);\n            if (isNaN(minutes)) {\n              message = strings.DateTimePickerMinuteValueInvalid;\n            }\n\n            if (!message) {\n              onChange(val);\n            }\n\n            return message;\n          }}\n          mask=\"59\"\n          maskFormat={{\n            '5': /[0-5]/,\n            '9': /[0-9]/\n          }} />\n      );\n    }\n  }\n\n  private _initMinutesOptions() {\n    let minutes: IDropdownOption[] = [];\n    for (let j = 0; j < 60; j++) {\n      let digitMin: string;\n      if (j < 10) {\n        digitMin = '0' + j;\n      } else {\n        digitMin = j.toString();\n      }\n      let selected: boolean = false;\n      if (j === this.props.value) {\n        selected = true;\n      }\n      minutes.push({ key: j, text: digitMin, isSelected: selected });\n    }\n\n    this._minutes = minutes;\n  }\n}\n"],"sourceRoot":"../../../src"}