{"version":3,"sources":["controls/listItemPicker/ListItemPicker.tsx"],"names":[],"mappings":"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","file":"controls/listItemPicker/ListItemPicker.js","sourcesContent":["import * as strings from 'ControlStrings';\nimport * as React from \"react\";\nimport SPservice from \"../../services/SPService\";\nimport { TagPicker } from \"office-ui-fabric-react/lib/components/pickers/TagPicker/TagPicker\";\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\nimport { IListItemPickerProps, IListItemPickerState } from \".\";\nimport * as telemetry from '../../common/telemetry';\n\n\nexport class ListItemPicker extends React.Component<IListItemPickerProps, IListItemPickerState> {\n  private _spservice: SPservice;\n  private selectedItems: any[];\n\n  constructor(props: IListItemPickerProps) {\n    super(props);\n\n    telemetry.track('ListItemPicker', {});\n\n    // States\n    this.state = {\n      noresultsFoundText: !this.props.noResultsFoundText ? strings.genericNoResultsFoundText : this.props.noResultsFoundText,\n      showError: false,\n      errorMessage: \"\",\n      suggestionsHeaderText: !this.props.suggestionsHeaderText ? strings.ListItemPickerSelectValue : this.props.suggestionsHeaderText\n    };\n\n    // Get SPService Factory\n    this._spservice = new SPservice(this.props.context);\n\n    this.selectedItems = [];\n  }\n\n  public componentDidUpdate(prevProps: IListItemPickerProps, prevState: IListItemPickerState): void {\n    if (this.props.listId !== prevProps.listId) {\n      this.selectedItems = [];\n    }\n  }\n\n  /**\n   * Render the field\n   */\n  public render(): React.ReactElement<IListItemPickerProps> {\n    const { className, disabled, itemLimit, placeholder } = this.props;\n\n    return (\n      <div>\n        <TagPicker onResolveSuggestions={this.onFilterChanged}\n                   //   getTextFromItem={(item: any) => { return item.name; }}\n                   getTextFromItem={this.getTextFromItem}\n                   pickerSuggestionsProps={{\n                     suggestionsHeaderText: this.state.suggestionsHeaderText,\n                     noResultsFoundText: this.state.noresultsFoundText\n                   }}\n                   defaultSelectedItems={this.props.defaultSelectedItems || []}\n                   onChange={this.onItemChanged}\n                   className={className}\n                   itemLimit={itemLimit}\n                   disabled={disabled}\n                   inputProps={{\n                    placeholder: placeholder\n                  }} />\n\n        {!!this.state.errorMessage &&\n          (<Label style={{color:'#FF0000'}}> {this.state.errorMessage} </Label>)}\n      </div>\n    );\n  }\n\n  /**\n   * Get text from Item\n   */\n  private getTextFromItem(item: any): string {\n    return item.name;\n  }\n\n  /**\n   * On Selected Item\n   */\n  private onItemChanged = (selectedItems: { key: string; name: string }[]): void => {\n    this.selectedItems = selectedItems;\n    this.props.onSelectedItem(selectedItems);\n  }\n\n  /**\n   * Filter Change\n   */\n  private onFilterChanged = async (filterText: string, tagList: { key: string; name: string }[]) => {\n    let resolvedSugestions: { key: string; name: string }[] = await this.loadListItems(filterText);\n\n    // Filter out the already retrieved items, so that they cannot be selected again\n    if (this.selectedItems && this.selectedItems.length > 0) {\n      let filteredSuggestions = [];\n      for (const suggestion of resolvedSugestions) {\n        const exists = this.selectedItems.filter(sItem => sItem.key === suggestion.key);\n        if (!exists || exists.length === 0) {\n          filteredSuggestions.push(suggestion);\n        }\n      }\n      resolvedSugestions = filteredSuggestions;\n    }\n\n    if (resolvedSugestions) {\n      this.setState({\n        errorMessage: \"\",\n        showError: false\n      });\n\n      return resolvedSugestions;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Function to load List Items\n   */\n  private loadListItems = async (filterText: string): Promise<{ key: string; name: string }[]> => {\n    let { listId, columnInternalName, keyColumnInternalName, webUrl, filter, substringSearch } = this.props;\n    let arrayItems: { key: string; name: string }[] = [];\n    let keyColumn: string = keyColumnInternalName || 'Id';\n\n    try {\n      let listItems = await this._spservice.getListItems(filterText, listId, columnInternalName, keyColumn, webUrl, filter, substringSearch); // JJ - 20200613 - find by substring as an option\n      // Check if the list had items\n      if (listItems.length > 0) {\n        for (const item of listItems) {\n          arrayItems.push({ key: item[keyColumn], name: item[columnInternalName] });\n        }\n      }\n      return arrayItems;\n    } catch (error) {\n      console.log(`Error get Items`, error);\n      this.setState({\n        showError: true,\n        errorMessage: error.message,\n        noresultsFoundText: error.message\n      });\n      return null;\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}