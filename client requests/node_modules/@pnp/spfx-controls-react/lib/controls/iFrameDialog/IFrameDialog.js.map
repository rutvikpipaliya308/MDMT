{"version":3,"sources":["controls/iFrameDialog/IFrameDialog.tsx"],"names":[],"mappings":"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","file":"controls/iFrameDialog/IFrameDialog.js","sourcesContent":["import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Dialog, IDialogProps } from 'office-ui-fabric-react/lib/Dialog';\nimport { IFrameDialogContent } from './IFrameDialogContent';\nimport * as telemetry from '../../common/telemetry';\nimport { Guid } from \"@microsoft/sp-core-library\";\nimport omit = require('lodash/omit');\n\nexport interface IFrameDialogProps extends IDialogProps {\n  /**\n   * iframe Url\n   */\n  url: string;\n  /**\n   * iframe's onload event handler\n   */\n  iframeOnLoad?: (iframe: any) => void;\n  /**\n   * iframe width\n   */\n  width: string;\n  /**\n   * iframe height\n   */\n  height: string;\n  /**\n   * Specifies if iframe content can be displayed in a full screen.\n   * Usage: <IFrameDialog allowFullScreen />\n   */\n  allowFullScreen?: boolean;\n  /**\n   * Specifies if transparency is allowed in iframe\n   */\n  allowTransparency?: boolean;\n  /**\n   * Specifies the top and bottom margins of the content of an <iframe>\n   */\n  marginHeight?: number;\n  /**\n   * Specifies the left and right margins of the content of an <iframe>\n   */\n  marginWidth?: number;\n  /**\n   * Specifies the name of an <iframe>\n   */\n  name?: string;\n  /**\n   * Enables an extra set of restrictions for the content in an <iframe>\n   */\n  sandbox?: string;\n  /**\n   * Specifies whether or not to display scrollbars in an <iframe>\n   */\n  scrolling?: string;\n  /**\n   * When present, it specifies that the <iframe> should look like it is a part of the containing document (no borders or scrollbars)\n   */\n  seamless?: boolean;\n}\n\nexport interface IFrameDialogState {\n  dialogId: string | null;\n  isStylingSet?: boolean;\n}\n\n/**\n * Dialog component to display content in iframe\n */\nexport class IFrameDialog extends React.Component<IFrameDialogProps, IFrameDialogState> {\n\n  public constructor(props: IFrameDialogProps, state: IFrameDialogState) {\n    super(props, state);\n\n    telemetry.track('IFrameDialog', {});\n\n    this.state = {\n      dialogId: null\n    };\n  }\n\n  /**\n   * componentWillMount lifecycle hook\n   */\n  public componentWillMount(): void {\n    this.setState({\n      dialogId: `dialog-${Guid.newGuid().toString()}`\n    });\n  }\n\n  /**\n   * componentDidMount lifecycle hook\n   */\n  public componentDidMount(): void {\n    this.setDialogStyling();\n  }\n\n  public componentWillReceiveProps(nextProps: IFrameDialogProps) {\n    if (nextProps.hidden && nextProps.hidden !== this.props.hidden) {\n      this.setState({\n        isStylingSet: false\n      });\n    }\n  }\n\n  public componentDidUpdate(prevProps: IFrameDialogProps, prevState: IFrameDialogState): void {\n    this.setDialogStyling();\n  }\n\n  public render(): JSX.Element {\n    const {\n      iframeOnLoad,\n      height,\n      allowFullScreen,\n      allowTransparency,\n      marginHeight,\n      marginWidth,\n      name,\n      sandbox,\n      scrolling,\n      seamless,\n      modalProps,\n      className\n    } = this.props;\n\n    let dlgModalProps = {\n      ...modalProps,\n      onLayerDidMount: () => { this.setDialogStyling(); }\n    };\n\n    return (\n      <Dialog\n        className={`${this.state.dialogId} ${className || ''}`}\n        modalProps={dlgModalProps}\n        {...omit(this.props, 'className', 'modalProps')}>\n        <IFrameDialogContent src={this.props.url}\n          iframeOnLoad={iframeOnLoad}\n          close={this.props.onDismiss}\n          height={height}\n          allowFullScreen={allowFullScreen}\n          allowTransparency={allowTransparency}\n          marginHeight={marginHeight}\n          marginWidth={marginWidth}\n          name={name}\n          sandbox={sandbox}\n          scrolling={scrolling}\n          seamless={seamless}\n        />\n      </Dialog>);\n  }\n\n  /**\n   * Set the dialog style\n   */\n  private setDialogStyling(): void {\n    if (!this.state.isStylingSet && !this.props.hidden && this.state.dialogId) {\n      const element = document.querySelector(`.${this.state.dialogId} .ms-Dialog-main`) as HTMLElement;\n      const {\n        width\n      } = this.props;\n      if (element && width) {\n        element.style.width = width;\n        element.style.minWidth = width;\n        element.style.maxWidth = width;\n\n        this.setState({\n          isStylingSet: true\n        });\n      }\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}