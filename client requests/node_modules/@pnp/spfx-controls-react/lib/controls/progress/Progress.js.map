{"version":3,"sources":["controls/progress/Progress.tsx"],"names":[],"mappings":"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","file":"controls/progress/Progress.js","sourcesContent":["import * as React from 'react';\nimport { IProgressProps, IProgressAction, ProgressActionState, IProgressState } from './IProgress';\nimport { Action } from './Action';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport styles from './Progress.module.scss';\nimport * as telemetry from \"../../common/telemetry\";\n\n/**\n* Component to show progress of multiple SEQUENTIALLY executed actions\n*/\nexport class Progress extends React.Component<IProgressProps, IProgressState> {\n\n  constructor(props: IProgressProps) {\n    super(props);\n\n    telemetry.track('ReactProgress', {});\n\n    this.state = {\n      showLongRunningText: props.longRunningText && !props.longRunningTextDisplayDelay\n    };\n  }\n\n  /**\n   * componentDidUpdate lifecycle hook\n   */\n  public componentDidUpdate() {\n    // Check if we need to start a timer to display long running text\n    if (this.props.longRunningText && this.props.longRunningTextDisplayDelay && this.props.currentActionIndex === 0) {\n      setTimeout(() => {\n        this.setState({\n          showLongRunningText: true\n        });\n      }, this.props.longRunningTextDisplayDelay);\n    }\n\n    // long running text should be hidden if all the actions have been executed\n    if (this.state.showLongRunningText && this.props.currentActionIndex >= this.props.actions.length) {\n      this.setState({\n        showLongRunningText: false\n      });\n    }\n  }\n\n  /**\n   * shouldComponentUpdate lifecycle hook\n   *\n   * @param nextProps\n   */\n  public shouldComponentUpdate(nextProps: IProgressProps): boolean {\n    if (this.props.currentActionIndex !== nextProps.currentActionIndex ||\n        this.props.showOverallProgress !== nextProps.showOverallProgress ||\n        this.props.title !== nextProps.title ||\n        !this._areActionsEqual(this.props.actions, nextProps.actions)) {\n      return true;\n    }\n  }\n\n  /**\n   * Default React render method\n   */\n  public render(): React.ReactElement<IProgressProps> {\n    const {\n      currentActionIndex,\n      showOverallProgress,\n      showIndeterminateOverallProgress,\n      hideNotStartedActions,\n      title,\n      actions,\n      height,\n      longRunningText,\n      className,\n      headerClassName,\n      actionClassName,\n      actionsContainerClassName,\n      successIconName,\n      errorIconName,\n      inProgressIconName\n    } = this.props;\n\n    // correcting action index if props contain incorrect one\n    let actionIndex = currentActionIndex;\n    if (actionIndex > actions.length) {\n      actionIndex = actions.length;\n    }\n\n    // getting actions to be rendered based on hideNotStartedActions flag\n    const actionsToRender: IProgressAction[] = hideNotStartedActions ? actions.filter((a, index) => {\n      return index <= currentActionIndex;\n    }) : actions;\n\n    const actionEls: JSX.Element[] = actionsToRender.map((a, index) => {\n      let state = ProgressActionState.notStarted; // by default the state is not started\n\n      if (a.hasError && index <= actionIndex) { // current or prev action has errored\n        state = ProgressActionState.errored;\n      } else if (actionIndex === index) { // current action is in progress\n        state = ProgressActionState.inProgress;\n      } else if (index < actionIndex) { // finished with no errors\n        state = ProgressActionState.finished;\n      }\n\n      return <Action {...a}\n                     state={state}\n                     key={index}\n                     className={actionClassName}\n                     successIconName={successIconName}\n                     errorIconName={errorIconName}\n                     inProgressIconName={inProgressIconName} />;\n    });\n\n    // calculating progress and progressSubText based on parameters\n    let progress: number | null = 0;\n    let progressSubTtext = '';\n\n    if (showIndeterminateOverallProgress) {\n      if (actionIndex || actionIndex < actions.length) {\n        progress = null;\n        progressSubTtext = `${(actionIndex / actions.length * 100).toFixed(0)}%`;\n      }\n    } else {\n      progress = actionIndex ? actionIndex / actions.length : 0;\n      progressSubTtext = actionIndex ? `${(progress * 100).toFixed(0)}%` : '';\n    }\n\n    //   header is displayed if title, showOverallProgress, or showLongRunnungText are set\n    //   progress indicator is shown if showOverallProgress is set to true\n    //   progress indicator subtext is shown if showOverallProgress is set to true and there is a text to display (see if section above)\n    //   long running text is shown if there is a text and we waited needed delay time\n    return (\n      <div className={`${styles.progress} ${className || \"\"}`} style={{ height: height || 'auto' }}>\n        {\n          (title || showOverallProgress || this.state.showLongRunningText) && (\n            <div className={`${styles.header} ${headerClassName || \"\"}`}>\n              <div className={styles.title}>{title}</div>\n\n              {\n                showOverallProgress && (\n                  <div className={styles.progressIndicator}>\n                    <ProgressIndicator percentComplete={progress} />\n                  </div>\n                )\n              }\n\n              {\n                (showOverallProgress && progressSubTtext) && <span className={styles.progressSubtext}>{progressSubTtext}</span>\n              }\n\n              {\n                this.state.showLongRunningText && <div className={styles.longRunningText}>{longRunningText}</div>\n              }\n            </div>\n          )\n        }\n\n        <div className={`${styles.actionsContainer} ${actionsContainerClassName || \"\"}`}>\n          {actionEls}\n        </div>\n      </div>\n    );\n  }\n\n  private _areActionsEqual(actions: IProgressAction[], nextActions: IProgressAction[]): boolean {\n    if (actions.length !== nextActions.length) {\n      return false;\n    }\n\n    for (let i = 0, len = actions.length; i < len; i++) {\n      const action = actions[i];\n      const nextAction = nextActions[i];\n\n      // comparing error state only,\n      // assuming that actions can't be changed during the progress execution\n      if (action.hasError !== nextAction.hasError) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"],"sourceRoot":"../../../src"}