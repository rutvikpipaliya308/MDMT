{"version":3,"sources":["controls/progress/Action.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,yCAAgE;AAChE,+DAA4C;AAC5C,8DAA0E;AAC1E,wDAAuD;AACvD,0DAAyD;AACzD,kEAA2D;AAE3D;IAA4B,0BAAiC;IAA7D;;IAoEA,CAAC;IAlEC;;OAEG;IACI,uBAAM,GAAb;QACQ,IAAA,eAA4H,EAA1H,gBAAK,EAAE,sCAAgB,EAAE,8BAAY,EAAE,gBAAK,EAAE,wBAAS,EAAE,oCAAe,EAAE,gCAAa,EAAE,0CAAkB,CAAgB;QAEnI,IAAM,QAAQ,GAAY,KAAK,KAAK,+BAAmB,CAAC,UAAU,CAAC;QACnE,IAAM,cAAc,GAAG,QAAQ,GAAG,eAAG,CAAC,8BAAM,CAAC,KAAK,EAAE,8BAAM,CAAC,QAAQ,CAAC,GAAG,8BAAM,CAAC,KAAK,CAAC;QAEpF,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,aAAa,GAAG,EAAE,CAAC;QAEvB,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,KAAK,+BAAmB,CAAC,QAAQ;gBAC/B,QAAQ,GAAG,eAAe,IAAI,WAAW,CAAC;gBAC1C,aAAa,GAAG,8BAAM,CAAC,WAAW,CAAC;gBACnC,KAAK,CAAC;YACR,KAAK,+BAAmB,CAAC,UAAU;gBACjC,QAAQ,GAAG,eAAe,IAAI,WAAW,CAAC;gBAC1C,aAAa,GAAG,8BAAM,CAAC,YAAY,CAAC;gBACpC,KAAK,CAAC;YACR,KAAK,+BAAmB,CAAC,OAAO;gBAC9B,QAAQ,GAAG,aAAa,IAAI,OAAO,CAAC;gBACpC,aAAa,GAAG,8BAAM,CAAC,SAAS,CAAC;gBACjC,KAAK,CAAC;YACR,KAAK,+BAAmB,CAAC,UAAU;gBACjC,QAAQ,GAAG,kBAAkB,CAAC;gBAC9B,KAAK,CAAC;QACV,CAAC;QAED,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,eAAe,EAAE,SAAS,CAAC;YACpD,6BAAK,SAAS,EAAE,8BAAM,CAAC,YAAY;gBAE/B,QAAQ,GAAG,CACT,oBAAC,WAAI,IAAC,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,QAAQ,EAAE,QAAQ,GAAI,CAC/E,GAAE,CACD,oBAAC,iBAAO,IAAC,SAAS,EAAE,eAAG,CAAC,8BAAM,CAAC,UAAU,EAAE,8BAAM,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,qBAAW,CAAC,KAAK,GAAI,CACxF;gBAGH,6BAAK,SAAS,EAAE,cAAc,IAAG,KAAK,CAAO,CACzC;YAGJ,gBAAgB,IAAI,CAClB,6BAAK,SAAS,EAAE,8BAAM,CAAC,mBAAmB,IAEtC,gBAAgB,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK,IAAK,OAAA,CACvC,6BAAK,SAAS,EAAE,cAAc,EAAE,GAAG,EAAE,KAAK,IAAG,OAAO,CAAO,CAC5D,EAFwC,CAExC,CAAC,CAEA,CACP;YAID,KAAK,KAAK,+BAAmB,CAAC,OAAO,IAAI,CACvC,6BAAK,SAAS,EAAE,8BAAM,CAAC,cAAc;gBACnC,oBAAC,aAAK,IAAC,SAAS,EAAE,8BAAM,CAAC,YAAY,IAAG,YAAY,CAAS,CACzD,CACP,CAEC,CACP,CAAC;IACJ,CAAC;IACH,aAAC;AAAD,CApEA,AAoEC,CApE2B,KAAK,CAAC,SAAS,GAoE1C;AApEY,wBAAM","file":"controls/progress/Action.js","sourcesContent":["import * as React from 'react';\nimport { IActionProps, ProgressActionState } from './IProgress';\nimport styles from './Progress.module.scss';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\n\nexport class Action extends React.Component<IActionProps, {}> {\n\n  /**\n   * Default React render method\n   */\n  public render(): React.ReactElement<IActionProps> {\n    const { state, subActionsTitles, errorMessage, title, className, successIconName, errorIconName, inProgressIconName } = this.props;\n\n    const inactive: boolean = state === ProgressActionState.notStarted;\n    const labelClassName = inactive ? css(styles.label, styles.inactive) : styles.label;\n\n    let iconName = '';\n    let iconClassName = '';\n\n    switch (state) {\n      case ProgressActionState.finished:\n        iconName = successIconName || 'CheckMark';\n        iconClassName = styles.successIcon;\n        break;\n      case ProgressActionState.notStarted:\n        iconName = successIconName || 'CheckMark';\n        iconClassName = styles.inactiveIcon;\n        break;\n      case ProgressActionState.errored:\n        iconName = errorIconName || 'Error';\n        iconClassName = styles.errorIcon;\n        break;\n      case ProgressActionState.inProgress:\n        iconName = inProgressIconName;\n        break;\n    }\n\n    return (\n      <div className={css(styles.actionContainer, className)}>\n        <div className={styles.actionHeader}>\n          {\n            iconName ? (\n              <Icon className={css(styles.actionIcon, iconClassName)} iconName={iconName} />\n            ): (\n              <Spinner className={css(styles.actionIcon, styles.spinner)} size={SpinnerSize.small} />\n            )\n          }\n\n          <div className={labelClassName}>{title}</div>\n        </div>\n\n        {\n          subActionsTitles && (\n            <div className={styles.subActionsContainer}>\n              {\n                subActionsTitles.map((saTitle, index) => (\n                  <div className={labelClassName} key={index}>{saTitle}</div>\n                ))\n              }\n            </div>\n          )\n        }\n\n        {\n          state === ProgressActionState.errored && (\n            <div className={styles.errorContainer}>\n              <Label className={styles.errorMessage}>{errorMessage}</Label>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}