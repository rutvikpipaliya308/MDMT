{"version":3,"sources":["controls/fileTypeIcon/FileTypeIcon.tsx"],"names":[],"mappings":"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","file":"controls/fileTypeIcon/FileTypeIcon.js","sourcesContent":["import * as React from 'react';\nimport { findIndex } from '@microsoft/sp-lodash-subset';\nimport { IFileTypeIconProps, ApplicationType, ApplicationIconList, IconType, IconSizes, ImageSize, IImageResult, ICON_GENERIC_16, ICON_GENERIC_48, ICON_GENERIC_96, ImageInformation } from './IFileTypeIcon';\nimport * as telemetry from '../../common/telemetry';\nimport { Icon, IconType as IconUIType } from 'office-ui-fabric-react/lib/components/Icon';\nimport * as styles from './FileTypeIcon.module.scss';\n\nconst ICON_GENERIC = 'Page';\nconst ICON_DEFAULT_SIZE = 'icon16';\nconst ICON_CDN_URL = `https://spoprod-a.akamaihd.net/files/fabric/assets/item-types`;\n\n/**\n* File type icon component\n*/\nexport class FileTypeIcon extends React.Component<IFileTypeIconProps, {}> {\n  constructor(props: IFileTypeIconProps) {\n    super(props);\n\n    telemetry.track('ReactFileTypeIcon', {\n      type: IconType[props.type],\n      applicationType: !!props.application,\n      path: !!props.path,\n      size: !!props.size ? ImageSize[props.size] : 'default'\n    });\n  }\n\n  /**\n  * Function which returns the font icon\n  */\n  private _getIconClassName(): string {\n    let className = ICON_GENERIC;\n\n    // Check if the path property is provided\n    if (typeof this.props.path !== 'undefined' && this.props.path !== null) {\n      const path: string = this.props.path;\n      const fileExtension: string = this._getFileExtension(path);\n      // Check the known file extensions list\n      const iconName = this._getIconByExtension(fileExtension.toLowerCase(), IconType.font);\n      if (iconName !== null) {\n        className = iconName.image;\n      }\n    }\n    // Check if the application name has been provided\n    else if (typeof this.props.application !== 'undefined' && this.props.application !== null) {\n      const application: ApplicationType = this.props.application;\n      const iconName = this._getIconByApplicationType(application, IconType.font);\n      if (iconName !== null) {\n        className = iconName.image;\n      }\n    }\n\n    return className;\n  }\n\n\n  /**\n  * Function which returns the image icon\n  */\n  private _getIconImageName(): IImageResult {\n    let size = ICON_DEFAULT_SIZE;\n    let imageInfo: ImageInformation = null;\n\n    // Get the right icon size to display\n    if (typeof this.props.size !== 'undefined' && this.props.size !== null) {\n      // Retrieve the right icon size\n      size = this._getFileSizeName(this.props.size);\n    }\n\n    // Check if the path is provided\n    if (typeof this.props.path !== 'undefined' && this.props.path !== null) {\n      const path: string = this.props.path;\n      const fileExtension: string = this._getFileExtension(path);\n      // Get the image for the current file extension\n      imageInfo = this._getIconByExtension(fileExtension.toLowerCase(), IconType.image);\n    }\n    // Check if the application name has been provided\n    else if (typeof this.props.application !== 'undefined' && this.props.application !== null) {\n      const application: ApplicationType = this.props.application;\n      imageInfo = this._getIconByApplicationType(application, IconType.image);\n    }\n\n    return {\n      size,\n      image: imageInfo && imageInfo.image ? imageInfo.image : null,\n      cdnFallback: imageInfo && imageInfo.cdnFallback ? imageInfo.cdnFallback : null\n    };\n  }\n\n  /**\n  * Function to retrieve the file extension from the path\n  *\n  * @param value File path\n  */\n  private _getFileExtension(value): string {\n    // Split the URL on the dots\n    const splittedValue = value.split('.');\n    // Take the last value\n    let extensionValue = splittedValue.pop();\n    // Check if there are query string params in place\n    if (extensionValue.indexOf('?') !== -1) {\n      // Split the string on the question mark and return the first part\n      const querySplit = extensionValue.split('?');\n      extensionValue = querySplit[0];\n    }\n    return extensionValue;\n  }\n\n  /**\n  * Find the icon name for the provided extension\n  *\n  * @param extension File extension\n  */\n  private _getIconByExtension(extension: string, iconType: IconType): ImageInformation {\n    // Find the application index by the provided extension\n    const appIdx = findIndex(ApplicationIconList, item => { return item.extensions.indexOf(extension.toLowerCase()) !== -1; });\n\n    // Check if an application has found\n    if (appIdx !== -1) {\n      // Check the type of icon, the image needs to get checked for the name\n      if (iconType === IconType.font) {\n        return {\n          image: ApplicationIconList[appIdx].iconName,\n          cdnFallback: null\n        };\n      } else {\n        const knownImgs = ApplicationIconList[appIdx].imageName;\n        // Check if the file extension is known\n        const imgIdx = knownImgs.indexOf(extension);\n\n        const imgExists = ApplicationIconList[appIdx].cdnImageName && ApplicationIconList[appIdx].cdnImageName.indexOf(extension) !== -1;\n        let fallbackImg = null;\n        if (imgExists) {\n          fallbackImg = extension;\n        } else if (ApplicationIconList[appIdx].cdnImageName && ApplicationIconList[appIdx].cdnImageName.length > 0) {\n          fallbackImg = ApplicationIconList[appIdx].cdnImageName[0];\n        }\n\n        if (imgIdx !== -1) {\n          return {\n            image: knownImgs[imgIdx],\n            cdnFallback: fallbackImg\n          };\n        } else {\n          // Return the first one if it was not known\n          return {\n            image: knownImgs[0],\n            cdnFallback: fallbackImg\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n  * Find the icon name for the application\n  *\n  * @param application\n  */\n  private _getIconByApplicationType(application: ApplicationType, iconType: IconType): ImageInformation {\n    // Find the application index by the provided extension\n    const appIdx = findIndex(ApplicationIconList, item => item.application === application);\n\n    // Check if an application has found\n    if (appIdx !== -1) {\n      const knownApp = ApplicationIconList[appIdx];\n\n      let fallbackImg = null;\n      if (knownApp.cdnImageName && knownApp.cdnImageName.length > 0) {\n        fallbackImg = knownApp.cdnImageName[0];\n      }\n\n      if (iconType === IconType.font) {\n        return {\n          image: knownApp.iconName,\n          cdnFallback: fallbackImg\n        };\n      } else {\n        // Check if the application has a known list of image types\n        if (knownApp.imageName.length > 0) {\n          return {\n            image: knownApp.imageName[0],\n            cdnFallback: fallbackImg\n          };\n        } else {\n          return {\n            image: null,\n            cdnFallback: fallbackImg\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n  * Return the right image size for the provided value\n  *\n  * @param value Image size value\n  */\n  private _getFileSizeName(value: ImageSize): string {\n    // Find the image size index by the image size\n    const sizeIdx = findIndex(IconSizes, size => size.size === value);\n\n    // Check if an icon size has been retrieved\n    if (sizeIdx !== -1) {\n      // Return the first icon size\n      return IconSizes[sizeIdx].name;\n    }\n\n    // Return the default file size if nothing was found\n    return ICON_DEFAULT_SIZE;\n  }\n\n  /**\n  * Default React component render method\n  */\n  public render(): React.ReactElement<IFileTypeIconProps> {\n    let iconElm = <span />;\n    // Check the type of icon that needs to be displayed\n    if (this.props.type === IconType.image) {\n      // Return an image icon element\n      const iconImage = this._getIconImageName();\n      // Check if the image was found, otherwise a generic image will be returned\n      if (iconImage.cdnFallback) {\n        const iconUrl = `${ICON_CDN_URL}/${iconImage.size.replace(\"icon\", \"\")}/${iconImage.cdnFallback}.png`;\n        iconElm = <Icon iconType={IconUIType.image} imageProps={{ src: iconUrl }} />;\n      } else if (iconImage.image) {\n        iconElm = <Icon iconType={IconUIType.image} imageProps={{ className: `ms-BrandIcon--${iconImage.size} ms-BrandIcon--${iconImage.image}` }} />;\n      } else {\n        // Return a generic image\n        let imgElm = <img />;\n        // Check the size of the generic image which has to be returned\n        switch (iconImage.size) {\n          case 'icon16':\n          imgElm = <Icon iconType={IconUIType.image} imageProps={{ src: ICON_GENERIC_16 }} />;\n          break;\n          case 'icon48':\n          imgElm = <Icon iconType={IconUIType.image} imageProps={{ src: ICON_GENERIC_48}} />;\n          break;\n          case 'icon96':\n          imgElm = <Icon iconType={IconUIType.image} imageProps={{ src: ICON_GENERIC_96}} />;\n          break;\n          default:\n          imgElm = <Icon iconType={IconUIType.image} imageProps={{ src: ICON_GENERIC_16}} />;\n          break;\n        }\n\n        iconElm = (\n          <div style={{ display: 'inline-block' }}>\n          {imgElm}\n          </div>\n        );\n      }\n    } else {\n      // Return the icon font element\n      const iconClass = this._getIconClassName();\n      iconElm = <Icon iconName={iconClass} />;\n    }\n\n    // Return the icon element\n    return iconElm;\n  }\n}\n"],"sourceRoot":"../../../src"}