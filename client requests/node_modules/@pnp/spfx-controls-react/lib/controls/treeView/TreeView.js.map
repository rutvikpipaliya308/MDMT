{"version":3,"sources":["controls/treeView/TreeView.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+DAA4C;AAC5C,sCAA0C;AAC1C,mDAAyE;AAGzE,uCAAkC;AAClC,kDAAoD;AAEpD;;GAEG;AACH;IAA8B,4BAA+C;IAG3E;;;OAGG;IACH,kBAAY,KAAqB;QAAjC,YACE,kBAAM,KAAK,CAAC,SAkBb;QAxBO,mBAAa,GAAa,EAAE,CAAC;QA2B7B,YAAM,GAAG,UAAC,KAAkB,EAAE,MAAc;YAClD,IAAI,MAAc,CAAC;YACnB,KAAK,CAAC,IAAI,CAAC,UAAC,EAAsB;oBAApB,YAAG,EAAE,gBAAa,EAAb,kCAAa;gBAC9B,EAAE,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC;oBACnB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC7B,MAAM,GAAG,GAAG,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;gBACD,IAAI,IAAI,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBACzC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACT,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC7B,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;oBAC1B,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAA;QApCC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAE5B,KAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,IAAI;YACZ,eAAe,EAAE,KAAK,CAAC,eAAe;YACtC,WAAW,EAAE,EAAE;SAChB,CAAC;QAEF,sBAAsB;QACtB,KAAI,CAAC,wBAAwB,GAAG,KAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACzE,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAErD,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC3B,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAA,OAAO;gBACvC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC;;IACH,CAAC;IAqBO,mCAAgB,GAAxB,UAAyB,SAAsB,EAAE,YAAsB,EAAE,gBAAyB;QAAlG,iBAkBC;QAjBC,IAAI,aAAa,GAAgB,EAAE,CAAC;QAEpC,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI;YACpB,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzF,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzB,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACrB,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,gBAAgB,CAAC,EAAE;gBAC9F,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACK,2CAAwB,GAAhC,UAAiC,IAAe,EAAE,UAAmB;QACnE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,UAAU,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,oCAAiB,GAAzB,UAA0B,IAAe,EAAE,aAA0B;QAArE,iBAYC;QAXC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;gBAC3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC;oBACtD,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC9B,CAAC;gBAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACrB,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBACjD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,mCAAgB,GAAxB,UAAyB,IAAI,EAAE,aAAuB;QAAtD,iBAYC;QAXC,IAAM,QAAQ,GAAQ,IAAI,CAAC;QAE3B,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtB,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;gBAC/B,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAEhC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACrB,KAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBAChD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,iCAAc,GAAtB,UAAuB,IAAe,EAAE,UAAmB;QACzD,IAAI,aAAa,GAAgB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QAExD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,sCAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC/D,uBAAuB;gBACvB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEzB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;oBAC9C,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;gBAC9C,CAAC;gBAED,aAAa,GAAG,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBAE7C,iCAAiC;gBACjC,IAAI,CAAC,QAAQ,CAAC;oBACZ,WAAW,EAAE,aAAa;iBAC3B,CAAC,CAAC;YACL,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,uCAAuC;gBACvC,IAAI,CAAC,QAAQ,CAAC;oBACZ,WAAW,EAAE,CAAC,IAAI,CAAC;iBACpB,CAAC,CAAC;gBAEH,aAAa,GAAG,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,gDAAgD;YAChD,IAAI,aAAa,GAAa,EAAE,CAAC;YACjC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAE7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC7C,CAAC;YAED,aAAa,CAAC,OAAO,CAAC,UAAA,OAAO;gBAC3B,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,IAAI,OAAO,EAAhB,CAAgB,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC;gBACZ,WAAW,EAAE,aAAa;aAC3B,CAAC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAEM,oCAAiB,GAAxB;QACQ,IAAA,eAIQ,EAHZ,gBAAK,EACL,4CAAmB,EACnB,kEAA8B,CACjB;QACf,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,IAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,mBAAmB,EAAE,8BAA8B,CAAC,CAAC;YACxG,IAAI,CAAC,QAAQ,CAAC;gBACZ,WAAW,EAAE,aAAa;aAC3B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACI,yBAAM,GAAb;QAAA,iBAgCC;QA/BO,IAAA,eAOQ,EANZ,gBAAK,EACL,gCAAa,EACb,8BAAY,EACZ,kCAAc,EACd,0DAA0B,EAC1B,oCAAe,CACF;QAEf,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,8BAAM,CAAC,QAAQ,IAE3B,KAAK,CAAC,GAAG,CAAC,UAAC,YAAY,EAAE,KAAK,IAAK,OAAA,CACjC,oBAAC,kBAAQ,IACP,QAAQ,EAAE,YAAY,EACtB,UAAU,EAAE,EAAE,EACd,aAAa,EAAE,IAAI,EACnB,eAAe,EAAE,eAAe,EAChC,aAAa,EAAE,aAAa,EAC5B,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,EACnC,4BAA4B,EAAE,KAAI,CAAC,wBAAwB,EAC3D,sBAAsB,EAAE,KAAI,CAAC,cAAc,EAC3C,YAAY,EAAE,YAAY,EAC1B,cAAc,EAAE,cAAc,EAC9B,0BAA0B,EAAE,0BAA0B,EACtD,aAAa,EAAE,KAAI,CAAC,aAAa,GACjC,CACH,EAfkC,CAelC,CAAC,CAEA,CACP,CAAC;IACJ,CAAC;IACH,eAAC;AAAD,CA3NA,AA2NC,CA3N6B,KAAK,CAAC,SAAS,GA2N5C;AA3NY,4BAAQ","file":"controls/treeView/TreeView.js","sourcesContent":["import * as React from 'react';\nimport styles from './TreeView.module.scss';\nimport uniqBy  = require('lodash/uniqBy');\nimport { ITreeViewProps, TreeViewSelectionMode } from './ITreeViewProps';\nimport { ITreeViewState } from './ITreeViewState';\nimport { ITreeItem } from './ITreeItem';\nimport TreeItem from './TreeItem';\nimport * as telemetry from '../../common/telemetry';\n\n/**\n * Renders the controls for TreeItem component\n */\nexport class TreeView extends React.Component<ITreeViewProps, ITreeViewState> {\n\n  private nodesToExpand: string[] = [];\n  /**\n   * Constructor method\n   * @param props properties interface\n   */\n  constructor(props: ITreeViewProps) {\n    super(props);\n    telemetry.track('TreeView');\n\n    this.state = {\n      loaded: true,\n      defaultExpanded: props.defaultExpanded,\n      activeItems: []\n    };\n\n    // Bind control events\n    this.handleTreeExpandCollapse = this.handleTreeExpandCollapse.bind(this);\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n\n    if (props.expandToSelected) {\n      props.defaultSelectedKeys.forEach(element => {\n        this.pathTo(props.items, element);\n      });\n    }\n  }\n\n\n  private pathTo = (array: ITreeItem[], target: string): string => {\n    let result: string;\n    array.some(({ key, children = [] }) => {\n      if (key === target) {\n        this.nodesToExpand.push(key);\n        result = key;\n        return true;\n      }\n      let temp = this.pathTo(children, target);\n      if (temp) {\n        this.nodesToExpand.push(key);\n        result = key + '.' + temp;\n        return true;\n      }\n    });\n    return result;\n  }\n\n  private getSelectedItems(treeItems: ITreeItem[], selectedKeys: string[], selectedChildren: boolean): ITreeItem[] {\n    let selectedItems: ITreeItem[] = [];\n\n    treeItems.forEach(item => {\n      if (selectedKeys.indexOf(item.key) !== -1 && item.selectable !== false && !item.disabled) {\n        selectedItems.push(item);\n        if (selectedChildren) {\n          this.selectAllChildren(item, selectedItems);\n        }\n      }\n      else {\n        if (item.children) {\n          selectedItems.push(...this.getSelectedItems(item.children, selectedKeys, selectedChildren));\n        }\n      }\n    });\n\n    return selectedItems;\n  }\n\n  /**\n   * Fires When expand / collapse item in TreeView\n   * @argument item The expanded / collapsed item\n   * @argument isExpanded The status of item  (expanded / collapsed)\n   */\n  private handleTreeExpandCollapse(item: ITreeItem, isExpanded: boolean): void {\n    if (typeof this.props.onExpandCollapse === \"function\") {\n      this.props.onExpandCollapse(item, isExpanded);\n    }\n  }\n\n  /**\n   * Selects all child nodes when parent node is selected.\n   * @param item current tree item\n   */\n  private selectAllChildren(item: ITreeItem, selectedItems: ITreeItem[]): void {\n    if (item.children) {\n      item.children.forEach(element => {\n        if (!element.disabled && element.selectable !== false) {\n          selectedItems.push(element);\n        }\n\n        if (element.children) {\n          this.selectAllChildren(element, selectedItems);\n        }\n      });\n    }\n  }\n\n  /**\n   * Unselects all child nodes of selected parent.\n   */\n  private unSelectChildren(item, unselectArray: string[]): void {\n    const tempItem: any = item;\n\n    if (tempItem.children) {\n      tempItem.children.forEach(element => {\n        unselectArray.push(element.key);\n\n        if (element.children) {\n          this.unSelectChildren(element, unselectArray);\n        }\n      });\n    }\n  }\n\n  /**\n   * Fires When Tree Item is selected in TreeView\n   * @argument item The selected item\n   * @argument isSelected The status of item selection\n   */\n  private handleOnSelect(item: ITreeItem, isSelected: boolean): void {\n    let selectedItems: ITreeItem[] = this.state.activeItems;\n\n    if (isSelected) {\n      if (this.props.selectionMode == TreeViewSelectionMode.Multiple) {\n        // Add the checked term\n        selectedItems.push(item);\n\n        if (this.props.selectChildrenIfParentSelected) {\n          this.selectAllChildren(item, selectedItems);\n        }\n\n        selectedItems = uniqBy(selectedItems, 'key');\n\n        // Filter out the duplicate terms\n        this.setState({\n          activeItems: selectedItems\n        });\n      }\n      else {\n        // Only store the current selected item\n        this.setState({\n          activeItems: [item]\n        });\n\n        selectedItems = [item];\n      }\n    }\n    else {\n      // Remove the item from the list of active nodes\n      let unselectArray: string[] = [];\n      unselectArray.push(item.key);\n\n      if (this.props.selectChildrenIfParentSelected) {\n        this.unSelectChildren(item, unselectArray);\n      }\n\n      unselectArray.forEach(element => {\n        selectedItems = selectedItems.filter(i => i.key != element);\n      });\n\n      this.setState({\n        activeItems: selectedItems\n      });\n    }\n\n    if (typeof this.props.onSelect === \"function\") {\n      this.props.onSelect(selectedItems);\n    }\n  }\n\n  public componentDidMount() {\n    const {\n      items,\n      defaultSelectedKeys,\n      selectChildrenIfParentSelected\n    } = this.props;\n    if (defaultSelectedKeys) {\n      const selectedItems = this.getSelectedItems(items, defaultSelectedKeys, selectChildrenIfParentSelected);\n      this.setState({\n        activeItems: selectedItems\n      });\n    }\n  }\n\n  /**\n   * Default React render method\n   */\n  public render(): JSX.Element {\n    const {\n      items,\n      selectionMode,\n      onRenderItem,\n      showCheckboxes,\n      treeItemActionsDisplayMode,\n      defaultExpanded\n    } = this.props;\n\n    return (\n      <div className={styles.treeView}>\n        {\n          items.map((treeNodeItem, index) => (\n            <TreeItem\n              treeItem={treeNodeItem}\n              leftOffset={20}\n              isFirstRender={true}\n              defaultExpanded={defaultExpanded}\n              selectionMode={selectionMode}\n              activeItems={this.state.activeItems}\n              parentCallbackExpandCollapse={this.handleTreeExpandCollapse}\n              parentCallbackOnSelect={this.handleOnSelect}\n              onRenderItem={onRenderItem}\n              showCheckboxes={showCheckboxes}\n              treeItemActionsDisplayMode={treeItemActionsDisplayMode}\n              nodesToExpand={this.nodesToExpand}\n            />\n          ))\n        }\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}