{"version":3,"sources":["controls/treeView/TreeItem.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+DAA4C;AAC5C,gEAA+D;AAC/D,wDAAuD;AACvD,4DAA+D;AAC/D,wCAA0C;AAE1C,mDAAyD;AACzD,mEAA8D;AAE9D,kEAA2D;AAuE3D;;GAEG;AACH,IAAM,aAAa,GAAwB;IACzC,OAAO,EAAE,aAAa;CACvB,CAAC;AAEF;;GAEG;AACH;IAAsC,4BAA+C;IAEnF;;;OAGG;IACH,kBAAY,KAAqB,EAAE,KAAqB;QAAxD,YACE,kBAAM,KAAK,CAAC,SAmBb;QAyFD;;WAEG;QACI,sBAAgB,GAAG,UAAC,IAAI,EAAE,WAAW;YAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACV,IAAA,gBASQ,EARZ,sBAAQ,EACR,kCAAa,EACb,8BAAW,EACX,gEAA4B,EAC5B,oDAAsB,EACtB,gCAAY,EACZ,oCAAc,EACd,4DAA0B,CACb;gBAEf,IAAI,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK;oBAC9C,MAAM,CAAC,CACL,oBAAC,QAAQ,IACP,QAAQ,EAAE,IAAI,EACd,eAAe,EAAE,KAAI,CAAC,KAAK,CAAC,QAAQ,EACpC,UAAU,EAAE,WAAW,EACvB,aAAa,EAAE,eAAa,EAC5B,WAAW,EAAE,aAAW,EACxB,aAAa,EAAE,CAAC,WAAW,GAAG,IAAI,GAAG,KAAK,EAC1C,4BAA4B,EAAE,8BAA4B,EAC1D,sBAAsB,EAAE,wBAAsB,EAC9C,YAAY,EAAE,cAAY,EAC1B,cAAc,EAAE,gBAAc,EAC9B,0BAA0B,EAAE,4BAA0B,EACtD,aAAa,EAAE,KAAI,CAAC,KAAK,CAAC,aAAa,GACvC,CACH,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,oBAAoB,CAAC;YAC9B,CAAC;QACH,CAAC,CAAA;QAED;;WAEG;QACK,4BAAsB,GAAG;QACjC,CAAC,CAAA;QArJC,oCAAoC;QACpC,IAAI,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,QAAQ,CAAC,GAAG,EAA/B,CAA+B,CAAC,CAAC;QAE/E,IAAI,QAAQ,GAAG,KAAK,CAAC,eAAe,CAAC;QACrC,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;QAED,KAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;YAC3B,uCAAuC;YACvC,QAAQ,EAAE,QAAQ;SACnB,CAAC;QAEF,sBAAsB;QACtB,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACnD,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACrE,CAAC;IAED;;OAEG;IACK,gCAAa,GAArB,UAAsB,EAAmD,EAAE,SAAkB;QAC3F,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC/B,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACK,wCAAqB,GAA7B;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC/B,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACrF,CAAC;IAED;;;;OAIG;IACI,4CAAyB,GAAhC,UAAiC,SAAyB;QAA1D,iBAUC;QATC,sDAAsD;QACtD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,sCAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3D,IAAI,MAAM,GAAG,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,KAAK,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAApC,CAAoC,CAAC,CAAC;YAExF,IAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;gBAC3B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;aAC9B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,6BAAU,GAAlB,UAAmB,IAAe;QAAlC,iBA2CC;QA1CC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,UAAU,CAAC,CAAC,CAAC;YAClD,gCAAgC;YAChC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC;YACL,iCAAiC;YACjC,6BACE,SAAS,EAAE,8BAAM,CAAC,MAAM,EACxB,OAAO,EAAE,UAAC,CAAC;oBACT,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,IAAI,sCAAqB,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC;wBACvF,CAAC,CAAC,eAAe,EAAE,CAAC;wBACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACnB,KAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAC9C,CAAC;oBACH,CAAC;gBACH,CAAC;gBAEC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,UAAU,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ;oBACvE,8BAAM,SAAS,EAAE,8BAAM,CAAC,UAAU,aAAe;gBAIjD,oCAAoC;gBACpC,IAAI,CAAC,SAAS;oBACd;wBACE,oBAAC,WAAI,IAAC,SAAS,EAAE,8BAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,GAAI;iCAEzF;gBAGV,IAAI,CAAC,KAAK;gBAET,kBAAkB;gBAClB,IAAI,CAAC,QAAQ;oBACb,6BAAK,SAAS,EAAE,8BAAM,CAAC,YAAY,IAChC,IAAI,CAAC,QAAQ,CACV,CAEJ,CACP,CAAC;QACJ,CAAC;IACH,CAAC;IA+CD;;OAEG;IACI,yBAAM,GAAb;QAAA,iBAsFC;QArFO,IAAA,eAAgG,EAA9F,sBAAQ,EAAE,0BAAU,EAAE,kCAAc,EAAE,gCAAa,EAAE,0DAA0B,CAAgB;QAEjG,IAAA,eAGQ,EAFZ,sBAAQ,EACR,sBAAQ,CACK;QAEf,IAAM,UAAU,GAAwB;YACtC,UAAU,EAAK,UAAU,OAAI;SAC9B,CAAC;QAEF,IAAM,aAAa,GAAwB;YACzC,UAAU,EAAE,QAAQ,CAAC,QAAQ,GAAG,GAAG,GAAM,UAAU,OAAI;SACxD,CAAC;QAEF,MAAM,CAAC,CACL;YACE,6BAAK,SAAS,EAAK,8BAAM,CAAC,QAAQ,SAAI,8BAAM,CAAC,IAAM;gBACjD,6BAAK,SAAS,EAAE,KAAG,8BAAM,CAAC,YAAc;gBAEpC,+DAA+D;gBAC/D,QAAQ,CAAC,QAAQ;oBACjB,oBAAC,mBAAU,IACT,SAAS,EAAE,QAAQ,GAAG,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,EAAE,QAAQ,EAAE,cAAc,EAAE,EAChF,GAAG,EAAE,QAAQ,GAAG,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC,mBAAmB,EAC3E,KAAK,EAAE,QAAQ,GAAG,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC,mBAAmB,EAC7E,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,qBAAqB,EAAE,EAA5B,CAA4B,GAChC,CAEX;gBACN,6BACE,SAAS,EAAE,eAAG;wBACZ,GAAC,8BAAM,CAAC,WAAW,IAAG,IAAI;wBAC1B,GAAC,8BAAM,CAAC,UAAU,IAAG,CAAC,cAAc;wBACpC,GAAC,8BAAM,CAAC,OAAO,IAAG,QAAQ;wBAC1B,GAAC,8BAAM,CAAC,QAAQ,IAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ;4BACtC,EACF,KAAK,EAAE,aAAa,EACpB,OAAO,EAAE,UAAC,CAAC;wBACT,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,IAAI,sCAAqB,CAAC,IAAI,IAAI,QAAQ,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC;4BAC3F,CAAC,CAAC,eAAe,EAAE,CAAC;4BACpB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,CAAC,aAAa,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACvD,KAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;4BAC9C,CAAC;wBACH,CAAC;oBACH,CAAC;oBAGC,kHAAkH;oBAClH,CAAC,QAAQ,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI,aAAa,IAAI,sCAAqB,CAAC,IAAI,IAAI,cAAc;wBAC/F,oBAAC,mBAAQ,IACP,OAAO,EAAE,QAAQ,EACjB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAC3B,SAAS,EAAE,8BAAM,CAAC,QAAQ,EAC1B,QAAQ,EAAE,IAAI,CAAC,aAAa,GAC5B;oBAGF,oCAAoC;oBACpC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;oBAGzB,+BAA+B;oBAC/B,QAAQ,CAAC,OAAO;wBAChB,6BAAK,SAAS,EAAE,8BAAM,CAAC,QAAQ;4BAC7B,oBAAC,gCAAsB,IAAC,QAAQ,EAAE,QAAQ,EACxC,eAAe,EAAE;oCACf,OAAO,EAAE,QAAQ,CAAC,OAAO;oCACzB,0BAA0B,EAAE,0BAA0B;iCACvD,EACD,sBAAsB,EAAE,IAAI,CAAC,sBAAsB,GAAI,CACrD,CAEJ,CACF;YACN,6BAAK,KAAK,EAAE,UAAU,IAAI,EAAE;YAExB,qBAAqB;YACrB,QAAQ,IAAI,QAAQ,CAAC,QAAQ;kBACzB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,kDAAkD;kBACvG,IAAI,CAEN,CACF,CACP,CAAC;;IACJ,CAAC;IACH,eAAC;AAAD,CA1PA,AA0PC,CA1PqC,KAAK,CAAC,SAAS,GA0PpD","file":"controls/treeView/TreeItem.js","sourcesContent":["import * as React from 'react';\nimport styles from './TreeView.module.scss';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\nimport { IconButton } from 'office-ui-fabric-react/lib/Button';\nimport * as strings from 'ControlStrings';\nimport { ITreeItem } from './ITreeItem';\nimport { TreeViewSelectionMode } from './ITreeViewProps';\nimport TreeItemActionsControl from './TreeItemActionsControl';\nimport { TreeItemActionsDisplayMode } from './ITreeItemActions';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\n\n/**\n * TreeItem properties interface\n */\nexport interface ITreeItemProps {\n  /**\n   * Current tree item.\n   */\n  treeItem: ITreeItem;\n  /**\n   * Selection mode of tree item.\n   */\n  selectionMode: TreeViewSelectionMode;\n  /**\n   * Specifies the left padding for current tree item based on hierarchy.\n   */\n  leftOffset: number;\n  /**\n   * Specifies whether current tree item is a root.\n   */\n  isFirstRender: boolean;\n  /**\n   * Specifies whether current tree item should be rendered as an expanded.\n   */\n  defaultExpanded: boolean;\n  /**\n   * Specifies whether current tree item should be rendered as an expanded.\n   */\n  showCheckboxes: boolean;\n  /**\n   * Stores the selected tree items\n   */\n  activeItems: ITreeItem[];\n  /**\n   * Display mode of the tree item actions.\n   */\n  treeItemActionsDisplayMode?: TreeItemActionsDisplayMode;\n\n  /**\n   * Callback function called when an item is expanded / collapsed.\n   */\n  parentCallbackExpandCollapse: (item: ITreeItem, isExpanded: boolean) => void;\n  /**\n   * Callback function called when an item is selected.\n   */\n  parentCallbackOnSelect: (item: ITreeItem, isSelected: boolean) => void;\n  /**\n   * Customize how item is rendered.\n   */\n  onRenderItem?: (item: ITreeItem) => JSX.Element;\n\n  nodesToExpand: any[];\n}\n\n\n\n/**\n * TreeItem state interface\n */\nexport interface ITreeItemState {\n  /**\n   * Specifies whether current tree item is selected\n   */\n  selected?: boolean;\n  /**\n   * Specifies whether current tree item is expanded\n   */\n  expanded?: boolean;\n}\n\n/**\n * CSS styles for checkbox\n */\nconst checkBoxStyle: React.CSSProperties = {\n  display: \"inline-flex\"\n};\n\n/**\n * Renders the controls for TreeItem component\n */\nexport default class TreeItem extends React.Component<ITreeItemProps, ITreeItemState> {\n\n  /**\n   * Constructor method\n   * @param props properties interface\n   */\n  constructor(props: ITreeItemProps, state: ITreeItemState) {\n    super(props);\n\n    // Check if current item is selected\n    let active = props.activeItems.filter(item => item.key === props.treeItem.key);\n\n    let expanded = props.defaultExpanded;\n    if (props.nodesToExpand.indexOf(props.treeItem.key) != -1) {\n      expanded = true;\n    }\n\n    this.state = {\n      selected: active.length > 0,\n      // expanded: this.props.defaultExpanded\n      expanded: expanded\n    };\n\n    // Bind control events\n    this._itemSelected = this._itemSelected.bind(this);\n    this._handleExpandCollapse = this._handleExpandCollapse.bind(this);\n  }\n\n  /**\n   * Handle the checkbox change trigger\n   */\n  private _itemSelected(ev: React.FormEvent<HTMLElement | HTMLInputElement>, isChecked: boolean): void {\n    this.setState({\n      selected: !this.state.selected\n    });\n\n    this.props.parentCallbackOnSelect(this.props.treeItem, isChecked);\n  }\n\n  /**\n   * Handle the click event: collapse or expand\n   */\n  private _handleExpandCollapse(): void {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n\n    this.props.parentCallbackExpandCollapse(this.props.treeItem, !this.state.expanded);\n  }\n\n  /**\n   * Lifecycle event hook when component retrieves new properties\n   * @param nextProps\n   * @param nextContext\n   */\n  public componentWillReceiveProps(nextProps: ITreeItemProps): void {\n    // If selection is turned on, set the item as selected\n    if (this.props.selectionMode != TreeViewSelectionMode.None) {\n      let active = nextProps.activeItems.filter(item => item.key === this.props.treeItem.key);\n\n      this.setState({\n        selected: active.length > 0,\n        expanded: this.state.expanded\n      });\n    }\n  }\n\n  /**\n   * Default or custom rendering of tree item\n   */\n  private renderItem(item: ITreeItem): JSX.Element {\n    if (typeof this.props.onRenderItem === \"function\") {\n      // Custom rendering of tree item\n      return this.props.onRenderItem(item);\n    }\n    else {\n      return (\n        // Default rendering of tree item\n        <div\n          className={styles.labels}\n          onClick={(e) => {\n            if (this.props.selectionMode != TreeViewSelectionMode.None && item.selectable != false) {\n              e.stopPropagation();\n              if (!item.disabled) {\n                this._itemSelected(e, !this.state.selected);\n              }\n            }\n          }}>\n          {\n            this.props.showCheckboxes && item.selectable == false && !item.children &&\n            <span className={styles.blankspace}>&nbsp;</span>\n          }\n\n          {\n            // Rendering when item has iconProps\n            item.iconProps &&\n            <span>\n              <Icon className={styles.icon} iconName={item.iconProps.iconName} style={item.iconProps.style} />\n              &nbsp;\n              </span>\n          }\n\n          {item.label}\n          {\n            // Render sublabel\n            item.subLabel &&\n            <div className={styles.itemSubLabel}>\n              {item.subLabel}\n            </div>\n          }\n        </div>\n      );\n    }\n  }\n\n  /**\n   * Process the child nodes\n   */\n  public createChildNodes = (list, paddingLeft) => {\n    if (list.length) {\n      const {\n        treeItem,\n        selectionMode,\n        activeItems,\n        parentCallbackExpandCollapse,\n        parentCallbackOnSelect,\n        onRenderItem,\n        showCheckboxes,\n        treeItemActionsDisplayMode\n      } = this.props;\n\n      let childrenWithHandlers = list.map((item, index) => {\n        return (\n          <TreeItem\n            treeItem={item}\n            defaultExpanded={this.state.expanded}\n            leftOffset={paddingLeft}\n            selectionMode={selectionMode}\n            activeItems={activeItems}\n            isFirstRender={!paddingLeft ? true : false}\n            parentCallbackExpandCollapse={parentCallbackExpandCollapse}\n            parentCallbackOnSelect={parentCallbackOnSelect}\n            onRenderItem={onRenderItem}\n            showCheckboxes={showCheckboxes}\n            treeItemActionsDisplayMode={treeItemActionsDisplayMode}\n            nodesToExpand={this.props.nodesToExpand}\n          />\n        );\n      });\n\n      return childrenWithHandlers;\n    }\n  }\n\n  /**\n   * Default action callback\n   */\n  private treeItemActionCallback = (): void => {\n  }\n\n  /**\n   * Default React render method\n   */\n  public render(): React.ReactElement<ITreeItemProps> {\n    const { treeItem, leftOffset, showCheckboxes, selectionMode, treeItemActionsDisplayMode } = this.props;\n\n    const {\n      expanded,\n      selected\n    } = this.state;\n\n    const styleProps: React.CSSProperties = {\n      marginLeft: `${leftOffset}px`\n    };\n\n    const contentStyles: React.CSSProperties = {\n      marginLeft: treeItem.children ? '0' : `${leftOffset}px`\n    };\n\n    return (\n      <div>\n        <div className={`${styles.listItem} ${styles.tree}`}>\n          <div className={`${styles.treeSelector}`}>\n            {\n              // Render expand / collapse icons for items which has children.\n              treeItem.children &&\n              <IconButton\n                iconProps={expanded ? { iconName: 'ChevronDown' } : { iconName: 'ChevronRight' }}\n                alt={expanded ? strings.TreeViewCollapseTitle : strings.TreeViewExpandTitle}\n                title={expanded ? strings.TreeViewCollapseTitle : strings.TreeViewExpandTitle}\n                onClick={() => this._handleExpandCollapse()}>\n              </IconButton>\n            }\n          </div>\n          <div\n            className={css({\n              [styles.itemContent]: true,\n              [styles.noCheckBox]: !showCheckboxes,\n              [styles.checked]: selected,\n              [styles.disabled]: !!treeItem.disabled\n            })}\n            style={contentStyles}\n            onClick={(e) => {\n              if (this.props.selectionMode != TreeViewSelectionMode.None && treeItem.selectable != false) {\n                e.stopPropagation();\n                if (!treeItem.disabled && e.currentTarget === e.target) {\n                  this._itemSelected(e, !this.state.selected);\n                }\n              }\n            }}\n          >\n            {\n              // Render checkbox (if item is selectable, Selection mode is not None, and showCheckboxes property is set to true)\n              (treeItem.selectable != false) && selectionMode != TreeViewSelectionMode.None && showCheckboxes &&\n              <Checkbox\n                checked={selected}\n                disabled={treeItem.disabled}\n                className={styles.checkbox}\n                onChange={this._itemSelected}\n              />\n            }\n            {\n              // Call default render item function\n              this.renderItem(treeItem)\n            }\n            {\n              // Render actions for tree item\n              treeItem.actions &&\n              <div className={styles.itemMenu}>\n                <TreeItemActionsControl treeItem={treeItem}\n                  treeItemActions={{\n                    actions: treeItem.actions,\n                    treeItemActionsDisplayMode: treeItemActionsDisplayMode\n                  }}\n                  treeItemActionCallback={this.treeItemActionCallback} />\n              </div>\n            }\n          </div>\n        </div>\n        <div style={styleProps || {}}>\n          {\n            // Render child nodes\n            expanded && treeItem.children\n              ? this.createChildNodes(treeItem.children, leftOffset) // we double left padding on every recursion/depth\n              : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}