{"version":3,"sources":["controls/treeView/ButtonTreeItemAction.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,4DAAqE;AAGrE,+DAA4C;AAE5C;;GAEG;AACH;IAAkD,wCAA6C;IAA/F;QAAA,qEA8FC;QArFC;;WAEG;QACK,6BAAuB,GAAG,UAAC,cAA+B;YAChE,IAAI,IAAI,GAAW,cAAc,CAAC,KAAK,CAAC;YACxC,IAAI,IAAI,GAAW,cAAc,CAAC,KAAK,CAAC;YACxC,IAAI,SAAS,GAAe,cAAc,CAAC,SAAS,CAAC;YACrD,IAAI,QAAQ,GAAW,cAAc,CAAC,KAAK,CAAC;YAE5C,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,SAAS,WAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;QAC7C,CAAC,CAAA;QAED;;WAEG;QACK,kCAA4B,GAAG,UAAC,cAA+B;YACrE,IAAI,MAAM,GAAwB;gBAChC,eAAe,EAAE,aAAa;gBAC9B,MAAM,EAAE,MAAM;aACf,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAA;QAeD;;WAEG;QACK,qBAAe,GAAG,UAAO,cAA+B;;;4BAC9D,qBAAM,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;wBAAxD,SAAwD,CAAC;wBACzD,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC;;;;aACrC,CAAA;;IA0CH,CAAC;IA5FC;;OAEG;IACI,iDAAkB,GAAzB;QACE,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACtC,CAAC;IA0BD;;OAEG;IACK,2DAA4B,GAApC;QACU,IAAA,4CAAe,CAAgB;QAEvC,GAAG,CAAC,CAAiB,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe;YAA/B,IAAM,MAAM,wBAAA;YACf,EAAE,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;SACF;IACH,CAAC;IAUD;;OAEG;IACI,qCAAM,GAAb;QAAA,iBAoCC;QAnCO,IAAA,eAA0C,EAAxC,sBAAQ,EAAE,oCAAe,CAAgB;QAEjD,qCAAqC;QACrC,IAAM,aAAa,GAAG,eAAe,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,MAAM,EAAT,CAAS,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,CACL,iCAEI,eAAe;YACf,eAAe,CAAC,GAAG,CAAC,UAAA,cAAc;gBAC1B,IAAA,kDAAkF,EAAhF,cAAI,EAAE,cAAI,EAAE,wBAAS,EAAE,sBAAQ,CAAkD;gBAEzF,MAAM,CAAC,CACL,cAAc,CAAC,MAAM,GAAG,CACtB,IAAI,CACL,GAAG,CACA;oBACE,oBAAC,yBAAgB,IAAC,KAAK,EAAE,IAAI,EAC3B,OAAO,EAAE,cAAQ,KAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EACxD,SAAS,EAAE,SAAS,EACpB,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,QAAQ,EACf,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,QAAQ,CAAC,GAAG,EACjB,SAAS,EAAE,8BAAM,CAAC,YAAY,GAAI,CAChC,CACP,CACJ,CAAC;YACJ,CAAC,CAAC,CAEA,CACP,CAAC;IACJ,CAAC;IACH,2BAAC;AAAD,CA9FA,AA8FC,CA9FiD,KAAK,CAAC,SAAS,GA8FhE","file":"controls/treeView/ButtonTreeItemAction.js","sourcesContent":["import * as React from 'react';\nimport { CommandBarButton } from 'office-ui-fabric-react/lib/Button';\nimport { IIconProps } from 'office-ui-fabric-react/lib/Icon';\nimport { ITreeItemAction, IConcreteTreeItemActionProps } from './ITreeItemActions';\nimport styles from './TreeView.module.scss';\n\n/**\n * Renders the controls for Button TreeItem action component\n */\nexport default class ButtonTreeItemAction extends React.Component<IConcreteTreeItemActionProps> {\n\n  /**\n   * componentWillMount lifecycle hook\n   */\n  public componentWillMount(): void {\n    this.checkForImmediateInvocations();\n  }\n\n  /**\n   * Prepares the command bar button\n   */\n  private prepareCommandBarButton = (treeItemAction: ITreeItemAction): { name: string, text: string, iconProps: IIconProps, btnTitle: string } => {\n    let name: string = treeItemAction.title;\n    let text: string = treeItemAction.title;\n    let iconProps: IIconProps = treeItemAction.iconProps;\n    let btnTitle: string = treeItemAction.title;\n\n    return { name, text, iconProps, btnTitle };\n  }\n\n  /**\n   * Gets the action button styling\n   */\n  private getTreeItemActionButtonStyle = (treeItemAction: ITreeItemAction): React.CSSProperties => {\n    let result: React.CSSProperties = {\n      backgroundColor: \"transparent\",\n      height: \"32px\"\n    };\n\n    return result;\n  }\n\n  /**\n   * Check if there are action to immediatly invoke\n   */\n  private checkForImmediateInvocations() {\n    const { treeItemActions } = this.props;\n\n    for (const action of treeItemActions) {\n      if (action.invokeActionOnRender) {\n        this.onActionExecute(action);\n      }\n    }\n  }\n\n  /**\n   * On action execution\n   */\n  private onActionExecute = async (treeItemAction: ITreeItemAction) => {\n    await treeItemAction.actionCallback(this.props.treeItem);\n    this.props.treeItemActionCallback();\n  }\n\n  /**\n   * Default React render method\n   */\n  public render(): React.ReactElement<IConcreteTreeItemActionProps> {\n    const { treeItem, treeItemActions } = this.props;\n\n    // Check if there are actions to show\n    const actionsToShow = treeItemActions.filter(a => !a.hidden);\n    if (actionsToShow && actionsToShow.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        {\n          treeItemActions &&\n          treeItemActions.map(treeItemAction => {\n            const { name, text, iconProps, btnTitle } = this.prepareCommandBarButton(treeItemAction);\n\n            return (\n              treeItemAction.hidden ? (\n                null\n              ) : (\n                  <div>\n                    <CommandBarButton split={true}\n                      onClick={() => { this.onActionExecute(treeItemAction); }}\n                      iconProps={iconProps}\n                      text={text}\n                      title={btnTitle}\n                      name={name}\n                      key={treeItem.key}\n                      className={styles.actionButton} />\n                  </div>\n                )\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}