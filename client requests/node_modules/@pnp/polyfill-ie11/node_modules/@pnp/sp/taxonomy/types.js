import { __decorate, __extends } from "tslib";
import { defaultPath } from "../decorators";
import { _SharePointQueryableCollection, spInvokableFactory, _SharePointQueryableInstance } from "../sharepointqueryable";
import { tag } from "../telemetry";
/**
 * Describes a collection of Form objects
 *
 */
var _TermStore = /** @class */ (function (_super) {
    __extends(_TermStore, _super);
    function _TermStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermStore.prototype, "groups", {
        /**
         * Gets the term groups associated with this tenant
         */
        get: function () {
            return tag.configure(TermGroups(this), "txts.groups");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermStore.prototype, "sets", {
        /**
         * Gets the term sets associated with this tenant
         */
        get: function () {
            return tag.configure(TermSets(this), "txts.sets");
        },
        enumerable: false,
        configurable: true
    });
    _TermStore = __decorate([
        defaultPath("_api/v2.1/termstore")
    ], _TermStore);
    return _TermStore;
}(_SharePointQueryableInstance));
export { _TermStore };
export var TermStore = spInvokableFactory(_TermStore);
var _TermGroups = /** @class */ (function (_super) {
    __extends(_TermGroups, _super);
    function _TermGroups() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _TermGroups.prototype.getById = function (id) {
        return tag.configure(TermGroup(this, id), "txtgs.getById");
    };
    _TermGroups = __decorate([
        defaultPath("groups")
    ], _TermGroups);
    return _TermGroups;
}(_SharePointQueryableCollection));
export { _TermGroups };
export var TermGroups = spInvokableFactory(_TermGroups);
var _TermGroup = /** @class */ (function (_super) {
    __extends(_TermGroup, _super);
    function _TermGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermGroup.prototype, "sets", {
        /**
         * Gets the term sets associated with this tenant
         */
        get: function () {
            return tag.configure(TermSets(this, "sets"), "txtg.sets");
        },
        enumerable: false,
        configurable: true
    });
    return _TermGroup;
}(_SharePointQueryableInstance));
export { _TermGroup };
export var TermGroup = spInvokableFactory(_TermGroup);
var _TermSets = /** @class */ (function (_super) {
    __extends(_TermSets, _super);
    function _TermSets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _TermSets.prototype.getById = function (id) {
        return tag.configure(TermSet(this, id), "txts.getById");
    };
    _TermSets = __decorate([
        defaultPath("sets")
    ], _TermSets);
    return _TermSets;
}(_SharePointQueryableCollection));
export { _TermSets };
export var TermSets = spInvokableFactory(_TermSets);
var _TermSet = /** @class */ (function (_super) {
    __extends(_TermSet, _super);
    function _TermSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_TermSet.prototype, "parentGroup", {
        // public get terms(): ITerms {
        //     return Terms(this);
        // }
        get: function () {
            return tag.configure(TermGroup(this, "parentGroup"), "txts.parentGroup");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "children", {
        get: function () {
            return tag.configure(Children(this), "txts.children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_TermSet.prototype, "relations", {
        get: function () {
            return tag.configure(Relations(this), "txts.relations");
        },
        enumerable: false,
        configurable: true
    });
    _TermSet.prototype.getTermById = function (id) {
        return tag.configure(this.clone(Term, "terms/" + id), "txts.getTermById");
    };
    return _TermSet;
}(_SharePointQueryableInstance));
export { _TermSet };
export var TermSet = spInvokableFactory(_TermSet);
// @defaultPath("terms")
// export class _Terms extends _SharePointQueryableCollection<ITermInfo[]> {
//     /**
//      * Gets a term group by id
//      *
//      * @param id Id of the term group to access
//      */
//     public getById(id: string): ITerm {
//         return Term(this, id);
//     }
// }
// export interface ITerms extends _Terms { }
// export const Terms = spInvokableFactory<ITerms>(_Terms);
var _Children = /** @class */ (function (_super) {
    __extends(_Children, _super);
    function _Children() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Children = __decorate([
        defaultPath("children")
    ], _Children);
    return _Children;
}(_SharePointQueryableCollection));
export { _Children };
export var Children = spInvokableFactory(_Children);
var _Term = /** @class */ (function (_super) {
    __extends(_Term, _super);
    function _Term() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Term.prototype, "parent", {
        get: function () {
            return tag.configure(Term(this, "parent"), "txt.parent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "children", {
        get: function () {
            return tag.configure(Children(this), "txt.children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "relations", {
        get: function () {
            return tag.configure(Relations(this), "txt.relations");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Term.prototype, "set", {
        get: function () {
            return tag.configure(TermSet(this, "set"), "txt.set");
        },
        enumerable: false,
        configurable: true
    });
    return _Term;
}(_SharePointQueryableInstance));
export { _Term };
export var Term = spInvokableFactory(_Term);
var _Relations = /** @class */ (function (_super) {
    __extends(_Relations, _super);
    function _Relations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a term group by id
     *
     * @param id Id of the term group to access
     */
    _Relations.prototype.getById = function (id) {
        return tag.configure(Relation(this, id), "txrs.getById");
    };
    _Relations = __decorate([
        defaultPath("relations")
    ], _Relations);
    return _Relations;
}(_SharePointQueryableCollection));
export { _Relations };
export var Relations = spInvokableFactory(_Relations);
var _Relation = /** @class */ (function (_super) {
    __extends(_Relation, _super);
    function _Relation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Relation.prototype, "fromTerm", {
        get: function () {
            return tag.configure(Term(this, "fromTerm"), "txr.fromTerm");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Relation.prototype, "toTerm", {
        get: function () {
            return tag.configure(Term(this, "toTerm"), "txr.toTerm");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Relation.prototype, "set", {
        get: function () {
            return tag.configure(TermSet(this, "set"), "txr.set");
        },
        enumerable: false,
        configurable: true
    });
    return _Relation;
}(_SharePointQueryableInstance));
export { _Relation };
export var Relation = spInvokableFactory(_Relation);
//# sourceMappingURL=types.js.map