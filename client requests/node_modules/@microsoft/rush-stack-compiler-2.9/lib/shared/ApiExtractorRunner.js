"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const api_extractor_1 = require("@microsoft/api-extractor");
const ApiExtractor = require("@microsoft/api-extractor");
const RushStackCompilerBase_1 = require("./RushStackCompilerBase");
const ToolPaths_1 = require("./ToolPaths");
/**
 * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect
 * common problems and generate a report of the exported public API. The task uses the entry point of a project to
 * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.
 * @beta
 */
class ApiExtractorRunner extends RushStackCompilerBase_1.RushStackCompilerBase {
    constructor(extractorConfig, extractorOptions, rootPath, terminalProvider) {
        super({}, rootPath, terminalProvider);
        this._extractorConfig = extractorConfig;
        this._extractorOptions = extractorOptions;
    }
    invoke() {
        try {
            const extractorOptions = Object.assign({}, this._extractorOptions, { messageCallback: (message) => {
                    switch (message.logLevel) {
                        case "error" /* Error */:
                            this._terminal.writeErrorLine.bind(this._terminal);
                            break;
                        case "warning" /* Warning */:
                            this._terminal.writeWarningLine.bind(this._terminal);
                            break;
                        case "info" /* Info */:
                            this._terminal.writeLine.bind(this._terminal);
                            break;
                        case "verbose" /* Verbose */:
                            this._terminal.writeVerboseLine.bind(this._terminal);
                            break;
                        default:
                            return;
                    }
                    message.handled = true;
                }, typescriptCompilerFolder: ToolPaths_1.ToolPaths.typescriptPackagePath });
            // NOTE: ExtractorResult.succeeded indicates whether errors or warnings occurred, however we
            // already handle this above via our customLogger
            api_extractor_1.Extractor.invoke(this._extractorConfig, extractorOptions);
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
}
ApiExtractorRunner.apiExtractor = ApiExtractor;
exports.ApiExtractorRunner = ApiExtractorRunner;
//# sourceMappingURL=ApiExtractorRunner.js.map