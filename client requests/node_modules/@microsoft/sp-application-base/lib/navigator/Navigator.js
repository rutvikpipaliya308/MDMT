import * as tslib_1 from "tslib";
import { Validate, _SPEventManager } from '@microsoft/sp-core-library';
import { _SPLoaderFlights } from '@microsoft/sp-loader';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import BaseApplication from '../BaseApplication';
import { NavigationOperation } from './INavigationResult';
import NavigationDataError from './NavigationDataError';
import NavigationDataProvider from './NavigationDataProvider';
import NavigationOrchestrator from './NavigationOrchestrator';
import PrefetchedDataEventArgs from './PrefetchedDataEventArgs';
import { Killswitches } from '../common/Killswitches';
var navigateQosScenarioName = 'Navigator.navigate';
var navigateToPreloadedDataQosScenarioName = 'Navigator.navigateToPreloadedData';
var prefetchNavigationDataQosScenarioName = 'Navigator.prefetch';
var Navigator =  (function () {
    function Navigator(serviceScope, applicationManager) {
        var _this = this;
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._navigationDataProvider = new NavigationDataProvider(serviceScope, function (data) {
            _this._validatePreloadedData(data);
        });
        this._navigationOrchestrator = new NavigationOrchestrator(serviceScope, applicationManager, this);
    }
    Object.defineProperty(Navigator.prototype, "preloadedData", {
        get: function () {
            Validate.isNotNullOrUndefined(this._preloadedData, 'preloadedData');
            return this._preloadedData;
        },
        enumerable: true,
        configurable: true
    });
    Navigator.prototype.navigate = function (url, props) {
        var _this = this;
        Validate.isNonemptyString(url, 'url');
        var qosMonitor = new _QosMonitor(navigateQosScenarioName);
        return this._navigationDataProvider.getData(url, props).then(function (response) {
            return response.preloadedData.then(function (preloadedData) {
                if (response.prefetchedData) {
                    _this._raisePrefetchDataEvent(url, preloadedData, response.prefetchedData);
                }
                return _this.navigateToPreloadedData(preloadedData);
            }).then(function (navigationResult) {
                if (navigationResult &&
                    navigationResult.operation === NavigationOperation.Unsupported &&
                    !Killswitches.isNavigationDataErrorKSActive()) {
                    qosMonitor.writeExpectedFailure('Unsupported');
                }
                else {
                    qosMonitor.writeSuccess();
                }
                return navigationResult;
            });
        }).catch(function (error) {
            var innerError = error;
            var isExpected = false;
            if (error instanceof NavigationDataError) {
                innerError = error.innerError;
                isExpected = error.isExpected;
            }
            isExpected ?
                qosMonitor.writeExpectedFailure(undefined, error) :
                qosMonitor.writeUnexpectedFailure(undefined, error);
            throw innerError;
        });
    };
    Navigator.prototype.prefetch = function (url, props) {
        if (!_SPLoaderFlights._useNewBootSequence()) {
            return Promise.resolve();
        }
        var prefetchProps = tslib_1.__assign({}, props, { isPrefetchRequest: true });
        var qosMonitor = new _QosMonitor(prefetchNavigationDataQosScenarioName);
        return this._navigationDataProvider.getData(url, prefetchProps).then(function (response) {
            qosMonitor.writeSuccess();
        }).catch(function (error) {
            qosMonitor.writeUnexpectedFailure(undefined, error);
        });
    };
    Navigator.prototype.navigateToPreloadedData = function (preloadedData) {
        var _this = this;
        var qosMonitor = new _QosMonitor(navigateToPreloadedDataQosScenarioName);
        try {
            this._validatePreloadedData(preloadedData);
            this._preloadedData = preloadedData;
            return this._navigationOrchestrator.navigate(preloadedData).then(function (navigationResult) {
                _this._preloadedData = navigationResult.preloadedData;
                qosMonitor.writeSuccess();
                return navigationResult;
            }).catch(function (error) {
                qosMonitor.writeUnexpectedFailure('AsyncError', error);
                throw error;
            });
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure('SyncError', error);
            return Promise.reject(error);
        }
    };
    Navigator.prototype.navigateToApplication = function (preloadedData) {
        var _this = this;
        var qosMonitor = new _QosMonitor(navigateToPreloadedDataQosScenarioName);
        try {
            if (_SPLoaderFlights._useNewBootSequence()) {
                this._navigationDataProvider.buildId = this._getBuildId(preloadedData);
            }
            this._validatePreloadedData(preloadedData);
            this._preloadedData = preloadedData;
            return this._navigationOrchestrator.navigate(preloadedData).then(function (navigationResult) {
                _this._preloadedData = navigationResult.preloadedData;
                qosMonitor.writeSuccess();
                return Promise.resolve(navigationResult.application);
            });
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure(error);
            throw error;
        }
    };
    Navigator.prototype._loadApplicationCustomizers = function (preloadedData) {
        return this._navigationOrchestrator._loadApplicationCustomizers(preloadedData);
    };
    Navigator.prototype.invalidate = function (url) {
        return this._navigationDataProvider.invalidate(url);
    };
    Navigator.prototype._validatePreloadedData = function (preloadedData) {
        Validate.isNotNullOrUndefined(preloadedData, 'preloadedData');
        Validate.isNotNullOrUndefined(preloadedData.spPageContextInfo, 'preloadedData.spPageContextInfo');
        Validate.isNonemptyString(preloadedData.clientSideApplicationId, 'preloadedData.clientSideApplicationId');
        if (_SPLoaderFlights._useNewBootSequence()) {
            Validate.isTrue(this._navigationDataProvider.buildId === this._getBuildId(preloadedData), 'NavigationDataProvider.buildId');
        }
    };
    Navigator.prototype._raisePrefetchDataEvent = function (url, preloadedData, prefetchData) {
        prefetchData.then(function (data) {
            if (data) {
                _SPEventManager.instance.raiseStickyEvent(BaseApplication._prefetchedDataEventName, new PrefetchedDataEventArgs(preloadedData.clientSideApplicationId, url, data));
            }
        });
    };
    Navigator.prototype._getBuildId = function (preloadedData) {
        try {
            var baseUrl = preloadedData.manifests[0].loaderConfig.internalModuleBaseUrls[0];
            return baseUrl.slice(baseUrl.indexOf('sp-client-'), -1);
        }
        catch (error) {
            return '';
        }
    };
    return Navigator;
}());
export default Navigator;
