{"version":3,"file":"PnpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yaml from 'js-yaml';\r\nimport * as os from 'os';\r\nimport * as semver from 'semver';\r\nimport { PackageName, FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\r\n\r\n// This is based on PNPM's own configuration:\r\n// https://github.com/pnpm/pnpm-shrinkwrap/blob/master/src/write.ts\r\nconst SHRINKWRAP_YAML_FORMAT: yaml.DumpOptions = {\r\n  lineWidth: 1000,\r\n  noCompatMode: true,\r\n  noRefs: true,\r\n  sortKeys: true\r\n};\r\n\r\ninterface IPnpmShrinkwrapDependencyYaml {\r\n  /** Information about the resolved package */\r\n  resolution: {\r\n    /** The hash of the tarball, to ensure archive integrity */\r\n    integrity: string;\r\n    /** The name of the tarball, if this was from a TGX file */\r\n    tarball?: string;\r\n  };\r\n  /** The list of dependencies and the resolved version */\r\n  dependencies: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * This interface represents the raw pnpm-lock.YAML file\r\n * Example:\r\n *  {\r\n *    \"dependencies\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    },\r\n *    \"packages\": {\r\n *      \"file:projects/library1.tgz\": {\r\n *        \"dependencies: {\r\n *          \"markdown\": \"0.5.0\"\r\n *        },\r\n *        \"name\": \"@rush-temp/library1\",\r\n *        \"resolution\": {\r\n *          \"tarball\": \"file:projects/library1.tgz\"\r\n *        },\r\n *        \"version\": \"0.0.0\"\r\n *      },\r\n *      \"markdown/0.5.0\": {\r\n *        \"resolution\": {\r\n *          \"integrity\": \"sha1-KCBbVlqK51kt4gdGPWY33BgnIrI=\"\r\n *        }\r\n *      }\r\n *    },\r\n *    \"registry\": \"http://localhost:4873/\",\r\n *    \"shrinkwrapVersion\": 3,\r\n *    \"specifiers\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    }\r\n *  }\r\n */\r\ninterface IPnpmShrinkwrapYaml {\r\n  /** The list of resolved version numbers for direct dependencies */\r\n  dependencies: { [dependency: string]: string };\r\n  /** The description of the solved graph */\r\n  packages: { [dependencyVersion: string]: IPnpmShrinkwrapDependencyYaml };\r\n  /** URL of the registry which was used */\r\n  registry: string;\r\n  /** The list of specifiers used to resolve direct dependency versions */\r\n  specifiers: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * Given an encoded \"dependency path\" from the PNPM shrinkwrap file, this extracts the version component.\r\n * @returns a SemVer string, or undefined if the version specifier cannot be parsed\r\n */\r\nexport function extractVersionFromPnpmVersionSpecifier(version: string): string | undefined {\r\n  if (!version) {\r\n    return undefined;\r\n  }\r\n\r\n  // Does the string contain any slashes?\r\n  const versionParts: string[] = version.split('/');\r\n\r\n  if (versionParts.length === 1) {\r\n    // No slashes\r\n\r\n    // Does it contain the V5 underscore delimiter?\r\n    const underscoreIndex: number = version.indexOf('_');\r\n    if (underscoreIndex >= 0) {\r\n      // This form was introduced in PNPM 3 (lockfile version 5):\r\n      //\r\n      // Example: \"23.6.0_babel-core@6.26.3\"\r\n      // Example: \"1.0.7_request@2.88.0\"\r\n      // Example: \"1.0.3_@pnpm+logger@1.0.2\"\r\n      return version.substr(0, underscoreIndex); // e.g. \"23.6.0\"\r\n    } else {\r\n      // It is a simple version.\r\n      //\r\n      // Example: \"0.0.5\"\r\n      return version;\r\n    }\r\n  }\r\n\r\n  // Does it contain an NPM scope?\r\n  const isScoped: boolean = versionParts[1].indexOf('@') === 0;\r\n\r\n  if (versionParts.length === 4 && !isScoped) {\r\n    // Example: \"/gulp-karma/0.0.5/karma@0.13.22\"\r\n    // Example: \"/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7\")\r\n    return versionParts[2]; // e.g. \"0.0.5\"\r\n  }\r\n\r\n  if (versionParts.length === 5 && isScoped) {\r\n    // Example: \"/@ms/sp-client-utilities/3.1.1/foo@13.1.0\"\r\n    return versionParts[3]; // e.g. \"3.1.1\"\r\n  }\r\n\r\n  if (semver.valid(versionParts[versionParts.length - 1]) !== null) {\r\n    // Example: \"path.pkgs.visualstudio.com/@scope/depame/1.4.0\"\r\n    return versionParts[versionParts.length - 1];  // e.g. \"1.4.0\"\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nexport class PnpmShrinkwrapFile extends BaseShrinkwrapFile {\r\n  private _shrinkwrapJson: IPnpmShrinkwrapYaml;\r\n\r\n  public static loadFromFile(shrinkwrapYamlFilename: string): PnpmShrinkwrapFile | undefined {\r\n    try {\r\n      if (!FileSystem.exists(shrinkwrapYamlFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\r\n      // and typically very large, so we want to load it the same way that NPM does.\r\n      const parsedData: IPnpmShrinkwrapYaml = yaml.safeLoad(FileSystem.readFile(shrinkwrapYamlFilename).toString());\r\n\r\n      return new PnpmShrinkwrapFile(parsedData);\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapYamlFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\r\n  }\r\n\r\n  /**\r\n   * Serializes the PNPM Shrinkwrap file\r\n   */\r\n  protected serialize(): string {\r\n    return yaml.safeDump(this._shrinkwrapJson, SHRINKWRAP_YAML_FORMAT);\r\n  }\r\n\r\n  /**\r\n   * Gets the version number from the list of top-level dependencies in the \"dependencies\" section\r\n   * of the shrinkwrap file\r\n   */\r\n  protected getTopLevelDependencyVersion(dependencyName: string): string | undefined {\r\n    return BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n  }\r\n\r\n  /**\r\n   * Gets the resolved version number of a dependency for a specific temp project.\r\n   * For PNPM, we can reuse the version that another project is using.\r\n   * Note that this function modifies the shrinkwrap data.\r\n   */\r\n  protected tryEnsureDependencyVersion(dependencyName: string,\r\n    tempProjectName: string,\r\n    versionRange: string): string | undefined {\r\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\r\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\r\n    // or underneath the package we are looking at.\r\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\r\n    // to recreate the graph..\r\n    // Because of this, we actually need to check for a version that this package is directly\r\n    // linked to.\r\n\r\n    const tempProjectDependencyKey: string = this._getTempProjectKey(tempProjectName);\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\r\n      this._getPackageDescription(tempProjectDependencyKey);\r\n    if (!packageDescription) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {\r\n      if (versionRange) {\r\n        // this means the current temp project doesn't provide this dependency,\r\n        // however, we may be able to use a different version. we prefer the latest version\r\n        let latestVersion: string | undefined = undefined;\r\n\r\n        this.getTempProjectNames().forEach((otherTempProject: string) => {\r\n          const otherVersion: string | undefined = this._getDependencyVersion(dependencyName, otherTempProject);\r\n          if (otherVersion && semver.satisfies(otherVersion, versionRange)) {\r\n            if (!latestVersion || semver.gt(otherVersion, latestVersion)) {\r\n              latestVersion = otherVersion;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (latestVersion) {\r\n          // go ahead and fixup the shrinkwrap file to point at this\r\n          const dependencies: { [key: string]: string } | undefined =\r\n            this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies || {};\r\n          dependencies[dependencyName] = latestVersion;\r\n          this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies = dependencies;\r\n\r\n          return latestVersion;\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    return this._normalizeDependencyVersion(dependencyName, packageDescription.dependencies[dependencyName]);\r\n  }\r\n\r\n  protected checkValidVersionRange(dependencyVersion: string, versionRange: string): boolean { // override\r\n    // dependencyVersion could be a relative or absolute path, for those cases we\r\n    // need to extract the version from the end of the path.\r\n    return super.checkValidVersionRange(dependencyVersion.split('/').pop()!, versionRange);\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: IPnpmShrinkwrapYaml) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.registry) {\r\n      this._shrinkwrapJson.registry = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = { };\r\n    }\r\n    if (!this._shrinkwrapJson.specifiers) {\r\n      this._shrinkwrapJson.specifiers = { };\r\n    }\r\n    if (!this._shrinkwrapJson.packages) {\r\n      this._shrinkwrapJson.packages = { };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the version of a dependency being used by a given project\r\n   */\r\n  private _getDependencyVersion(dependencyName: string, tempProjectName: string): string | undefined {\r\n    const tempProjectDependencyKey: string = this._getTempProjectKey(tempProjectName);\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\r\n      this._getPackageDescription(tempProjectDependencyKey);\r\n    if (!packageDescription) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {\r\n      return undefined;\r\n    }\r\n\r\n    return this._normalizeDependencyVersion(dependencyName, packageDescription.dependencies[dependencyName]);\r\n  }\r\n\r\n  /**\r\n   * Gets the package description for a tempProject from the shrinkwrap file.\r\n   */\r\n  private _getPackageDescription(tempProjectDependencyKey: string): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined\r\n      = BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.packages, tempProjectDependencyKey);\r\n\r\n    if (!packageDescription || !packageDescription.dependencies) {\r\n      return undefined;\r\n    }\r\n\r\n    return packageDescription;\r\n  }\r\n\r\n  private _getTempProjectKey(tempProjectName: string): string {\r\n    // Example: \"project1\"\r\n    const unscopedTempProjectName: string = PackageName.getUnscopedName(tempProjectName);\r\n    return `file:projects/${unscopedTempProjectName}.tgz`;\r\n  }\r\n\r\n  private _normalizeDependencyVersion(dependencyName: string, version: string): string | undefined {\r\n    if (version) {\r\n      const extractedVersion: string | undefined = extractVersionFromPnpmVersionSpecifier(version);\r\n\r\n      if (!extractedVersion) {\r\n        throw new Error(`Cannot parse pnpm shrinkwrap version specifier: `\r\n          + `\"${version}\" for \"${dependencyName}\"`);\r\n      }\r\n\r\n      return extractedVersion;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"]}