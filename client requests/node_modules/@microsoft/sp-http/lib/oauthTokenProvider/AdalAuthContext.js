import { Guid, _SPKillSwitch } from '@microsoft/sp-core-library';
import AadConstants from './AadConstants';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import { AadErrorHandler } from './AadErrorHandler';
var AdalAuthContext =  (function () {
    function AdalAuthContext(authContext, aadUserId) {
        this.servicePrincipalId = authContext.config.clientId;
        this._aadUserId = aadUserId || '';
        this._patchAdalAuthContext(authContext);
        this._authContext = authContext;
    }
    AdalAuthContext.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        return this._getAccessToken(resourceEndpoint, useCachedToken);
    };
    AdalAuthContext.prototype._getAccessToken = function (resourceEndpoint, useCachedToken) {
        var cachedAccessToken = this._tryGetCachedAccessToken(resourceEndpoint);
        if (useCachedToken && cachedAccessToken) {
            return Promise.resolve(cachedAccessToken);
        }
        else {
            return this._fetchAccessToken(resourceEndpoint);
        }
    };
    AdalAuthContext.prototype._tryGetCachedAccessToken = function (resourceEndpoint) {
        var cachedToken;
        try {
            cachedToken = this._authContext.getCachedToken(resourceEndpoint);
            if (!_SPKillSwitch.isActivated(AdalAuthContext.validateTokenIdentityKillSwitchGuid, '05/13/19', 'Validate Access Token belongs to current user')) {
                var jwtToken = this._authContext._extractIdToken(cachedToken);
                if (jwtToken.oid !== this._aadUserId || jwtToken.appid !== this.servicePrincipalId) {
                    cachedToken = undefined;
                }
            }
        }
        catch (e) {
        }
        return cachedToken;
    };
    AdalAuthContext.prototype._fetchAccessToken = function (resourceEndpoint) {
        var _this = this;
        var acquireAccessTokenQosMonitor = new _QosMonitor('AadTokenProvider.AcquireAccessToken');
        var correlationId = Guid.newGuid().toString();
        var correlationObject;
        if (!_SPKillSwitch.isActivated(AdalAuthContext.addCorrelationIdKillSwitchGuid, '05/13/19', 'Add correlation id to AAD request')) {
            correlationObject = { CorrelationId: correlationId };
            this._authContext.config.correlationId = correlationId;
        }
        return this._fetchAccessTokenSilent(resourceEndpoint)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess(correlationObject);
            return token;
        })
            .catch(function (e) {
            if (AadErrorHandler._doesErrorCodeExist(e.message, AadConstants.RESOLVABLE_ERROR_CODES)) {
                AadErrorHandler._handleInteractionRequiredFailures(_this._authContext, e.message, resourceEndpoint);
                acquireAccessTokenQosMonitor.writeExpectedFailure(e.message, e, correlationObject);
            }
            else if (AadErrorHandler._doesErrorCodeExist(e.message, AadConstants.UNRESOLVABLE_ERROR_CODES)) {
                acquireAccessTokenQosMonitor.writeExpectedFailure(e.message, e, correlationObject);
            }
            else {
                acquireAccessTokenQosMonitor.writeUnexpectedFailure(e.message, e, correlationObject);
            }
            throw e;
        });
    };
    AdalAuthContext.prototype._fetchAccessTokenSilent = function (resourceEndpoint) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._authContext.acquireToken(resourceEndpoint, function (message, token) {
                if (!token) {
                    reject(new Error(message));
                }
                else {
                    resolve(token);
                }
            });
        });
    };
    AdalAuthContext.prototype._patchAdalAuthContext = function (authContext) {
        var _this = this;
        Object.getPrototypeOf(authContext)._singletonInstance = undefined;
        authContext._addAdalFrame = function (iframeId) {
            return _this._addAdalFrame(authContext, iframeId);
        };
        authContext._loadFrame = function (urlNavigate, frameName) {
            return _this._loadFrame(authContext, urlNavigate, frameName);
        };
        authContext._user = {};
    };
    AdalAuthContext.prototype._addAdalFrame = function (authContext, iframeId) {
        if (typeof iframeId === 'undefined') {
            return;
        }
        authContext.info('Add adal frame to document:' + iframeId);
        var adalFrame = document.getElementById(iframeId);
        var sandboxAttributes = 'allow-same-origin allow-scripts allow-forms allow-pointer-lock';
        if (!adalFrame) {
            if (document.createElement && document.documentElement &&
                (window.opera || window.navigator.userAgent.indexOf('MSIE 5.0') === -1)) {
                var ifr = document.createElement('iframe');
                ifr.setAttribute('id', iframeId);
                ifr.setAttribute('aria-hidden', 'true');
                ifr.setAttribute('sandbox', sandboxAttributes);
                ifr.style.visibility = 'hidden';
                ifr.style.position = 'absolute';
                ifr.style.width = ifr.style.height = ifr.style.border = '0';
                adalFrame = document.getElementsByTagName('body')[0].appendChild(ifr);
            }
            else if (document.body && document.body.insertAdjacentHTML) {
                document.body.insertAdjacentHTML('beforeEnd', '<iframe sandbox="' + sandboxAttributes + '" name="' +
                    iframeId + '" id="' + iframeId + '" style="display:none"></iframe>');
            }
            if (window.frames && window.frames[iframeId]) {
                adalFrame = window.frames[iframeId];
            }
        }
        return adalFrame;
    };
    AdalAuthContext.prototype._loadFrame = function (authContext, urlNavigate, frameName) {
        authContext.info('LoadFrame: ' + frameName);
        var frameHandle = authContext._addAdalFrame(frameName);
        frameHandle.src = urlNavigate;
    };
    AdalAuthContext.validateTokenIdentityKillSwitchGuid = Guid.parse('3c341cba-7d49-42d3-821d-8960d3fbdce5');
    AdalAuthContext.addCorrelationIdKillSwitchGuid = Guid.parse('61fb0ba9-bd42-4cc3-9f65-615460488164');
    return AdalAuthContext;
}());
export default AdalAuthContext;
