import AadConstants from './AadConstants';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import SPHttpClient from '../spHttpClient/SPHttpClient';
import { AadErrorHandler } from './AadErrorHandler';
var OBOTokenProvider =  (function () {
    function OBOTokenProvider(authContext, tokenParameters) {
        this.servicePrincipalId = authContext.config.clientId;
        this._patchAdalAuthContext(authContext);
        this._authContext = authContext;
        this._serverRelativeUrl = tokenParameters.serverRelativeUrl;
        this._spHttpClient = tokenParameters.spHttpClient;
    }
    OBOTokenProvider.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        return this._getAccessToken(resourceEndpoint, useCachedToken);
    };
    OBOTokenProvider.prototype._getAccessToken = function (resourceEndpoint, useCachedToken) {
        var cachedAccessToken = this._tryGetCachedAccessToken(resourceEndpoint);
        if (useCachedToken && cachedAccessToken) {
            return Promise.resolve(cachedAccessToken);
        }
        else {
            return this._fetchAccessToken(resourceEndpoint);
        }
    };
    OBOTokenProvider.prototype._tryGetCachedAccessToken = function (resourceEndpoint) {
        var cachedToken;
        try {
            cachedToken = this._authContext.getCachedToken(resourceEndpoint);
        }
        catch (e) {
            _TraceLogger.logError(OBOTokenProvider._logSource, e);
        }
        return cachedToken;
    };
    OBOTokenProvider.prototype._fetchAccessToken = function (resourceEndpoint) {
        var acquireAccessTokenQosMonitor = new _QosMonitor('OBOTokenProvider.AcquireAccessToken');
        return this._fetchAccessTokenSilent(resourceEndpoint)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess();
            return token;
        })
            .catch(function (e) {
            if (AadErrorHandler._doesErrorCodeExist(e.message, AadConstants.UNRESOLVABLE_ERROR_CODES)) {
                acquireAccessTokenQosMonitor.writeExpectedFailure(e.message);
            }
            else {
                acquireAccessTokenQosMonitor.writeUnexpectedFailure(e.message);
            }
            throw e;
        });
    };
    OBOTokenProvider.prototype._fetchAccessTokenSilent = function (resourceEndpoint) {
        var urlToCall = this._serverRelativeUrl + "/_api/Microsoft.SharePoint.Internal" +
            (".ClientSideComponent.Token.AcquireOBOToken?resource='" + resourceEndpoint + "'") +
            ("&clientId='" + this._authContext.config.clientId + "'");
        return this._spHttpClient.get(urlToCall, SPHttpClient.configurations.v1, {
            headers: {
                'X-HTTP-Method': 'GET',
                'OData-Version': '3.0'
            }
        })
            .then(function (response) {
            return response.ok ? response.json() : Promise.reject(response.json());
        })
            .then(function (json) {
            return JSON.parse(json.value).AccessToken;
        });
    };
    OBOTokenProvider.prototype._patchAdalAuthContext = function (authContext) {
        Object.getPrototypeOf(authContext)._singletonInstance = undefined;
    };
    OBOTokenProvider._logSource = _LogSource.create('OBOTokenProvider');
    return OBOTokenProvider;
}());
export { OBOTokenProvider };
