import { Guid, Validate, _SPKillSwitch } from '@microsoft/sp-core-library';
import { fetchProviderServiceKey } from '../httpClient/FetchProvider';
import HttpClientResponse from '../httpClient/HttpClientResponse';
import AadTokenProviders from '../oauthTokenProvider/AadTokenProviders';
import HttpClientHelper from '../httpClient/HttpClientHelper';
import { predefinedConfigurations } from './AadHttpClientConfiguration';
var AadHttpClient =  (function () {
    function AadHttpClient(serviceScope, resourceEndpoint, options) {
        var _this = this;
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        Validate.isNotNullOrUndefined(resourceEndpoint, 'resourceUrl');
        this._resourceUrl = resourceEndpoint;
        this._serviceScope = serviceScope;
        this._aadTokenProvider =
            options && options.tokenProvider ||
                AadTokenProviders.configurable;
        this._aadTokenConfiguration = options && options.configuration;
        this._useCachedToken = options && options.useCachedToken !== undefined ? options.useCachedToken : true;
        serviceScope.whenFinished(function () {
            _this._fetchProvider = serviceScope.consume(fetchProviderServiceKey);
        });
    }
    AadHttpClient.prototype.fetch = function (url, configuration, options) {
        var _this = this;
        return this._fetch(url, configuration, options, this._useCachedToken)
            .then(function (originalResponse) {
            if (!_SPKillSwitch.isActivated(AadHttpClient.authRetryKillSwitchGuid, '05/13/19', 'Get a fresh token for authorization failures') &&
                originalResponse.status === 403) {
                return _this._fetch(url, configuration, options, false);
            }
            else {
                return originalResponse;
            }
        })
            .then(function (value) { return new HttpClientResponse(value); });
    };
    AadHttpClient.prototype.get = function (url, configuration, options) {
        return this.fetch(url, configuration, HttpClientHelper.overrideHttpMethod(options, 'GET'));
    };
    AadHttpClient.prototype.post = function (url, configuration, options) {
        return this.fetch(url, configuration, HttpClientHelper.overrideHttpMethod(options, 'POST'));
    };
    AadHttpClient.prototype._fetch = function (url, configuration, options, useCachedToken) {
        var _this = this;
        var tokenFetchPromise;
        if (this._aadTokenConfiguration && this._aadTokenProvider._getTokenInternal) {
            tokenFetchPromise = this._aadTokenProvider._getTokenInternal(this._resourceUrl, this._aadTokenConfiguration, useCachedToken);
        }
        else {
            tokenFetchPromise = this._aadTokenProvider.getToken(this._resourceUrl, useCachedToken);
        }
        return tokenFetchPromise
            .then(function (token) {
            options.headers = options.headers ? new Headers(options.headers) : new Headers();
            options.headers.append('Authorization', 'Bearer ' + token);
            return HttpClientHelper.fetchCore(configuration, new Request(url, options), _this._serviceScope, _this._fetchProvider, AadHttpClient._className);
        });
    };
    AadHttpClient.configurations = predefinedConfigurations;
    AadHttpClient.authRetryKillSwitchGuid = Guid.parse('0cf10fc5-9dba-4929-9644-68aa50693e25');
    AadHttpClient._className = 'AadHttpClient';
    return AadHttpClient;
}());
export default AadHttpClient;
