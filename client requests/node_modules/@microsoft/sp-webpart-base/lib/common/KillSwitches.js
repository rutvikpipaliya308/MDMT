import { _SPKillSwitch, Guid } from '@microsoft/sp-core-library';
var webPartLoadDataCollectionKS = Guid.parse('8d37ab7f-2de6-484f-b7f4-ac6f1fc770d7');
var hardVersionCutOffKS = Guid.parse('2fbe4b8b-1ef3-4fe8-99a0-1a1bf62ae6cf');
var KillSwitches =  (function () {
    function KillSwitches() {
    }
    KillSwitches.isAvoidingUnnecesaryWebPartRenderKillSwitchActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('16af4f13-a040-4557-9a79-f782a05ccd1f'), '01/09/2019', 'Avoiding unnecessary web part render');
    };
    KillSwitches.isLogWebPartLoadRenderDoneKillSwitchActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('c2f3c612-9a07-441d-ab4e-f06d2b5268af'), '03/25/2019', 'Log web part load render done.');
    };
    KillSwitches.isDynamicDataDesrializationKSActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('19aaa441-68da-4d30-bcc8-4837283330fe'), '04/16/2019', 'Correctly initializng the dynamic properties during deserializing the web part.');
    };
    KillSwitches.isRefactoringSetWebPartDataKSActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('fc24205e-7265-4003-a302-c2279afd3858'), '04/26/2019', 'Refactor setWebPartData API to support custom logic');
    };
    KillSwitches.isWebPartLoadDataCollectorKSActivated = function () {
        return _SPKillSwitch.isActivated(webPartLoadDataCollectionKS, '05/17/2019', 'Use WebPartLoadDataCollector');
    };
    KillSwitches.isSpinnerMaxHeightKSActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('421be983-2429-4b35-8810-bbf9852716c2'), '6/12/2019', 'Restricting Loading Spinner height to the reservedHeight of the webpart');
    };
    KillSwitches.isRemoveHardVersionCutOffKSActivated = function () {
        return _SPKillSwitch.isActivated(hardVersionCutOffKS, '06/20/2019', 'Avoid hard version cut off until undo-redo is GA');
    };
    KillSwitches.isWebPartLoadShimmerKSActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('ddb0baa6-36e3-49e8-bfbb-f042feb2199b'), '06/25/2019', 'Call only internal display loading indicator');
    };
    KillSwitches.isViewPortDelayTimeoutKSActivated = function () {
        return _SPKillSwitch.isActivated(Guid.parse('faf5ccbf-e823-487e-8b70-5ec5d99499d8'), '05/31/2019', 'Adding additional timeout before showing the loading indicator.');
    };
    return KillSwitches;
}());
export default KillSwitches;
