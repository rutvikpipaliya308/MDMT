import { _PerformanceLogger } from '@ms/sp-telemetry';
var NOT_AVAILABLE_VALUE = 'N/A';
var WebPartLoadDataCollector =  (function () {
    function WebPartLoadDataCollector() {
    }
    WebPartLoadDataCollector.collect = function (manifest,  webPartTag, qosMonitor, pageContext) {
        var getTime = function (key) {
            return _PerformanceLogger.readComponentBreakdown(webPartTag, key);
        };
        var start = getTime('start');
        var moduleLoaded = getTime('modulesLoaded');
        var loadingDelayed = getTime('loadingDelayed');
        var inViewportLoaded = getTime('inViewportLoading');
        var initialized = getTime('init');
        var end = getTime('end');
        var isSpinnyShown = !!getTime('displaySpinner');
        var cacheHit = getTime('CacheHit');
        var cacheMiss = getTime('CacheMiss');
        var prefetechedData = getTime('prefetchedData');
        var isCacheApplicable = Boolean(cacheHit || cacheMiss);
        var webPartCacheHit = isCacheApplicable ? (cacheHit ? 'true' : 'false') : 'N/A';
        var cacheMissReason = WebPartLoadDataCollector._getCacheMissReason(cacheHit, getTime);
        var isMultiGeo = Boolean(pageContext &&
            pageContext.legacyPageContext &&
            pageContext.legacyPageContext.isMultiGeoTenant);
        var perfBreakDown = _PerformanceLogger.readFullEUPLBreakDown();
        var layoutID = NOT_AVAILABLE_VALUE;
        var dataProvider = NOT_AVAILABLE_VALUE;
        var dataProviderTime = _PerformanceLogger.now();
        var layoutKey = "layout:" ;
        var dataProviderKey = "dataProvider:" ;
        Object.keys(perfBreakDown).forEach(function (key) {
            if (key.indexOf(webPartTag) > -1) {
                if (layoutID === NOT_AVAILABLE_VALUE && key.indexOf(layoutKey) > -1) {
                    layoutID = key.split(layoutKey)[1];
                }
                else if (key.indexOf(dataProviderKey) > -1) {
                    if (dataProvider === NOT_AVAILABLE_VALUE || perfBreakDown[key] < dataProviderTime) {
                        dataProvider = key.split(dataProviderKey)[1];
                        dataProviderTime = perfBreakDown[key];
                    }
                }
            }
        });
        var viewportWait = loadingDelayed ? inViewportLoaded - loadingDelayed : 0;
        var extraData = {
            alias: manifest.alias,
            dataProvider: prefetechedData ? 'Prefetch' : dataProvider,
            isMultiGeo: isMultiGeo,
            initTime: Math.floor(initialized - inViewportLoaded),
            isInternal: manifest.isInternal,
            isSpinnyShown: isSpinnyShown,
            layout: layoutID,
            manifestId: manifest.id,
            moduleLoadTime: Math.floor(moduleLoaded - start),
            mySiteCacheHit: webPartCacheHit,
            cacheMissReason: cacheMissReason,
            renderTime: Math.floor(end - initialized),
            scenarioId: _PerformanceLogger.getScenarioId(),
            viewportWait: viewportWait,
            isFullPage: _PerformanceLogger.fullPageLoad
        };
        qosMonitor.writeSuccess(extraData);
    };
    WebPartLoadDataCollector._getCacheMissReason = function (cacheHit, getTime) {
        if (cacheHit) {
            return "N/A" ;
        }
        var mySiteCacheMissOnConfgMismatch = !!getTime('CacheMissConfigMismatch');
        var mySiteCacheMissOnLateFlush = !!getTime('LateFlush');
        var cachedWebPartNotFound = !!getTime('CachedWebPartNotFound');
        var cacheExpired = !!getTime('CacheExpired');
        var cacheMissReason = "NotSpecified" ;
        if (mySiteCacheMissOnConfgMismatch) {
            cacheMissReason = "CacheConfigMissmatch" ;
        }
        else if (mySiteCacheMissOnLateFlush) {
            cacheMissReason = "LateFlush" ;
        }
        else if (cachedWebPartNotFound) {
            cacheMissReason = "CachedItemNotFound" ;
        }
        else if (cacheExpired) {
            cacheMissReason = "CacheExpired" ;
        }
        return cacheMissReason;
    };
    return WebPartLoadDataCollector;
}());
export default WebPartLoadDataCollector;
