'use strict';
import * as tslib_1 from "tslib";
import { sealed } from '@microsoft/decorators';
import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { Environment, SPError, Text, Validate } from '@microsoft/sp-core-library';
import strings from './loc/Strings.resx';
import ErrorMessage from './ErrorMessage';
import FriendlyErrorMessage from './FriendlyErrorMessage';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import SpinnerFactory from './SpinnerFactory';
import ShimmerFactory from './ShimmerFactory';
import { Flights } from '../common/Flights';
import KillSwitches from '../common/KillSwitches';
var ClientSideWebPartStatusRenderer =  (function () {
    function ClientSideWebPartStatusRenderer() {
        this._errorId = 'cswp-error';
        this._logSource = _LogSource.create('ClientSideWebPartStatusRenderer');
        this._activeIndicatorCache = new Map();
    }
    ClientSideWebPartStatusRenderer_1 = ClientSideWebPartStatusRenderer;
    ClientSideWebPartStatusRenderer._getAdditionalTimeOut = function (webPartTag) {
        var loadingDelayed = _PerformanceLogger.readComponentBreakdown(webPartTag, 'loadingDelayed');
        var inViewportLoaded = _PerformanceLogger.readComponentBreakdown(webPartTag, 'inViewPortLoading');
        var timeout = 0;
        if (loadingDelayed && inViewportLoaded) {
            timeout = inViewportLoaded - loadingDelayed;
        }
        else if (loadingDelayed) {
            timeout = 500;
        }
        else {
            timeout = 0;
        }
        return timeout;
    };
    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype._displayLoadingIndicator = function (domElement, loadingMessage, performanceLogEventName, reservedHeight, isInternal, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, reservedHeight, timeout, performanceLogEventName, isInternal);
    };
    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (this._activeIndicatorCache.has(domElement)) {
            var cacheEntry = this._getCacheEntry(domElement);
            _TraceLogger.logVerbose(this._logSource, strings.ClearLoadingIndicator);
            if (cacheEntry.loadingTimer) {
                window.clearTimeout(cacheEntry.loadingTimer);
            }
            if (cacheEntry.placeholder) {
                if (cacheEntry.placeholder.parentElement) {
                    cacheEntry.placeholder.parentElement.removeChild(cacheEntry.placeholder);
                }
            }
            this._activeIndicatorCache.delete(domElement);
        }
    };
    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        Validate.isNotNullOrUndefined(error, 'error');
        var errorText = '';
        if (error instanceof SPError) {
            errorText = error.toStringForUI();
        }
        else {
            var vanillaError = error;
            var stack = vanillaError.stack;
            var newLineSeparator = '\r\n';
            var callStack = stack ? Text.format(strings.WebpartErrorCallStackText, newLineSeparator, stack) : '';
            errorText = Text.format(strings.WebpartErrorErrorText, newLineSeparator, "" + (vanillaError.message || error), callStack);
        }
        var cacheEntry = this._getCacheEntry(domElement);
        cacheEntry.isErrorBeingRendered = true;
        var errorComponent;
        if (!DEBUG) {
            errorComponent = new FriendlyErrorMessage({ errorMessage: errorText }).render();
        }
        else {
            errorComponent = new ErrorMessage({ errorMessage: errorText }).render();
        }
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'block';
        }
        else {
            divErr = document.createElement('div');
            divErr.setAttribute('data-sp-id', this._errorId);
            this._clearChildren(domElement);
            domElement.appendChild(divErr);
            ClassicPageUtils.disableAutomaticPostbacks(domElement, Environment.type);
        }
        divErr.setAttribute('data-automation-id', 'webPartError');
        divErr.innerHTML = '';
        divErr.appendChild(errorComponent);
    };
    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._activeIndicatorCache.get(domElement);
        if (cacheEntry && cacheEntry.isErrorBeingRendered) {
            cacheEntry.isErrorBeingRendered = false;
            var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
            if (divErr) {
                divErr.style.display = 'none';
                divErr.removeAttribute('data-automation-id');
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._createLoadingIndicator = function (domElement, loadingMessage, reservedHeight, timeout, performanceLogEventName, isInternal) {
        var _this = this;
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!timeout || (timeout && isNaN(timeout))) {
            timeout = 1500; 
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.loadingTimer) {
            window.clearTimeout(cacheEntry.loadingTimer);
        }
        this._renderLoadingIndicator(domElement, loadingMessage, reservedHeight, false, performanceLogEventName);
        cacheEntry.loadingTimer = window.setTimeout(function () {
            if (!KillSwitches.isViewPortDelayTimeoutKSActivated() && performanceLogEventName && isInternal) {
                var additionalTimeOut = ClientSideWebPartStatusRenderer_1._getAdditionalTimeOut(performanceLogEventName);
                cacheEntry.loadingTimer = window.setTimeout(function () {
                    _this._showLoadingIndicator(domElement, loadingMessage, reservedHeight, performanceLogEventName, isInternal);
                }, additionalTimeOut);
            }
            else {
                _this._showLoadingIndicator(domElement, loadingMessage, reservedHeight, performanceLogEventName, isInternal);
            }
        }, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype._showLoadingIndicator = function (domElement, loadingMessage, reservedHeight, performanceLogEventName, isInternal) {
        if (performanceLogEventName && isInternal) {
            _PerformanceLogger.markComponent(performanceLogEventName, 'displaySpinner');
        }
        this._renderLoadingIndicator(domElement, loadingMessage, reservedHeight, true, performanceLogEventName);
    };
    ClientSideWebPartStatusRenderer.prototype._renderLoadingIndicator = function (domElement, loadingMessage, reservedHeight, showLoadingIndicator, performanceLogEventName) {
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.isErrorBeingRendered) {
            return;
        }
        _TraceLogger.logVerbose(this._logSource, strings.DisplayLoadingIndicator);
        if (!cacheEntry.placeholder) {
            cacheEntry.placeholder = this._createLoadingIndicatorElement(domElement, showLoadingIndicator, loadingMessage, reservedHeight, performanceLogEventName);
        }
        else {
            cacheEntry.placeholder.style.display = showLoadingIndicator ? 'block' : 'none';
        }
    };
    ClientSideWebPartStatusRenderer.prototype._getCacheEntry = function (domElement) {
        if (this._activeIndicatorCache.has(domElement)) {
            return this._activeIndicatorCache.get(domElement);
        }
        var cacheEntry = {
            loadingTimer: undefined,
            placeholder: undefined,
            isErrorBeingRendered: false
        };
        this._activeIndicatorCache.set(domElement, cacheEntry);
        return cacheEntry;
    };
    ClientSideWebPartStatusRenderer.prototype._createLoadingIndicatorElement = function (domElement, showLoadingIndicator, loadingMessage, reservedHeight, performanceLogEventName) {
        this._clearChildren(domElement);
        var titleMessage = Text.format(strings.LoadingStatus, loadingMessage);
        var loadingIndicatorContainerDiv = Flights.isShimmerFlightEnabled() && performanceLogEventName
            ? ShimmerFactory.createShimmer(domElement.clientWidth, reservedHeight, performanceLogEventName, titleMessage)
            : this._createSpinnerElement(titleMessage, reservedHeight);
        loadingIndicatorContainerDiv.style.display = showLoadingIndicator ? 'block' : 'none';
        return domElement.appendChild(loadingIndicatorContainerDiv);
    };
    ClientSideWebPartStatusRenderer.prototype._createSpinnerElement = function (titleMessage, reservedHeight) {
        var spinnerElement = SpinnerFactory.createSpinner(titleMessage);
        if (!KillSwitches.isSpinnerMaxHeightKSActivated() && reservedHeight !== undefined) {
            var parentElement = document.createElement('div');
            parentElement.style.maxHeight = reservedHeight + "px";
            parentElement.appendChild(spinnerElement);
            spinnerElement = parentElement;
        }
        return spinnerElement;
    };
    ClientSideWebPartStatusRenderer.prototype._clearChildren = function (element) {
        while (element.hasChildNodes()) {
            if (element.lastChild) {
                element.removeChild(element.lastChild);
            }
        }
    };
    var ClientSideWebPartStatusRenderer_1;
    ClientSideWebPartStatusRenderer = ClientSideWebPartStatusRenderer_1 = tslib_1.__decorate([
        sealed
    ], ClientSideWebPartStatusRenderer);
    return ClientSideWebPartStatusRenderer;
}());
export default ClientSideWebPartStatusRenderer;
