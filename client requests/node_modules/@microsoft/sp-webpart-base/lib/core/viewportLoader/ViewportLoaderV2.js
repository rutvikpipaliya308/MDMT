import { _EngagementLogger, _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { Validate } from '@microsoft/sp-core-library';
import * as lodash from '@microsoft/sp-lodash-subset';
var INTERSECTION_OBSERVER = 'IntersectionObserver';
var ViewportLoader =  (function () {
    function ViewportLoader() {
        this._components = new Set();
        this._observerMap = new Map();
        this.LAZY_LOADED_TRACKER_ATTRIBUTE = 'data-sp-component-lazycount';
        this.SCROLL = 'scroll';
        this.RESIZE = 'resize';
        this._isInitialized = false;
        this._logSource = _LogSource.create('ViewportLoader');
        this._isListeningWindow = false;
        this._offsetComponentsToLoad = [];
        this._bind();
        if (!!window[INTERSECTION_OBSERVER]) {
            ViewportLoader._useIntersectionObserver = true;
            this._observer = new IntersectionObserver(this._onObserved, { threshold: [0.01] });
        }
        else {
            ViewportLoader._useIntersectionObserver = false;
        }
    }
    ViewportLoader.getInstance = function (eventNamePrefix, simpleLoad) {
        if (ViewportLoader._instance === undefined) {
            ViewportLoader._instance = new ViewportLoader();
            ViewportLoader._simpleLoad = !!simpleLoad;
            ViewportLoader._eventNamePrefix = eventNamePrefix;
        }
        return ViewportLoader._instance;
    };
    ViewportLoader.optimizeViewportLoader = function () {
        return !ViewportLoader._simpleLoad && ViewportLoader._useIntersectionObserver;
    };
    ViewportLoader.prototype.register = function (component, scrollableParent) {
        var _this = this;
        Validate.isNotNullOrUndefined(component, 'component');
        component._registeredInViewport = false;
        if (!this._isInitialized) {
            this._initialize();
        }
        this._checkVisibilityAndRender(component, 1 );
        if (component._registeredInViewport) {
            return;
        }
        var domEl = component.domElement;
        var parents = scrollableParent ? [scrollableParent] : this._findScrollableParents(domEl);
        parents.forEach(function (parent) {
            var count = _this._updateRegisteredChildren(parent, 1);
            if (count === 1) {
                _this._listenEvents(parent);
            }
        });
        this._listenEvents(window);
        this._components.add(component);
        if (!!this.isViewportLoaded) {
            _TraceLogger.logVerbose(this._logSource, 'Component to load after no more lazy state');
            this.isViewportLoaded = false;
            this._loadOutsideViewPort();
        }
    };
    ViewportLoader.prototype.release = function (component) {
        Validate.isNotNullOrUndefined(component, 'release component');
        if (this._components.has(component)) {
            this._renderComponentInViewport(component, 1 );
            this.unregister(component);
            return true;
        }
        return false;
    };
    ViewportLoader.prototype.unregister = function (component) {
        var _this = this;
        Validate.isNotNullOrUndefined(component, 'unregister component');
        if (!this._components.has(component)) {
            return;
        }
        this._components.delete(component);
        var parents = this._findScrollableParents(component.domElement);
        parents.forEach(function (parent) {
            var count = _this._updateRegisteredChildren(parent, -1);
            if (count <= 0) {
                _this._unlistenEvents(parent);
            }
        });
        if (this._components.size === 0 && !!this.isViewportLoaded) {
            this._unlistenEvents(window);
            this._dispose();
        }
    };
    ViewportLoader.prototype.loadOutsideViewPort = function () {
        _TraceLogger.logVerbose(this._logSource, "loadOutsideViewPort is called to load rest of the " + this._components.size + " components");
        this._loadOutsideViewPort();
        _TraceLogger.logVerbose(this._logSource, "loadOutsideViewPort is completed");
    };
    ViewportLoader.prototype._bind = function () {
        this.register = this.register.bind(this);
        this.unregister = this.unregister.bind(this);
        this._checkVisibilityAndRender = this._checkVisibilityAndRender.bind(this);
        this._dispose = this._dispose.bind(this);
        this._findScrollableParent = this._findScrollableParent.bind(this);
        this._findScrollableParents = this._findScrollableParents.bind(this);
        this._initialize = this._initialize.bind(this);
        this._isCloseToViewport = this._isCloseToViewport.bind(this);
        this._renderComponentInViewport = this._renderComponentInViewport.bind(this);
        this._unlistenEvents = this._unlistenEvents.bind(this);
        this._updateRegisteredChildren = this._updateRegisteredChildren.bind(this);
        this._loadOutsideViewPort = this._loadOutsideViewPort.bind(this);
        this._onObserved = this._onObserved.bind(this);
    };
    ViewportLoader.prototype._lazyLoaderEventHandler = function () {
        this._loadComponentsInViewport(2 );
    };
    ViewportLoader.prototype._loadComponentsInViewport = function (loadSource) {
        var _this = this;
        if (!this._components || this._components.size === 0) {
            return;
        }
        this._components.forEach(function (value) {
            _this._checkVisibilityAndRender(value, loadSource);
        });
    };
    ViewportLoader.prototype._checkVisibilityAndRender = function (component, loadSource) {
        if (component._registeredInViewport) {
            this.unregister(component);
            return;
        }
        if (ViewportLoader.optimizeViewportLoader()) {
            this._observerMap.set(component.domElement, component);
            this._observer.observe(component.domElement);
            this._onObserved(this._observer.takeRecords());
        }
        else if (this._isCloseToViewport(component.domElement)) {
            this._renderComponentInViewport(component, loadSource);
            this.unregister(component);
        }
    };
    ViewportLoader.prototype._onObserved = function (observedEntries) {
        var _this = this;
        observedEntries.forEach(function (entry) {
            if ((entry.isIntersecting || entry.intersectionRatio > 0) && entry.boundingClientRect) {
                _this._observer.unobserve(entry.target);
                var component = _this._observerMap.get(entry.target);
                if (component) {
                    _this._observerMap.delete(entry.target);
                    _this.release(component);
                }
            }
        });
    };
    ViewportLoader.prototype._isCloseToViewport = function (componentNode) {
        try {
            var parent_1 = this._findScrollableParent(componentNode);
            var _a = componentNode.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
            var documentHeight = window.innerHeight || document.documentElement.clientHeight;
            if (!parent_1) {
                var topInOrAboveViewport = (top_1 - this._offset) <= documentHeight;
                var bottomNotAboveViewport = (top_1 + height + this._offset) >= 0;
                return topInOrAboveViewport && bottomNotAboveViewport;
            }
            var _b = parent_1.getBoundingClientRect(), parentTop = _b.top, parentHeight = _b.height;
            var parentIntersectionTop = Math.max(0, parentTop);
            var parentIntersectionHeight = Math.min(parentTop + parentHeight, documentHeight) - parentIntersectionTop;
            var offsetTop = top_1 - parentIntersectionTop;
            var parentTopInOrAboveViewport = (offsetTop - this._offset) <= parentIntersectionHeight;
            var parentBottomNotAboveViewport = (offsetTop + height + this._offset) >= 0;
            return parentTopInOrAboveViewport && parentBottomNotAboveViewport;
        }
        catch (error) {
            _TraceLogger.logError(this._logSource, error);
            return true;
        }
    };
    ViewportLoader.prototype._findScrollableParents = function (startingElement) {
        var parents = [];
        var parent = startingElement;
        while (parent) {
            parent = this._findScrollableParent(parent);
            if (parent) {
                parents.push(parent);
                parent = parent.parentElement;
            }
        }
        return parents;
    };
    ViewportLoader.prototype._findScrollableParent = function (startingElement) {
        var DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
        var el = startingElement;
        var body = document.body;
        while (el && el !== body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
                return el;
            }
            el = el.parentElement;
        }
        el = startingElement;
        while (el && el !== body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {
                var styles = getComputedStyle(el);
                if (styles) {
                    var overflowY = styles.getPropertyValue('overflow-y');
                    if (overflowY && (overflowY === this.SCROLL || overflowY === 'auto')) {
                        return el;
                    }
                }
            }
            el = el.parentElement;
        }
        if (!el || el === body) {
            el = undefined;
        }
        return el;
    };
    ViewportLoader.prototype._initialize = function () {
        this._offset = 0;
        this._initTime = new Date();
        this._lazyHandler = lodash.throttle(this._lazyLoaderEventHandler, 100).bind(this);
        _TraceLogger.logVerbose(this._logSource, 'ViewportLoader is Initialized');
        this._isInitialized = true;
    };
    ViewportLoader.prototype._dispose = function () {
        _TraceLogger.logVerbose(this._logSource, 'ViewportLoader is disposed');
        var timeSpent = (new Date()).getTime() - this._initTime.getTime();
        _EngagementLogger.logEvent(ViewportLoader._eventNamePrefix + '.ViewportLoad.Completed', timeSpent.toString());
        this._isInitialized = false;
        this._initTime = undefined;
    };
    ViewportLoader.prototype._listenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && !this._isListeningWindow)) {
            this._addEventListerer(parent);
            if (isWindow) {
                this._isListeningWindow = true;
            }
        }
    };
    ViewportLoader.prototype._addEventListerer = function (element) {
        element.addEventListener(this.SCROLL, this._lazyHandler, false);
        element.addEventListener(this.RESIZE, this._lazyHandler, false);
    };
    ViewportLoader.prototype._unlistenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && this._isListeningWindow)) {
            this._removeEventListener(parent);
            if (isWindow) {
                this._isListeningWindow = false;
            }
        }
    };
    ViewportLoader.prototype._removeEventListener = function (element) {
        element.removeEventListener(this.SCROLL, this._lazyHandler);
        element.removeEventListener(this.RESIZE, this._lazyHandler);
    };
    ViewportLoader.prototype._updateRegisteredChildren = function (element, count) {
        var lazyChilds = count + Number(element.getAttribute(this.LAZY_LOADED_TRACKER_ATTRIBUTE));
        if (count !== 0) {
            element.setAttribute(this.LAZY_LOADED_TRACKER_ATTRIBUTE, lazyChilds.toString());
        }
        return lazyChilds;
    };
    ViewportLoader.prototype._renderComponentInViewport = function (component, loadSource) {
        if (component && !component._registeredInViewport) {
            component._onInViewport();
            if (loadSource === 1 ) {
                component._registeredInViewport = true;
                _TraceLogger.logVerbose(this._logSource, 'Component is loaded in initial viewport.');
            }
        }
    };
    ViewportLoader.prototype._loadOutsideViewPort = function () {
        var _this = this;
        if (!this._components || this._components.size === 0) {
            this.isViewportLoaded = true;
            return;
        }
        if (ViewportLoader.optimizeViewportLoader()) {
            this._components.forEach(function (component) { return ViewportLoader._instance.release(component); });
            this.isViewportLoaded = true;
            return;
        }
        this._offsetComponentsToLoad = [];
        var documentHeight = window.innerHeight || document.documentElement.clientHeight;
        this._offset = this._offset + documentHeight * 2;
        this._components.forEach(function (component) {
            if (_this._isCloseToViewport(component.domElement)) {
                _this._offsetComponentsToLoad.push(component);
            }
        });
        this._loadComponentsInViewport(3 );
        if (this._components.size > 0) {
            this._loadOutsideViewPort();
        }
        else {
            this.isViewportLoaded = true;
        }
    };
    return ViewportLoader;
}());
export default ViewportLoader;
